"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/drizzle-orm";
exports.ids = ["vendor-chunks/drizzle-orm"];
exports.modules = {

/***/ "(rsc)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/drizzle-orm/alias-cf8e03cd.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ PgArrayBuilder),\n/* harmony export */   A: () => (/* binding */ getOrderByOperators),\n/* harmony export */   B: () => (/* binding */ normalizeRelation),\n/* harmony export */   C: () => (/* binding */ ColumnBuilder),\n/* harmony export */   D: () => (/* binding */ DrizzleError),\n/* harmony export */   E: () => (/* binding */ and),\n/* harmony export */   F: () => (/* binding */ eq),\n/* harmony export */   G: () => (/* binding */ aliasedTable),\n/* harmony export */   H: () => (/* binding */ applyMixins),\n/* harmony export */   I: () => (/* binding */ getTableColumns),\n/* harmony export */   J: () => (/* binding */ TypedQueryBuilder),\n/* harmony export */   K: () => (/* binding */ getTableLikeName),\n/* harmony export */   L: () => (/* binding */ PgColumnBuilder),\n/* harmony export */   M: () => (/* binding */ Many),\n/* harmony export */   N: () => (/* binding */ PgColumn),\n/* harmony export */   O: () => (/* binding */ One),\n/* harmony export */   P: () => (/* binding */ PgDialect),\n/* harmony export */   Q: () => (/* binding */ QueryPromise),\n/* harmony export */   R: () => (/* binding */ pgTableWithSchema),\n/* harmony export */   S: () => (/* binding */ SQL),\n/* harmony export */   T: () => (/* binding */ Table),\n/* harmony export */   U: () => (/* binding */ pgViewWithSchema),\n/* harmony export */   V: () => (/* binding */ ViewBaseConfig),\n/* harmony export */   W: () => (/* binding */ WithSubquery),\n/* harmony export */   X: () => (/* binding */ pgMaterializedViewWithSchema),\n/* harmony export */   Y: () => (/* binding */ CheckBuilder),\n/* harmony export */   Z: () => (/* binding */ Check),\n/* harmony export */   _: () => (/* binding */ check),\n/* harmony export */   a: () => (/* binding */ extractTablesRelationalConfig),\n/* harmony export */   a$: () => (/* binding */ PgView),\n/* harmony export */   a0: () => (/* binding */ PgArray),\n/* harmony export */   a1: () => (/* binding */ PgDateBuilder),\n/* harmony export */   a2: () => (/* binding */ PgDate),\n/* harmony export */   a3: () => (/* binding */ PgDateStringBuilder),\n/* harmony export */   a4: () => (/* binding */ PgDateString),\n/* harmony export */   a5: () => (/* binding */ date),\n/* harmony export */   a6: () => (/* binding */ PgJsonBuilder),\n/* harmony export */   a7: () => (/* binding */ PgJson),\n/* harmony export */   a8: () => (/* binding */ json),\n/* harmony export */   a9: () => (/* binding */ PgJsonbBuilder),\n/* harmony export */   aA: () => (/* binding */ PrimaryKeyBuilder),\n/* harmony export */   aB: () => (/* binding */ PrimaryKey),\n/* harmony export */   aC: () => (/* binding */ PgSelectQueryBuilder),\n/* harmony export */   aD: () => (/* binding */ PgSelect),\n/* harmony export */   aE: () => (/* binding */ InlineForeignKeys),\n/* harmony export */   aF: () => (/* binding */ PgTable),\n/* harmony export */   aG: () => (/* binding */ pgTable),\n/* harmony export */   aH: () => (/* binding */ pgTableCreator),\n/* harmony export */   aI: () => (/* binding */ unique),\n/* harmony export */   aJ: () => (/* binding */ uniqueKeyName),\n/* harmony export */   aK: () => (/* binding */ UniqueConstraintBuilder),\n/* harmony export */   aL: () => (/* binding */ UniqueOnConstraintBuilder),\n/* harmony export */   aM: () => (/* binding */ UniqueConstraint),\n/* harmony export */   aN: () => (/* binding */ getTableConfig),\n/* harmony export */   aO: () => (/* binding */ getViewConfig),\n/* harmony export */   aP: () => (/* binding */ getMaterializedViewConfig),\n/* harmony export */   aQ: () => (/* binding */ parsePgNestedArray),\n/* harmony export */   aR: () => (/* binding */ parsePgArray),\n/* harmony export */   aS: () => (/* binding */ makePgArray),\n/* harmony export */   aT: () => (/* binding */ DefaultViewBuilderCore),\n/* harmony export */   aU: () => (/* binding */ ViewBuilder),\n/* harmony export */   aV: () => (/* binding */ ManualViewBuilder),\n/* harmony export */   aW: () => (/* binding */ MaterializedViewBuilderCore),\n/* harmony export */   aX: () => (/* binding */ MaterializedViewBuilder),\n/* harmony export */   aY: () => (/* binding */ ManualMaterializedViewBuilder),\n/* harmony export */   aZ: () => (/* binding */ PgViewBase),\n/* harmony export */   a_: () => (/* binding */ PgViewConfig),\n/* harmony export */   aa: () => (/* binding */ PgJsonb),\n/* harmony export */   ab: () => (/* binding */ jsonb),\n/* harmony export */   ac: () => (/* binding */ PgNumericBuilder),\n/* harmony export */   ad: () => (/* binding */ PgNumeric),\n/* harmony export */   ae: () => (/* binding */ numeric),\n/* harmony export */   af: () => (/* binding */ decimal),\n/* harmony export */   ag: () => (/* binding */ PgTimeBuilder),\n/* harmony export */   ah: () => (/* binding */ PgTime),\n/* harmony export */   ai: () => (/* binding */ time),\n/* harmony export */   aj: () => (/* binding */ PgTimestampBuilder),\n/* harmony export */   ak: () => (/* binding */ PgTimestamp),\n/* harmony export */   al: () => (/* binding */ PgTimestampStringBuilder),\n/* harmony export */   am: () => (/* binding */ PgTimestampString),\n/* harmony export */   an: () => (/* binding */ timestamp),\n/* harmony export */   ao: () => (/* binding */ PgUUIDBuilder),\n/* harmony export */   ap: () => (/* binding */ PgUUID),\n/* harmony export */   aq: () => (/* binding */ uuid),\n/* harmony export */   ar: () => (/* binding */ ForeignKeyBuilder),\n/* harmony export */   as: () => (/* binding */ ForeignKey),\n/* harmony export */   at: () => (/* binding */ foreignKey),\n/* harmony export */   au: () => (/* binding */ IndexBuilderOn),\n/* harmony export */   av: () => (/* binding */ IndexBuilder),\n/* harmony export */   aw: () => (/* binding */ Index),\n/* harmony export */   ax: () => (/* binding */ index),\n/* harmony export */   ay: () => (/* binding */ uniqueIndex),\n/* harmony export */   az: () => (/* binding */ primaryKey),\n/* harmony export */   b: () => (/* binding */ Param),\n/* harmony export */   b0: () => (/* binding */ PgMaterializedViewConfig),\n/* harmony export */   b1: () => (/* binding */ PgMaterializedView),\n/* harmony export */   b2: () => (/* binding */ pgView),\n/* harmony export */   b3: () => (/* binding */ pgMaterializedView),\n/* harmony export */   b4: () => (/* binding */ ColumnAliasProxyHandler),\n/* harmony export */   b5: () => (/* binding */ RelationTableAliasProxyHandler),\n/* harmony export */   b6: () => (/* binding */ aliasedRelation),\n/* harmony export */   b7: () => (/* binding */ hasOwnEntityKind),\n/* harmony export */   b8: () => (/* binding */ bindIfParam),\n/* harmony export */   b9: () => (/* binding */ ne),\n/* harmony export */   bA: () => (/* binding */ createOne),\n/* harmony export */   bB: () => (/* binding */ createMany),\n/* harmony export */   bC: () => (/* binding */ FakePrimitiveParam),\n/* harmony export */   bD: () => (/* binding */ isSQLWrapper),\n/* harmony export */   bE: () => (/* binding */ StringChunk),\n/* harmony export */   bF: () => (/* binding */ Name),\n/* harmony export */   bG: () => (/* binding */ name),\n/* harmony export */   bH: () => (/* binding */ isDriverValueEncoder),\n/* harmony export */   bI: () => (/* binding */ noopDecoder),\n/* harmony export */   bJ: () => (/* binding */ noopEncoder),\n/* harmony export */   bK: () => (/* binding */ noopMapper),\n/* harmony export */   bL: () => (/* binding */ param),\n/* harmony export */   bM: () => (/* binding */ Placeholder),\n/* harmony export */   bN: () => (/* binding */ placeholder),\n/* harmony export */   bO: () => (/* binding */ TableName),\n/* harmony export */   bP: () => (/* binding */ Schema),\n/* harmony export */   bQ: () => (/* binding */ Columns),\n/* harmony export */   bR: () => (/* binding */ OriginalName),\n/* harmony export */   bS: () => (/* binding */ BaseName),\n/* harmony export */   bT: () => (/* binding */ IsAlias),\n/* harmony export */   bU: () => (/* binding */ ExtraConfigBuilder),\n/* harmony export */   bV: () => (/* binding */ isTable),\n/* harmony export */   bW: () => (/* binding */ iife),\n/* harmony export */   ba: () => (/* binding */ or),\n/* harmony export */   bb: () => (/* binding */ not),\n/* harmony export */   bc: () => (/* binding */ gt),\n/* harmony export */   bd: () => (/* binding */ gte),\n/* harmony export */   be: () => (/* binding */ lt),\n/* harmony export */   bf: () => (/* binding */ lte),\n/* harmony export */   bg: () => (/* binding */ inArray),\n/* harmony export */   bh: () => (/* binding */ notInArray),\n/* harmony export */   bi: () => (/* binding */ isNull),\n/* harmony export */   bj: () => (/* binding */ isNotNull),\n/* harmony export */   bk: () => (/* binding */ exists),\n/* harmony export */   bl: () => (/* binding */ notExists),\n/* harmony export */   bm: () => (/* binding */ between),\n/* harmony export */   bn: () => (/* binding */ notBetween),\n/* harmony export */   bo: () => (/* binding */ like),\n/* harmony export */   bp: () => (/* binding */ notLike),\n/* harmony export */   bq: () => (/* binding */ ilike),\n/* harmony export */   br: () => (/* binding */ notIlike),\n/* harmony export */   bs: () => (/* binding */ arrayContains),\n/* harmony export */   bt: () => (/* binding */ arrayContained),\n/* harmony export */   bu: () => (/* binding */ arrayOverlaps),\n/* harmony export */   bv: () => (/* binding */ asc),\n/* harmony export */   bw: () => (/* binding */ desc),\n/* harmony export */   bx: () => (/* binding */ Relation),\n/* harmony export */   by: () => (/* binding */ Relations),\n/* harmony export */   bz: () => (/* binding */ relations),\n/* harmony export */   c: () => (/* binding */ createTableRelationsHelpers),\n/* harmony export */   d: () => (/* binding */ mapUpdateSet),\n/* harmony export */   e: () => (/* binding */ entityKind),\n/* harmony export */   f: () => (/* binding */ fillPlaceholders),\n/* harmony export */   g: () => (/* binding */ mapRelationalRow),\n/* harmony export */   h: () => (/* binding */ QueryBuilder),\n/* harmony export */   i: () => (/* binding */ is),\n/* harmony export */   j: () => (/* binding */ SelectionProxyHandler),\n/* harmony export */   k: () => (/* binding */ PgSelectBuilder),\n/* harmony export */   l: () => (/* binding */ TransactionRollbackError),\n/* harmony export */   m: () => (/* binding */ mapResultRow),\n/* harmony export */   n: () => (/* binding */ TableAliasProxyHandler),\n/* harmony export */   o: () => (/* binding */ orderSelectedFields),\n/* harmony export */   p: () => (/* binding */ Column),\n/* harmony export */   q: () => (/* binding */ getTableName),\n/* harmony export */   r: () => (/* binding */ Subquery),\n/* harmony export */   s: () => (/* binding */ sql),\n/* harmony export */   t: () => (/* binding */ tracer),\n/* harmony export */   u: () => (/* binding */ SubqueryConfig),\n/* harmony export */   v: () => (/* binding */ View),\n/* harmony export */   w: () => (/* binding */ aliasedTableColumn),\n/* harmony export */   x: () => (/* binding */ getOperators),\n/* harmony export */   y: () => (/* binding */ mapColumnsInSQLToAlias),\n/* harmony export */   z: () => (/* binding */ mapColumnsInAliasedSQLToAlias)\n/* harmony export */ });\nconst entityKind = Symbol.for(\"drizzle:entityKind\");\nconst hasOwnEntityKind = Symbol.for(\"drizzle:hasOwnEntityKind\");\nfunction is(value, type) {\n    if (!value || typeof value !== \"object\") {\n        return false;\n    }\n    if (value instanceof type) {\n        return true;\n    }\n    if (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n        throw new Error(`Class \"${type.name ?? \"<unknown>\"}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`);\n    }\n    let cls = value.constructor;\n    if (cls) {\n        // Traverse the prototype chain to find the entityKind\n        while(cls){\n            if (entityKind in cls && cls[entityKind] === type[entityKind]) {\n                return true;\n            }\n            cls = Object.getPrototypeOf(cls);\n        }\n    }\n    return false;\n}\n/*\n    `Column` only accepts a full `ColumnConfig` as its generic.\n    To infer parts of the config, use `AnyColumn` that accepts a partial config.\n    See `GetColumnData` for example usage of inferring.\n*/ class Column {\n    static{\n        this[entityKind] = \"Column\";\n    }\n    constructor(table, config){\n        this.enumValues = undefined;\n        this.table = table;\n        this.config = config;\n        this.name = config.name;\n        this.notNull = config.notNull;\n        this.default = config.default;\n        this.defaultFn = config.defaultFn;\n        this.hasDefault = config.hasDefault;\n        this.primary = config.primaryKey;\n        this.isUnique = config.isUnique;\n        this.uniqueName = config.uniqueName;\n        this.uniqueType = config.uniqueType;\n        this.dataType = config.dataType;\n        this.columnType = config.columnType;\n    }\n    mapFromDriverValue(value) {\n        return value;\n    }\n    mapToDriverValue(value) {\n        return value;\n    }\n}\nconst ViewBaseConfig = Symbol.for(\"drizzle:ViewBaseConfig\");\nclass View {\n    static{\n        this[entityKind] = \"View\";\n    }\n    constructor({ name, schema, selectedFields, query }){\n        this[ViewBaseConfig] = {\n            name,\n            originalName: name,\n            schema,\n            selectedFields,\n            query: query,\n            isExisting: !query,\n            isAlias: false\n        };\n    }\n    getSQL() {\n        return new SQL([\n            this\n        ]);\n    }\n}\nconst SubqueryConfig = Symbol.for(\"drizzle:SubqueryConfig\");\nclass Subquery {\n    static{\n        this[entityKind] = \"Subquery\";\n    }\n    constructor(sql, selection, alias, isWith = false){\n        this[SubqueryConfig] = {\n            sql,\n            selection,\n            alias,\n            isWith\n        };\n    }\n    getSQL() {\n        return new SQL([\n            this\n        ]);\n    }\n}\nclass WithSubquery extends Subquery {\n    static{\n        this[entityKind] = \"WithSubquery\";\n    }\n}\nclass SelectionProxyHandler {\n    static{\n        this[entityKind] = \"SelectionProxyHandler\";\n    }\n    constructor(config){\n        this.config = {\n            ...config\n        };\n    }\n    get(subquery, prop) {\n        if (prop === SubqueryConfig) {\n            return {\n                ...subquery[SubqueryConfig],\n                selection: new Proxy(subquery[SubqueryConfig].selection, this)\n            };\n        }\n        if (prop === ViewBaseConfig) {\n            return {\n                ...subquery[ViewBaseConfig],\n                selectedFields: new Proxy(subquery[ViewBaseConfig].selectedFields, this)\n            };\n        }\n        if (typeof prop === \"symbol\") {\n            return subquery[prop];\n        }\n        const columns = is(subquery, Subquery) ? subquery[SubqueryConfig].selection : is(subquery, View) ? subquery[ViewBaseConfig].selectedFields : subquery;\n        const value = columns[prop];\n        if (is(value, SQL.Aliased)) {\n            // Never return the underlying SQL expression for a field previously selected in a subquery\n            if (this.config.sqlAliasedBehavior === \"sql\" && !value.isSelectionField) {\n                return value.sql;\n            }\n            const newValue = value.clone();\n            newValue.isSelectionField = true;\n            return newValue;\n        }\n        if (is(value, SQL)) {\n            if (this.config.sqlBehavior === \"sql\") {\n                return value;\n            }\n            throw new Error(`You tried to reference \"${prop}\" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using \".as('alias')\" method.`);\n        }\n        if (is(value, Column)) {\n            if (this.config.alias) {\n                return new Proxy(value, new ColumnAliasProxyHandler(new Proxy(value.table, new TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false))));\n            }\n            return value;\n        }\n        if (typeof value !== \"object\" || value === null) {\n            return value;\n        }\n        return new Proxy(value, new SelectionProxyHandler(this.config));\n    }\n}\n/** @internal */ function mapResultRow(columns, row, joinsNotNullableMap) {\n    // Key -> nested object key, value -> table name if all fields in the nested object are from the same table, false otherwise\n    const nullifyMap = {};\n    const result = columns.reduce((result, { path, field }, columnIndex)=>{\n        let decoder;\n        if (is(field, Column)) {\n            decoder = field;\n        } else if (is(field, SQL)) {\n            decoder = field.decoder;\n        } else {\n            decoder = field.sql.decoder;\n        }\n        let node = result;\n        for (const [pathChunkIndex, pathChunk] of path.entries()){\n            if (pathChunkIndex < path.length - 1) {\n                if (!(pathChunk in node)) {\n                    node[pathChunk] = {};\n                }\n                node = node[pathChunk];\n            } else {\n                const rawValue = row[columnIndex];\n                const value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);\n                if (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n                    const objectName = path[0];\n                    if (!(objectName in nullifyMap)) {\n                        nullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n                    } else if (typeof nullifyMap[objectName] === \"string\" && nullifyMap[objectName] !== getTableName(field.table)) {\n                        nullifyMap[objectName] = false;\n                    }\n                }\n            }\n        }\n        return result;\n    }, {});\n    // Nullify all nested objects from nullifyMap that are nullable\n    if (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n        for (const [objectName, tableName] of Object.entries(nullifyMap)){\n            if (typeof tableName === \"string\" && !joinsNotNullableMap[tableName]) {\n                result[objectName] = null;\n            }\n        }\n    }\n    return result;\n}\n/** @internal */ function orderSelectedFields(fields, pathPrefix) {\n    return Object.entries(fields).reduce((result, [name, field])=>{\n        if (typeof name !== \"string\") {\n            return result;\n        }\n        const newPath = pathPrefix ? [\n            ...pathPrefix,\n            name\n        ] : [\n            name\n        ];\n        if (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {\n            result.push({\n                path: newPath,\n                field\n            });\n        } else if (is(field, Table)) {\n            result.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));\n        } else {\n            result.push(...orderSelectedFields(field, newPath));\n        }\n        return result;\n    }, []);\n}\n/** @internal */ function mapUpdateSet(table, values) {\n    const entries = Object.entries(values).filter(([, value])=>value !== undefined).map(([key, value])=>{\n        // eslint-disable-next-line unicorn/prefer-ternary\n        if (is(value, SQL)) {\n            return [\n                key,\n                value\n            ];\n        } else {\n            return [\n                key,\n                new Param(value, table[Table.Symbol.Columns][key])\n            ];\n        }\n    });\n    if (entries.length === 0) {\n        throw new Error(\"No values to set\");\n    }\n    return Object.fromEntries(entries);\n}\n/** @internal */ function applyMixins(baseClass, extendedClasses) {\n    for (const extendedClass of extendedClasses){\n        for (const name of Object.getOwnPropertyNames(extendedClass.prototype)){\n            Object.defineProperty(baseClass.prototype, name, Object.getOwnPropertyDescriptor(extendedClass.prototype, name) || Object.create(null));\n        }\n    }\n}\nfunction getTableColumns(table) {\n    return table[Table.Symbol.Columns];\n}\n/** @internal */ function getTableLikeName(table) {\n    return is(table, Subquery) ? table[SubqueryConfig].alias : is(table, View) ? table[ViewBaseConfig].name : is(table, SQL) ? undefined : table[Table.Symbol.IsAlias] ? table[Table.Symbol.Name] : table[Table.Symbol.BaseName];\n}\nfunction iife(fn, ...args) {\n    return fn(...args);\n}\n/** @internal */ const TableName = Symbol.for(\"drizzle:Name\");\n/** @internal */ const Schema = Symbol.for(\"drizzle:Schema\");\n/** @internal */ const Columns = Symbol.for(\"drizzle:Columns\");\n/** @internal */ const OriginalName = Symbol.for(\"drizzle:OriginalName\");\n/** @internal */ const BaseName = Symbol.for(\"drizzle:BaseName\");\n/** @internal */ const IsAlias = Symbol.for(\"drizzle:IsAlias\");\n/** @internal */ const ExtraConfigBuilder = Symbol.for(\"drizzle:ExtraConfigBuilder\");\nconst IsDrizzleTable = Symbol.for(\"drizzle:IsDrizzleTable\");\nclass Table {\n    static{\n        this[entityKind] = \"Table\";\n    }\n    static{\n        /** @internal */ this.Symbol = {\n            Name: TableName,\n            Schema: Schema,\n            OriginalName: OriginalName,\n            Columns: Columns,\n            BaseName: BaseName,\n            IsAlias: IsAlias,\n            ExtraConfigBuilder: ExtraConfigBuilder\n        };\n    }\n    constructor(name, schema, baseName){\n        /** @internal */ this[IsAlias] = false;\n        /** @internal */ this[ExtraConfigBuilder] = undefined;\n        this[IsDrizzleTable] = true;\n        this[TableName] = this[OriginalName] = name;\n        this[Schema] = schema;\n        this[BaseName] = baseName;\n    }\n    getSQL() {\n        return new SQL([\n            this\n        ]);\n    }\n}\nfunction isTable(table) {\n    return typeof table === \"object\" && table !== null && IsDrizzleTable in table;\n}\nfunction getTableName(table) {\n    return table[TableName];\n}\nlet prop;\nclass QueryPromise {\n    static{\n        prop = Symbol.toStringTag;\n    }\n    static{\n        this[entityKind] = \"QueryPromise\";\n    }\n    catch(onRejected) {\n        return this.then(undefined, onRejected);\n    }\n    finally(onFinally) {\n        return this.then((value)=>{\n            onFinally?.();\n            return value;\n        }, (reason)=>{\n            onFinally?.();\n            throw reason;\n        });\n    }\n    then(onFulfilled, onRejected) {\n        return this.execute().then(onFulfilled, onRejected);\n    }\n    constructor(){\n        this[prop] = \"QueryPromise\";\n    }\n}\n/** @internal */ const tracer = {\n    startActiveSpan (name, fn) {\n        {\n            return fn();\n        }\n    }\n};\nclass DrizzleError extends Error {\n    static{\n        this[entityKind] = \"DrizzleError\";\n    }\n    constructor(message){\n        super(message);\n        this.name = \"DrizzleError\";\n    }\n    static wrap(error, message) {\n        return error instanceof Error // eslint-disable-line no-instanceof/no-instanceof\n         ? new DrizzleError(message ? `${message}: ${error.message}` : error.message) : new DrizzleError(message ?? String(error));\n    }\n}\nclass TransactionRollbackError extends DrizzleError {\n    static{\n        this[entityKind] = \"TransactionRollbackError\";\n    }\n    constructor(){\n        super(\"Rollback\");\n    }\n}\n/** @internal */ const InlineForeignKeys = Symbol.for(\"drizzle:PgInlineForeignKeys\");\nlet prop1;\nclass PgTable extends Table {\n    static{\n        prop1 = Table.Symbol.ExtraConfigBuilder;\n    }\n    static{\n        this[entityKind] = \"PgTable\";\n    }\n    static{\n        /** @internal */ this.Symbol = Object.assign({}, Table.Symbol, {\n            InlineForeignKeys: InlineForeignKeys\n        });\n    }\n    constructor(...args){\n        super(...args);\n        /**@internal */ this[InlineForeignKeys] = [];\n        /** @internal */ this[prop1] = undefined;\n    }\n}\n/** @internal */ function pgTableWithSchema(name, columns, extraConfig, schema, baseName = name) {\n    const rawTable = new PgTable(name, schema, baseName);\n    const builtColumns = Object.fromEntries(Object.entries(columns).map(([name, colBuilderBase])=>{\n        const colBuilder = colBuilderBase;\n        const column = colBuilder.build(rawTable);\n        rawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n        return [\n            name,\n            column\n        ];\n    }));\n    const table = Object.assign(rawTable, builtColumns);\n    table[Table.Symbol.Columns] = builtColumns;\n    if (extraConfig) {\n        table[PgTable.Symbol.ExtraConfigBuilder] = extraConfig;\n    }\n    return table;\n}\nconst pgTable = (name, columns, extraConfig)=>{\n    return pgTableWithSchema(name, columns, extraConfig, undefined);\n};\nfunction pgTableCreator(customizeTableName) {\n    return (name, columns, extraConfig)=>{\n        return pgTableWithSchema(customizeTableName(name), columns, extraConfig, undefined, name);\n    };\n}\nclass CheckBuilder {\n    static{\n        this[entityKind] = \"PgCheckBuilder\";\n    }\n    constructor(name, value){\n        this.name = name;\n        this.value = value;\n    }\n    /** @internal */ build(table) {\n        return new Check(table, this);\n    }\n}\nclass Check {\n    static{\n        this[entityKind] = \"PgCheck\";\n    }\n    constructor(table, builder){\n        this.table = table;\n        this.name = builder.name;\n        this.value = builder.value;\n    }\n}\nfunction check(name, value) {\n    return new CheckBuilder(name, value);\n}\nclass ForeignKeyBuilder {\n    static{\n        this[entityKind] = \"PgForeignKeyBuilder\";\n    }\n    constructor(config, actions){\n        /** @internal */ this._onUpdate = \"no action\";\n        /** @internal */ this._onDelete = \"no action\";\n        this.reference = ()=>{\n            const { columns, foreignColumns } = config();\n            return {\n                columns,\n                foreignTable: foreignColumns[0].table,\n                foreignColumns\n            };\n        };\n        if (actions) {\n            this._onUpdate = actions.onUpdate;\n            this._onDelete = actions.onDelete;\n        }\n    }\n    onUpdate(action) {\n        this._onUpdate = action === undefined ? \"no action\" : action;\n        return this;\n    }\n    onDelete(action) {\n        this._onDelete = action === undefined ? \"no action\" : action;\n        return this;\n    }\n    /** @internal */ build(table) {\n        return new ForeignKey(table, this);\n    }\n}\nclass ForeignKey {\n    static{\n        this[entityKind] = \"PgForeignKey\";\n    }\n    constructor(table, builder){\n        this.table = table;\n        this.reference = builder.reference;\n        this.onUpdate = builder._onUpdate;\n        this.onDelete = builder._onDelete;\n    }\n    getName() {\n        const { columns, foreignColumns } = this.reference();\n        const columnNames = columns.map((column)=>column.name);\n        const foreignColumnNames = foreignColumns.map((column)=>column.name);\n        const chunks = [\n            this.table[PgTable.Symbol.Name],\n            ...columnNames,\n            foreignColumns[0].table[PgTable.Symbol.Name],\n            ...foreignColumnNames\n        ];\n        return `${chunks.join(\"_\")}_fk`;\n    }\n}\nfunction foreignKey(config) {\n    function mappedConfig() {\n        const { columns, foreignColumns } = config;\n        return {\n            columns,\n            foreignColumns\n        };\n    }\n    return new ForeignKeyBuilder(mappedConfig);\n}\nclass IndexBuilderOn {\n    static{\n        this[entityKind] = \"PgIndexBuilderOn\";\n    }\n    constructor(unique, name){\n        this.unique = unique;\n        this.name = name;\n    }\n    on(...columns) {\n        return new IndexBuilder(columns, this.unique, false, this.name);\n    }\n    onOnly(...columns) {\n        return new IndexBuilder(columns, this.unique, true, this.name);\n    }\n}\nclass IndexBuilder {\n    static{\n        this[entityKind] = \"PgIndexBuilder\";\n    }\n    constructor(columns, unique, only, name){\n        this.config = {\n            name,\n            columns,\n            unique,\n            only\n        };\n    }\n    concurrently() {\n        this.config.concurrently = true;\n        return this;\n    }\n    using(method) {\n        this.config.using = method;\n        return this;\n    }\n    asc() {\n        this.config.order = \"asc\";\n        return this;\n    }\n    desc() {\n        this.config.order = \"desc\";\n        return this;\n    }\n    nullsFirst() {\n        this.config.nulls = \"first\";\n        return this;\n    }\n    nullsLast() {\n        this.config.nulls = \"last\";\n        return this;\n    }\n    where(condition) {\n        this.config.where = condition;\n        return this;\n    }\n    /** @internal */ build(table) {\n        return new Index(this.config, table);\n    }\n}\nclass Index {\n    static{\n        this[entityKind] = \"PgIndex\";\n    }\n    constructor(config, table){\n        this.config = {\n            ...config,\n            table\n        };\n    }\n}\nfunction index(name) {\n    return new IndexBuilderOn(false, name);\n}\nfunction uniqueIndex(name) {\n    return new IndexBuilderOn(true, name);\n}\nfunction primaryKey(...columns) {\n    return new PrimaryKeyBuilder(columns);\n}\nclass PrimaryKeyBuilder {\n    static{\n        this[entityKind] = \"PgPrimaryKeyBuilder\";\n    }\n    constructor(columns){\n        this.columns = columns;\n    }\n    /** @internal */ build(table) {\n        return new PrimaryKey(table, this.columns);\n    }\n}\nclass PrimaryKey {\n    static{\n        this[entityKind] = \"PgPrimaryKey\";\n    }\n    constructor(table, columns){\n        this.table = table;\n        this.columns = columns;\n    }\n    getName() {\n        return `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column)=>column.name).join(\"_\")}_pk`;\n    }\n}\nfunction unique(name) {\n    return new UniqueOnConstraintBuilder(name);\n}\nfunction uniqueKeyName(table, columns) {\n    return `${table[PgTable.Symbol.Name]}_${columns.join(\"_\")}_unique`;\n}\nclass UniqueConstraintBuilder {\n    static{\n        this[entityKind] = \"PgUniqueConstraintBuilder\";\n    }\n    constructor(columns, name){\n        /** @internal */ this.nullsNotDistinctConfig = false;\n        this.name = name;\n        this.columns = columns;\n    }\n    nullsNotDistinct() {\n        this.nullsNotDistinctConfig = true;\n        return this;\n    }\n    /** @internal */ build(table) {\n        return new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);\n    }\n}\nclass UniqueOnConstraintBuilder {\n    static{\n        this[entityKind] = \"PgUniqueOnConstraintBuilder\";\n    }\n    constructor(name){\n        this.name = name;\n    }\n    on(...columns) {\n        return new UniqueConstraintBuilder(columns, this.name);\n    }\n}\nclass UniqueConstraint {\n    static{\n        this[entityKind] = \"PgUniqueConstraint\";\n    }\n    constructor(table, columns, nullsNotDistinct, name){\n        this.nullsNotDistinct = false;\n        this.table = table;\n        this.columns = columns;\n        this.name = name ?? uniqueKeyName(this.table, this.columns.map((column)=>column.name));\n        this.nullsNotDistinct = nullsNotDistinct;\n    }\n    getName() {\n        return this.name;\n    }\n}\nfunction getTableConfig(table) {\n    const columns = Object.values(table[Table.Symbol.Columns]);\n    const indexes = [];\n    const checks = [];\n    const primaryKeys = [];\n    const foreignKeys = Object.values(table[PgTable.Symbol.InlineForeignKeys]);\n    const uniqueConstraints = [];\n    const name = table[Table.Symbol.Name];\n    const schema = table[Table.Symbol.Schema];\n    const extraConfigBuilder = table[PgTable.Symbol.ExtraConfigBuilder];\n    if (extraConfigBuilder !== undefined) {\n        const extraConfig = extraConfigBuilder(table[Table.Symbol.Columns]);\n        for (const builder of Object.values(extraConfig)){\n            if (is(builder, IndexBuilder)) {\n                indexes.push(builder.build(table));\n            } else if (is(builder, CheckBuilder)) {\n                checks.push(builder.build(table));\n            } else if (is(builder, UniqueConstraintBuilder)) {\n                uniqueConstraints.push(builder.build(table));\n            } else if (is(builder, PrimaryKeyBuilder)) {\n                primaryKeys.push(builder.build(table));\n            } else if (is(builder, ForeignKeyBuilder)) {\n                foreignKeys.push(builder.build(table));\n            }\n        }\n    }\n    return {\n        columns,\n        indexes,\n        foreignKeys,\n        checks,\n        primaryKeys,\n        uniqueConstraints,\n        name,\n        schema\n    };\n}\nfunction getViewConfig(view) {\n    return {\n        ...view[ViewBaseConfig],\n        ...view[PgViewConfig]\n    };\n}\nfunction getMaterializedViewConfig(view) {\n    return {\n        ...view[ViewBaseConfig],\n        ...view[PgMaterializedViewConfig]\n    };\n}\nfunction parsePgArrayValue(arrayString, startFrom, inQuotes) {\n    for(let i = startFrom; i < arrayString.length; i++){\n        const char = arrayString[i];\n        if (char === \"\\\\\") {\n            i++;\n            continue;\n        }\n        if (char === '\"') {\n            return [\n                arrayString.slice(startFrom, i).replace(/\\\\/g, \"\"),\n                i + 1\n            ];\n        }\n        if (inQuotes) {\n            continue;\n        }\n        if (char === \",\" || char === \"}\") {\n            return [\n                arrayString.slice(startFrom, i).replace(/\\\\/g, \"\"),\n                i\n            ];\n        }\n    }\n    return [\n        arrayString.slice(startFrom).replace(/\\\\/g, \"\"),\n        arrayString.length\n    ];\n}\nfunction parsePgNestedArray(arrayString, startFrom = 0) {\n    const result = [];\n    let i = startFrom;\n    let lastCharIsComma = false;\n    while(i < arrayString.length){\n        const char = arrayString[i];\n        if (char === \",\") {\n            if (lastCharIsComma || i === startFrom) {\n                result.push(\"\");\n            }\n            lastCharIsComma = true;\n            i++;\n            continue;\n        }\n        lastCharIsComma = false;\n        if (char === \"\\\\\") {\n            i += 2;\n            continue;\n        }\n        if (char === '\"') {\n            const [value, startFrom] = parsePgArrayValue(arrayString, i + 1, true);\n            result.push(value);\n            i = startFrom;\n            continue;\n        }\n        if (char === \"}\") {\n            return [\n                result,\n                i + 1\n            ];\n        }\n        if (char === \"{\") {\n            const [value, startFrom] = parsePgNestedArray(arrayString, i + 1);\n            result.push(value);\n            i = startFrom;\n            continue;\n        }\n        const [value, newStartFrom] = parsePgArrayValue(arrayString, i, false);\n        result.push(value);\n        i = newStartFrom;\n    }\n    return [\n        result,\n        i\n    ];\n}\nfunction parsePgArray(arrayString) {\n    const [result] = parsePgNestedArray(arrayString, 1);\n    return result;\n}\nfunction makePgArray(array) {\n    return `{${array.map((item)=>{\n        if (Array.isArray(item)) {\n            return makePgArray(item);\n        }\n        if (typeof item === \"string\" && item.includes(\",\")) {\n            return `\"${item.replace(/\"/g, '\\\\\"')}\"`;\n        }\n        return `${item}`;\n    }).join(\",\")}}`;\n}\n// To understand how to use `ColumnBuilder` and `AnyColumnBuilder`, see `Column` and `AnyColumn` documentation.\nclass ColumnBuilder {\n    static{\n        this[entityKind] = \"ColumnBuilder\";\n    }\n    constructor(name, dataType, columnType){\n        /**\n     * Alias for {@link $defaultFn}.\n     */ this.$default = this.$defaultFn;\n        this.config = {\n            name,\n            notNull: false,\n            default: undefined,\n            hasDefault: false,\n            primaryKey: false,\n            isUnique: false,\n            uniqueName: undefined,\n            uniqueType: undefined,\n            dataType,\n            columnType\n        };\n    }\n    /**\n     * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.\n     *\n     * @example\n     * ```ts\n     * const users = pgTable('users', {\n     * \tid: integer('id').$type<UserId>().primaryKey(),\n     * \tdetails: json('details').$type<UserDetails>().notNull(),\n     * });\n     * ```\n     */ $type() {\n        return this;\n    }\n    /**\n     * Adds a `not null` clause to the column definition.\n     *\n     * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.\n     */ notNull() {\n        this.config.notNull = true;\n        return this;\n    }\n    /**\n     * Adds a `default <value>` clause to the column definition.\n     *\n     * Affects the `insert` model of the table - columns *with* `default` are optional on insert.\n     *\n     * If you need to set a dynamic default value, use {@link $defaultFn} instead.\n     */ default(value) {\n        this.config.default = value;\n        this.config.hasDefault = true;\n        return this;\n    }\n    /**\n     * Adds a dynamic default value to the column.\n     * The function will be called when the row is inserted, and the returned value will be used as the column value.\n     *\n     * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n     */ $defaultFn(fn) {\n        this.config.defaultFn = fn;\n        this.config.hasDefault = true;\n        return this;\n    }\n    /**\n     * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.\n     *\n     * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.\n     */ primaryKey() {\n        this.config.primaryKey = true;\n        this.config.notNull = true;\n        return this;\n    }\n}\nclass PgColumnBuilder extends ColumnBuilder {\n    static{\n        this[entityKind] = \"PgColumnBuilder\";\n    }\n    array(size) {\n        return new PgArrayBuilder(this.config.name, this, size);\n    }\n    references(ref, actions = {}) {\n        this.foreignKeyConfigs.push({\n            ref,\n            actions\n        });\n        return this;\n    }\n    unique(name, config) {\n        this.config.isUnique = true;\n        this.config.uniqueName = name;\n        this.config.uniqueType = config?.nulls;\n        return this;\n    }\n    /** @internal */ buildForeignKeys(column, table) {\n        return this.foreignKeyConfigs.map(({ ref, actions })=>{\n            return iife((ref, actions)=>{\n                const builder = new ForeignKeyBuilder(()=>{\n                    const foreignColumn = ref();\n                    return {\n                        columns: [\n                            column\n                        ],\n                        foreignColumns: [\n                            foreignColumn\n                        ]\n                    };\n                });\n                if (actions.onUpdate) {\n                    builder.onUpdate(actions.onUpdate);\n                }\n                if (actions.onDelete) {\n                    builder.onDelete(actions.onDelete);\n                }\n                return builder.build(table);\n            }, ref, actions);\n        });\n    }\n    constructor(...args){\n        super(...args);\n        this.foreignKeyConfigs = [];\n    }\n}\n// To understand how to use `PgColumn` and `PgColumn`, see `Column` and `AnyColumn` documentation.\nclass PgColumn extends Column {\n    static{\n        this[entityKind] = \"PgColumn\";\n    }\n    constructor(table, config){\n        if (!config.uniqueName) {\n            config.uniqueName = uniqueKeyName(table, [\n                config.name\n            ]);\n        }\n        super(table, config);\n        this.table = table;\n    }\n}\nclass PgArrayBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgArrayBuilder\";\n    }\n    constructor(name, baseBuilder, size){\n        super(name, \"array\", \"PgArray\");\n        this.config.baseBuilder = baseBuilder;\n        this.config.size = size;\n    }\n    /** @internal */ build(table) {\n        const baseColumn = this.config.baseBuilder.build(table);\n        return new PgArray(table, this.config, baseColumn);\n    }\n}\nclass PgArray extends PgColumn {\n    static{\n        this[entityKind] = \"PgArray\";\n    }\n    constructor(table, config, baseColumn, range){\n        super(table, config);\n        this.baseColumn = baseColumn;\n        this.range = range;\n        this.size = config.size;\n    }\n    getSQLType() {\n        return `${this.baseColumn.getSQLType()}[${typeof this.size === \"number\" ? this.size : \"\"}]`;\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            // Thank you node-postgres for not parsing enum arrays\n            value = parsePgArray(value);\n        }\n        return value.map((v)=>this.baseColumn.mapFromDriverValue(v));\n    }\n    mapToDriverValue(value, isNestedArray = false) {\n        const a = value.map((v)=>v === null ? null : is(this.baseColumn, PgArray) ? this.baseColumn.mapToDriverValue(v, true) : this.baseColumn.mapToDriverValue(v));\n        if (isNestedArray) return a;\n        return makePgArray(a);\n    }\n}\nclass PgDateColumnBaseBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgDateColumnBaseBuilder\";\n    }\n    defaultNow() {\n        return this.default(sql`now()`);\n    }\n}\nclass PgDateBuilder extends PgDateColumnBaseBuilder {\n    static{\n        this[entityKind] = \"PgDateBuilder\";\n    }\n    constructor(name){\n        super(name, \"date\", \"PgDate\");\n    }\n    /** @internal */ build(table) {\n        return new PgDate(table, this.config);\n    }\n}\nclass PgDate extends PgColumn {\n    static{\n        this[entityKind] = \"PgDate\";\n    }\n    getSQLType() {\n        return \"date\";\n    }\n    mapFromDriverValue(value) {\n        return new Date(value);\n    }\n    mapToDriverValue(value) {\n        return value.toISOString();\n    }\n}\nclass PgDateStringBuilder extends PgDateColumnBaseBuilder {\n    static{\n        this[entityKind] = \"PgDateStringBuilder\";\n    }\n    constructor(name){\n        super(name, \"string\", \"PgDateString\");\n    }\n    /** @internal */ build(table) {\n        return new PgDateString(table, this.config);\n    }\n}\nclass PgDateString extends PgColumn {\n    static{\n        this[entityKind] = \"PgDateString\";\n    }\n    getSQLType() {\n        return \"date\";\n    }\n}\nfunction date(name, config) {\n    if (config?.mode === \"date\") {\n        return new PgDateBuilder(name);\n    }\n    return new PgDateStringBuilder(name);\n}\nclass PgJsonBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgJsonBuilder\";\n    }\n    constructor(name){\n        super(name, \"json\", \"PgJson\");\n    }\n    /** @internal */ build(table) {\n        return new PgJson(table, this.config);\n    }\n}\nclass PgJson extends PgColumn {\n    static{\n        this[entityKind] = \"PgJson\";\n    }\n    constructor(table, config){\n        super(table, config);\n    }\n    getSQLType() {\n        return \"json\";\n    }\n    mapToDriverValue(value) {\n        return JSON.stringify(value);\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            try {\n                return JSON.parse(value);\n            } catch  {\n                return value;\n            }\n        }\n        return value;\n    }\n}\nfunction json(name) {\n    return new PgJsonBuilder(name);\n}\nclass PgJsonbBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgJsonbBuilder\";\n    }\n    constructor(name){\n        super(name, \"json\", \"PgJsonb\");\n    }\n    /** @internal */ build(table) {\n        return new PgJsonb(table, this.config);\n    }\n}\nclass PgJsonb extends PgColumn {\n    static{\n        this[entityKind] = \"PgJsonb\";\n    }\n    constructor(table, config){\n        super(table, config);\n    }\n    getSQLType() {\n        return \"jsonb\";\n    }\n    mapToDriverValue(value) {\n        return JSON.stringify(value);\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            try {\n                return JSON.parse(value);\n            } catch  {\n                return value;\n            }\n        }\n        return value;\n    }\n}\nfunction jsonb(name) {\n    return new PgJsonbBuilder(name);\n}\nclass PgNumericBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgNumericBuilder\";\n    }\n    constructor(name, precision, scale){\n        super(name, \"string\", \"PgNumeric\");\n        this.config.precision = precision;\n        this.config.scale = scale;\n    }\n    /** @internal */ build(table) {\n        return new PgNumeric(table, this.config);\n    }\n}\nclass PgNumeric extends PgColumn {\n    static{\n        this[entityKind] = \"PgNumeric\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.precision = config.precision;\n        this.scale = config.scale;\n    }\n    getSQLType() {\n        if (this.precision !== undefined && this.scale !== undefined) {\n            return `numeric(${this.precision}, ${this.scale})`;\n        } else if (this.precision === undefined) {\n            return \"numeric\";\n        } else {\n            return `numeric(${this.precision})`;\n        }\n    }\n}\nfunction numeric(name, config) {\n    return new PgNumericBuilder(name, config?.precision, config?.scale);\n}\nconst decimal = numeric;\nclass PgTimeBuilder extends PgDateColumnBaseBuilder {\n    static{\n        this[entityKind] = \"PgTimeBuilder\";\n    }\n    constructor(name, withTimezone, precision){\n        super(name, \"string\", \"PgTime\");\n        this.withTimezone = withTimezone;\n        this.precision = precision;\n        this.config.withTimezone = withTimezone;\n        this.config.precision = precision;\n    }\n    /** @internal */ build(table) {\n        return new PgTime(table, this.config);\n    }\n}\nclass PgTime extends PgColumn {\n    static{\n        this[entityKind] = \"PgTime\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.withTimezone = config.withTimezone;\n        this.precision = config.precision;\n    }\n    getSQLType() {\n        const precision = this.precision === undefined ? \"\" : `(${this.precision})`;\n        return `time${precision}${this.withTimezone ? \" with time zone\" : \"\"}`;\n    }\n}\nfunction time(name, config = {}) {\n    return new PgTimeBuilder(name, config.withTimezone ?? false, config.precision);\n}\nclass PgTimestampBuilder extends PgDateColumnBaseBuilder {\n    static{\n        this[entityKind] = \"PgTimestampBuilder\";\n    }\n    constructor(name, withTimezone, precision){\n        super(name, \"date\", \"PgTimestamp\");\n        this.config.withTimezone = withTimezone;\n        this.config.precision = precision;\n    }\n    /** @internal */ build(table) {\n        return new PgTimestamp(table, this.config);\n    }\n}\nclass PgTimestamp extends PgColumn {\n    static{\n        this[entityKind] = \"PgTimestamp\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.mapFromDriverValue = (value)=>{\n            return new Date(this.withTimezone ? value : value + \"+0000\");\n        };\n        this.mapToDriverValue = (value)=>{\n            return this.withTimezone ? value.toUTCString() : value.toISOString();\n        };\n        this.withTimezone = config.withTimezone;\n        this.precision = config.precision;\n    }\n    getSQLType() {\n        const precision = this.precision === undefined ? \"\" : ` (${this.precision})`;\n        return `timestamp${precision}${this.withTimezone ? \" with time zone\" : \"\"}`;\n    }\n}\nclass PgTimestampStringBuilder extends PgDateColumnBaseBuilder {\n    static{\n        this[entityKind] = \"PgTimestampStringBuilder\";\n    }\n    constructor(name, withTimezone, precision){\n        super(name, \"string\", \"PgTimestampString\");\n        this.config.withTimezone = withTimezone;\n        this.config.precision = precision;\n    }\n    /** @internal */ build(table) {\n        return new PgTimestampString(table, this.config);\n    }\n}\nclass PgTimestampString extends PgColumn {\n    static{\n        this[entityKind] = \"PgTimestampString\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.withTimezone = config.withTimezone;\n        this.precision = config.precision;\n    }\n    getSQLType() {\n        const precision = this.precision === undefined ? \"\" : `(${this.precision})`;\n        return `timestamp${precision}${this.withTimezone ? \" with time zone\" : \"\"}`;\n    }\n}\nfunction timestamp(name, config = {}) {\n    if (config.mode === \"string\") {\n        return new PgTimestampStringBuilder(name, config.withTimezone ?? false, config.precision);\n    }\n    return new PgTimestampBuilder(name, config.withTimezone ?? false, config.precision);\n}\nclass PgUUIDBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgUUIDBuilder\";\n    }\n    constructor(name){\n        super(name, \"string\", \"PgUUID\");\n    }\n    /**\n     * Adds `default gen_random_uuid()` to the column definition.\n     */ defaultRandom() {\n        return this.default(sql`gen_random_uuid()`);\n    }\n    /** @internal */ build(table) {\n        return new PgUUID(table, this.config);\n    }\n}\nclass PgUUID extends PgColumn {\n    static{\n        this[entityKind] = \"PgUUID\";\n    }\n    getSQLType() {\n        return \"uuid\";\n    }\n}\nfunction uuid(name) {\n    return new PgUUIDBuilder(name);\n}\nclass PgDialect {\n    static{\n        this[entityKind] = \"PgDialect\";\n    }\n    async migrate(migrations, session) {\n        const migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS \"drizzle\".\"__drizzle_migrations\" (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at bigint\n\t\t\t)\n\t\t`;\n        await session.execute(sql`CREATE SCHEMA IF NOT EXISTS \"drizzle\"`);\n        await session.execute(migrationTableCreate);\n        const dbMigrations = await session.all(sql`select id, hash, created_at from \"drizzle\".\"__drizzle_migrations\" order by created_at desc limit 1`);\n        const lastDbMigration = dbMigrations[0];\n        await session.transaction(async (tx)=>{\n            for await (const migration of migrations){\n                if (!lastDbMigration || Number(lastDbMigration.created_at) < migration.folderMillis) {\n                    for (const stmt of migration.sql){\n                        await tx.execute(sql.raw(stmt));\n                    }\n                    await tx.execute(sql`insert into \"drizzle\".\"__drizzle_migrations\" (\"hash\", \"created_at\") values(${migration.hash}, ${migration.folderMillis})`);\n                }\n            }\n        });\n    }\n    escapeName(name) {\n        return `\"${name}\"`;\n    }\n    escapeParam(num) {\n        return `$${num + 1}`;\n    }\n    escapeString(str) {\n        return `'${str.replace(/'/g, \"''\")}'`;\n    }\n    buildDeleteQuery({ table, where, returning }) {\n        const returningSql = returning ? sql` returning ${this.buildSelection(returning, {\n            isSingleTable: true\n        })}` : undefined;\n        const whereSql = where ? sql` where ${where}` : undefined;\n        return sql`delete from ${table}${whereSql}${returningSql}`;\n    }\n    buildUpdateSet(table, set) {\n        const setEntries = Object.entries(set);\n        const setSize = setEntries.length;\n        return sql.join(setEntries.flatMap(([colName, value], i)=>{\n            const col = table[Table.Symbol.Columns][colName];\n            const res = sql`${sql.identifier(col.name)} = ${value}`;\n            if (i < setSize - 1) {\n                return [\n                    res,\n                    sql.raw(\", \")\n                ];\n            }\n            return [\n                res\n            ];\n        }));\n    }\n    buildUpdateQuery({ table, set, where, returning }) {\n        const setSql = this.buildUpdateSet(table, set);\n        const returningSql = returning ? sql` returning ${this.buildSelection(returning, {\n            isSingleTable: true\n        })}` : undefined;\n        const whereSql = where ? sql` where ${where}` : undefined;\n        return sql`update ${table} set ${setSql}${whereSql}${returningSql}`;\n    }\n    /**\n     * Builds selection SQL with provided fields/expressions\n     *\n     * Examples:\n     *\n     * `select <selection> from`\n     *\n     * `insert ... returning <selection>`\n     *\n     * If `isSingleTable` is true, then columns won't be prefixed with table name\n     */ buildSelection(fields, { isSingleTable = false } = {}) {\n        const columnsLen = fields.length;\n        const chunks = fields.flatMap(({ field }, i)=>{\n            const chunk = [];\n            if (is(field, SQL.Aliased) && field.isSelectionField) {\n                chunk.push(sql.identifier(field.fieldAlias));\n            } else if (is(field, SQL.Aliased) || is(field, SQL)) {\n                const query = is(field, SQL.Aliased) ? field.sql : field;\n                if (isSingleTable) {\n                    chunk.push(new SQL(query.queryChunks.map((c)=>{\n                        if (is(c, PgColumn)) {\n                            return sql.identifier(c.name);\n                        }\n                        return c;\n                    })));\n                } else {\n                    chunk.push(query);\n                }\n                if (is(field, SQL.Aliased)) {\n                    chunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n                }\n            } else if (is(field, Column)) {\n                if (isSingleTable) {\n                    chunk.push(sql.identifier(field.name));\n                } else {\n                    chunk.push(field);\n                }\n            }\n            if (i < columnsLen - 1) {\n                chunk.push(sql`, `);\n            }\n            return chunk;\n        });\n        return sql.join(chunks);\n    }\n    buildSelectQuery({ withList, fields, fieldsFlat, where, having, table, joins, orderBy, groupBy, limit, offset, lockingClauses, distinct }) {\n        const fieldsList = fieldsFlat ?? orderSelectedFields(fields);\n        for (const f of fieldsList){\n            if (is(f.field, Column) && getTableName(f.field.table) !== (is(table, Subquery) ? table[SubqueryConfig].alias : is(table, PgViewBase) ? table[ViewBaseConfig].name : is(table, SQL) ? undefined : getTableName(table)) && !((table)=>joins?.some(({ alias })=>alias === (table[Table.Symbol.IsAlias] ? getTableName(table) : table[Table.Symbol.BaseName])))(f.field.table)) {\n                const tableName = getTableName(f.field.table);\n                throw new Error(`Your \"${f.path.join(\"->\")}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`);\n            }\n        }\n        const isSingleTable = !joins || joins.length === 0;\n        let withSql;\n        if (withList?.length) {\n            const withSqlChunks = [\n                sql`with `\n            ];\n            for (const [i, w] of withList.entries()){\n                withSqlChunks.push(sql`${sql.identifier(w[SubqueryConfig].alias)} as (${w[SubqueryConfig].sql})`);\n                if (i < withList.length - 1) {\n                    withSqlChunks.push(sql`, `);\n                }\n            }\n            withSqlChunks.push(sql` `);\n            withSql = sql.join(withSqlChunks);\n        }\n        let distinctSql;\n        if (distinct) {\n            distinctSql = distinct === true ? sql` distinct` : sql` distinct on (${sql.join(distinct.on, \", \")})`;\n        }\n        const selection = this.buildSelection(fieldsList, {\n            isSingleTable\n        });\n        const tableSql = (()=>{\n            if (is(table, Table) && table[Table.Symbol.OriginalName] !== table[Table.Symbol.Name]) {\n                let fullName = sql`${sql.identifier(table[Table.Symbol.OriginalName])}`;\n                if (table[Table.Symbol.Schema]) {\n                    fullName = sql`${sql.identifier(table[Table.Symbol.Schema])}.${fullName}`;\n                }\n                return sql`${fullName} ${sql.identifier(table[Table.Symbol.Name])}`;\n            }\n            return table;\n        })();\n        const joinsArray = [];\n        if (joins) {\n            for (const [index, joinMeta] of joins.entries()){\n                if (index === 0) {\n                    joinsArray.push(sql` `);\n                }\n                const table = joinMeta.table;\n                const lateralSql = joinMeta.lateral ? sql` lateral` : undefined;\n                if (is(table, PgTable)) {\n                    const tableName = table[PgTable.Symbol.Name];\n                    const tableSchema = table[PgTable.Symbol.Schema];\n                    const origTableName = table[PgTable.Symbol.OriginalName];\n                    const alias = tableName === origTableName ? undefined : joinMeta.alias;\n                    joinsArray.push(sql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${tableSchema ? sql`${sql.identifier(tableSchema)}.` : undefined}${sql.identifier(origTableName)}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`);\n                } else if (is(table, View)) {\n                    const viewName = table[ViewBaseConfig].name;\n                    const viewSchema = table[ViewBaseConfig].schema;\n                    const origViewName = table[ViewBaseConfig].originalName;\n                    const alias = viewName === origViewName ? undefined : joinMeta.alias;\n                    joinsArray.push(sql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${viewSchema ? sql`${sql.identifier(viewSchema)}.` : undefined}${sql.identifier(origViewName)}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`);\n                } else {\n                    joinsArray.push(sql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${table} on ${joinMeta.on}`);\n                }\n                if (index < joins.length - 1) {\n                    joinsArray.push(sql` `);\n                }\n            }\n        }\n        const joinsSql = sql.join(joinsArray);\n        const whereSql = where ? sql` where ${where}` : undefined;\n        const havingSql = having ? sql` having ${having}` : undefined;\n        let orderBySql;\n        if (orderBy && orderBy.length > 0) {\n            orderBySql = sql` order by ${sql.join(orderBy, sql`, `)}`;\n        }\n        let groupBySql;\n        if (groupBy && groupBy.length > 0) {\n            groupBySql = sql` group by ${sql.join(groupBy, sql`, `)}`;\n        }\n        const limitSql = limit ? sql` limit ${limit}` : undefined;\n        const offsetSql = offset ? sql` offset ${offset}` : undefined;\n        const lockingClausesSql = sql.empty();\n        if (lockingClauses) {\n            for (const { strength, config } of lockingClauses){\n                const clauseSql = sql` for ${sql.raw(strength)}`;\n                if (config.of) {\n                    clauseSql.append(sql` of ${config.of}`);\n                }\n                if (config.noWait) {\n                    clauseSql.append(sql` no wait`);\n                } else if (config.skipLocked) {\n                    clauseSql.append(sql` skip locked`);\n                }\n                lockingClausesSql.append(clauseSql);\n            }\n        }\n        return sql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}${lockingClausesSql}`;\n    }\n    buildInsertQuery({ table, values, onConflict, returning }) {\n        const valuesSqlList = [];\n        const columns = table[Table.Symbol.Columns];\n        const colEntries = Object.entries(columns);\n        const insertOrder = colEntries.map(([, column])=>sql.identifier(column.name));\n        for (const [valueIndex, value] of values.entries()){\n            const valueList = [];\n            for (const [fieldName, col] of colEntries){\n                const colValue = value[fieldName];\n                if (colValue === undefined || is(colValue, Param) && colValue.value === undefined) {\n                    // eslint-disable-next-line unicorn/no-negated-condition\n                    if (col.defaultFn !== undefined) {\n                        const defaultFnResult = col.defaultFn();\n                        const defaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n                        valueList.push(defaultValue);\n                    } else {\n                        valueList.push(sql`default`);\n                    }\n                } else {\n                    valueList.push(colValue);\n                }\n            }\n            valuesSqlList.push(valueList);\n            if (valueIndex < values.length - 1) {\n                valuesSqlList.push(sql`, `);\n            }\n        }\n        const valuesSql = sql.join(valuesSqlList);\n        const returningSql = returning ? sql` returning ${this.buildSelection(returning, {\n            isSingleTable: true\n        })}` : undefined;\n        const onConflictSql = onConflict ? sql` on conflict ${onConflict}` : undefined;\n        return sql`insert into ${table} ${insertOrder} values ${valuesSql}${onConflictSql}${returningSql}`;\n    }\n    buildRefreshMaterializedViewQuery({ view, concurrently, withNoData }) {\n        const concurrentlySql = concurrently ? sql` concurrently` : undefined;\n        const withNoDataSql = withNoData ? sql` with no data` : undefined;\n        return sql`refresh materialized view${concurrentlySql} ${view}${withNoDataSql}`;\n    }\n    prepareTyping(encoder) {\n        if (is(encoder, PgJsonb) || is(encoder, PgJson)) {\n            return \"json\";\n        } else if (is(encoder, PgNumeric)) {\n            return \"decimal\";\n        } else if (is(encoder, PgTime)) {\n            return \"time\";\n        } else if (is(encoder, PgTimestamp)) {\n            return \"timestamp\";\n        } else if (is(encoder, PgDate)) {\n            return \"date\";\n        } else if (is(encoder, PgUUID)) {\n            return \"uuid\";\n        } else {\n            return \"none\";\n        }\n    }\n    sqlToQuery(sql) {\n        return sql.toQuery({\n            escapeName: this.escapeName,\n            escapeParam: this.escapeParam,\n            escapeString: this.escapeString,\n            prepareTyping: this.prepareTyping\n        });\n    }\n    // buildRelationalQueryWithPK({\n    // \tfullSchema,\n    // \tschema,\n    // \ttableNamesMap,\n    // \ttable,\n    // \ttableConfig,\n    // \tqueryConfig: config,\n    // \ttableAlias,\n    // \tisRoot = false,\n    // \tjoinOn,\n    // }: {\n    // \tfullSchema: Record<string, unknown>;\n    // \tschema: TablesRelationalConfig;\n    // \ttableNamesMap: Record<string, string>;\n    // \ttable: PgTable;\n    // \ttableConfig: TableRelationalConfig;\n    // \tqueryConfig: true | DBQueryConfig<'many', true>;\n    // \ttableAlias: string;\n    // \tisRoot?: boolean;\n    // \tjoinOn?: SQL;\n    // }): BuildRelationalQueryResult<PgTable, PgColumn> {\n    // \t// For { \"<relation>\": true }, return a table with selection of all columns\n    // \tif (config === true) {\n    // \t\tconst selectionEntries = Object.entries(tableConfig.columns);\n    // \t\tconst selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = selectionEntries.map((\n    // \t\t\t[key, value],\n    // \t\t) => ({\n    // \t\t\tdbKey: value.name,\n    // \t\t\ttsKey: key,\n    // \t\t\tfield: value as PgColumn,\n    // \t\t\trelationTableTsKey: undefined,\n    // \t\t\tisJson: false,\n    // \t\t\tselection: [],\n    // \t\t}));\n    // \t\treturn {\n    // \t\t\ttableTsKey: tableConfig.tsName,\n    // \t\t\tsql: table,\n    // \t\t\tselection,\n    // \t\t};\n    // \t}\n    // \t// let selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n    // \t// let selectionForBuild = selection;\n    // \tconst aliasedColumns = Object.fromEntries(\n    // \t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n    // \t);\n    // \tconst aliasedRelations = Object.fromEntries(\n    // \t\tObject.entries(tableConfig.relations).map(([key, value]) => [key, aliasedRelation(value, tableAlias)]),\n    // \t);\n    // \tconst aliasedFields = Object.assign({}, aliasedColumns, aliasedRelations);\n    // \tlet where, hasUserDefinedWhere;\n    // \tif (config.where) {\n    // \t\tconst whereSql = typeof config.where === 'function' ? config.where(aliasedFields, operators) : config.where;\n    // \t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n    // \t\thasUserDefinedWhere = !!where;\n    // \t}\n    // \twhere = and(joinOn, where);\n    // \t// const fieldsSelection: { tsKey: string; value: PgColumn | SQL.Aliased; isExtra?: boolean }[] = [];\n    // \tlet joins: Join[] = [];\n    // \tlet selectedColumns: string[] = [];\n    // \t// Figure out which columns to select\n    // \tif (config.columns) {\n    // \t\tlet isIncludeMode = false;\n    // \t\tfor (const [field, value] of Object.entries(config.columns)) {\n    // \t\t\tif (value === undefined) {\n    // \t\t\t\tcontinue;\n    // \t\t\t}\n    // \t\t\tif (field in tableConfig.columns) {\n    // \t\t\t\tif (!isIncludeMode && value === true) {\n    // \t\t\t\t\tisIncludeMode = true;\n    // \t\t\t\t}\n    // \t\t\t\tselectedColumns.push(field);\n    // \t\t\t}\n    // \t\t}\n    // \t\tif (selectedColumns.length > 0) {\n    // \t\t\tselectedColumns = isIncludeMode\n    // \t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n    // \t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n    // \t\t}\n    // \t} else {\n    // \t\t// Select all columns if selection is not specified\n    // \t\tselectedColumns = Object.keys(tableConfig.columns);\n    // \t}\n    // \t// for (const field of selectedColumns) {\n    // \t// \tconst column = tableConfig.columns[field]! as PgColumn;\n    // \t// \tfieldsSelection.push({ tsKey: field, value: column });\n    // \t// }\n    // \tlet initiallySelectedRelations: {\n    // \t\ttsKey: string;\n    // \t\tqueryConfig: true | DBQueryConfig<'many', false>;\n    // \t\trelation: Relation;\n    // \t}[] = [];\n    // \t// let selectedRelations: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n    // \t// Figure out which relations to select\n    // \tif (config.with) {\n    // \t\tinitiallySelectedRelations = Object.entries(config.with)\n    // \t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n    // \t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n    // \t}\n    // \tconst manyRelations = initiallySelectedRelations.filter((r) =>\n    // \t\tis(r.relation, Many)\n    // \t\t&& (schema[tableNamesMap[r.relation.referencedTable[Table.Symbol.Name]]!]?.primaryKey.length ?? 0) > 0\n    // \t);\n    // \t// If this is the last Many relation (or there are no Many relations), we are on the innermost subquery level\n    // \tconst isInnermostQuery = manyRelations.length < 2;\n    // \tconst selectedExtras: {\n    // \t\ttsKey: string;\n    // \t\tvalue: SQL.Aliased;\n    // \t}[] = [];\n    // \t// Figure out which extras to select\n    // \tif (isInnermostQuery && config.extras) {\n    // \t\tconst extras = typeof config.extras === 'function'\n    // \t\t\t? config.extras(aliasedFields, { sql })\n    // \t\t\t: config.extras;\n    // \t\tfor (const [tsKey, value] of Object.entries(extras)) {\n    // \t\t\tselectedExtras.push({\n    // \t\t\t\ttsKey,\n    // \t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n    // \t\t\t});\n    // \t\t}\n    // \t}\n    // \t// Transform `fieldsSelection` into `selection`\n    // \t// `fieldsSelection` shouldn't be used after this point\n    // \t// for (const { tsKey, value, isExtra } of fieldsSelection) {\n    // \t// \tselection.push({\n    // \t// \t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n    // \t// \t\ttsKey,\n    // \t// \t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n    // \t// \t\trelationTableTsKey: undefined,\n    // \t// \t\tisJson: false,\n    // \t// \t\tisExtra,\n    // \t// \t\tselection: [],\n    // \t// \t});\n    // \t// }\n    // \tlet orderByOrig = typeof config.orderBy === 'function'\n    // \t\t? config.orderBy(aliasedFields, orderByOperators)\n    // \t\t: config.orderBy ?? [];\n    // \tif (!Array.isArray(orderByOrig)) {\n    // \t\torderByOrig = [orderByOrig];\n    // \t}\n    // \tconst orderBy = orderByOrig.map((orderByValue) => {\n    // \t\tif (is(orderByValue, Column)) {\n    // \t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as PgColumn;\n    // \t\t}\n    // \t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n    // \t});\n    // \tconst limit = isInnermostQuery ? config.limit : undefined;\n    // \tconst offset = isInnermostQuery ? config.offset : undefined;\n    // \t// For non-root queries without additional config except columns, return a table with selection\n    // \tif (\n    // \t\t!isRoot\n    // \t\t&& initiallySelectedRelations.length === 0\n    // \t\t&& selectedExtras.length === 0\n    // \t\t&& !where\n    // \t\t&& orderBy.length === 0\n    // \t\t&& limit === undefined\n    // \t\t&& offset === undefined\n    // \t) {\n    // \t\treturn {\n    // \t\t\ttableTsKey: tableConfig.tsName,\n    // \t\t\tsql: table,\n    // \t\t\tselection: selectedColumns.map((key) => ({\n    // \t\t\t\tdbKey: tableConfig.columns[key]!.name,\n    // \t\t\t\ttsKey: key,\n    // \t\t\t\tfield: tableConfig.columns[key] as PgColumn,\n    // \t\t\t\trelationTableTsKey: undefined,\n    // \t\t\t\tisJson: false,\n    // \t\t\t\tselection: [],\n    // \t\t\t})),\n    // \t\t};\n    // \t}\n    // \tconst selectedRelationsWithoutPK:\n    // \t// Process all relations without primary keys, because they need to be joined differently and will all be on the same query level\n    // \tfor (\n    // \t\tconst {\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tqueryConfig: selectedRelationConfigValue,\n    // \t\t\trelation,\n    // \t\t} of initiallySelectedRelations\n    // \t) {\n    // \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n    // \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n    // \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n    // \t\tconst relationTable = schema[relationTableTsName]!;\n    // \t\tif (relationTable.primaryKey.length > 0) {\n    // \t\t\tcontinue;\n    // \t\t}\n    // \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n    // \t\tconst joinOn = and(\n    // \t\t\t...normalizedRelation.fields.map((field, i) =>\n    // \t\t\t\teq(\n    // \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n    // \t\t\t\t\taliasedTableColumn(field, tableAlias),\n    // \t\t\t\t)\n    // \t\t\t),\n    // \t\t);\n    // \t\tconst builtRelation = this.buildRelationalQueryWithoutPK({\n    // \t\t\tfullSchema,\n    // \t\t\tschema,\n    // \t\t\ttableNamesMap,\n    // \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n    // \t\t\ttableConfig: schema[relationTableTsName]!,\n    // \t\t\tqueryConfig: selectedRelationConfigValue,\n    // \t\t\ttableAlias: relationTableAlias,\n    // \t\t\tjoinOn,\n    // \t\t\tnestedQueryRelation: relation,\n    // \t\t});\n    // \t\tconst field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier('data')}`.as(selectedRelationTsKey);\n    // \t\tjoins.push({\n    // \t\t\ton: sql`true`,\n    // \t\t\ttable: new Subquery(builtRelation.sql as SQL, {}, relationTableAlias),\n    // \t\t\talias: relationTableAlias,\n    // \t\t\tjoinType: 'left',\n    // \t\t\tlateral: true,\n    // \t\t});\n    // \t\tselectedRelations.push({\n    // \t\t\tdbKey: selectedRelationTsKey,\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tfield,\n    // \t\t\trelationTableTsKey: relationTableTsName,\n    // \t\t\tisJson: true,\n    // \t\t\tselection: builtRelation.selection,\n    // \t\t});\n    // \t}\n    // \tconst oneRelations = initiallySelectedRelations.filter((r): r is typeof r & { relation: One } =>\n    // \t\tis(r.relation, One)\n    // \t);\n    // \t// Process all One relations with PKs, because they can all be joined on the same level\n    // \tfor (\n    // \t\tconst {\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tqueryConfig: selectedRelationConfigValue,\n    // \t\t\trelation,\n    // \t\t} of oneRelations\n    // \t) {\n    // \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n    // \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n    // \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n    // \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n    // \t\tconst relationTable = schema[relationTableTsName]!;\n    // \t\tif (relationTable.primaryKey.length === 0) {\n    // \t\t\tcontinue;\n    // \t\t}\n    // \t\tconst joinOn = and(\n    // \t\t\t...normalizedRelation.fields.map((field, i) =>\n    // \t\t\t\teq(\n    // \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n    // \t\t\t\t\taliasedTableColumn(field, tableAlias),\n    // \t\t\t\t)\n    // \t\t\t),\n    // \t\t);\n    // \t\tconst builtRelation = this.buildRelationalQueryWithPK({\n    // \t\t\tfullSchema,\n    // \t\t\tschema,\n    // \t\t\ttableNamesMap,\n    // \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n    // \t\t\ttableConfig: schema[relationTableTsName]!,\n    // \t\t\tqueryConfig: selectedRelationConfigValue,\n    // \t\t\ttableAlias: relationTableAlias,\n    // \t\t\tjoinOn,\n    // \t\t});\n    // \t\tconst field = sql`case when ${sql.identifier(relationTableAlias)} is null then null else json_build_array(${\n    // \t\t\tsql.join(\n    // \t\t\t\tbuiltRelation.selection.map(({ field }) =>\n    // \t\t\t\t\tis(field, SQL.Aliased)\n    // \t\t\t\t\t\t? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`\n    // \t\t\t\t\t\t: is(field, Column)\n    // \t\t\t\t\t\t? aliasedTableColumn(field, relationTableAlias)\n    // \t\t\t\t\t\t: field\n    // \t\t\t\t),\n    // \t\t\t\tsql`, `,\n    // \t\t\t)\n    // \t\t}) end`.as(selectedRelationTsKey);\n    // \t\tconst isLateralJoin = is(builtRelation.sql, SQL);\n    // \t\tjoins.push({\n    // \t\t\ton: isLateralJoin ? sql`true` : joinOn,\n    // \t\t\ttable: is(builtRelation.sql, SQL)\n    // \t\t\t\t? new Subquery(builtRelation.sql, {}, relationTableAlias)\n    // \t\t\t\t: aliasedTable(builtRelation.sql, relationTableAlias),\n    // \t\t\talias: relationTableAlias,\n    // \t\t\tjoinType: 'left',\n    // \t\t\tlateral: is(builtRelation.sql, SQL),\n    // \t\t});\n    // \t\tselectedRelations.push({\n    // \t\t\tdbKey: selectedRelationTsKey,\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tfield,\n    // \t\t\trelationTableTsKey: relationTableTsName,\n    // \t\t\tisJson: true,\n    // \t\t\tselection: builtRelation.selection,\n    // \t\t});\n    // \t}\n    // \tlet distinct: PgSelectConfig['distinct'];\n    // \tlet tableFrom: PgTable | Subquery = table;\n    // \t// Process first Many relation - each one requires a nested subquery\n    // \tconst manyRelation = manyRelations[0];\n    // \tif (manyRelation) {\n    // \t\tconst {\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tqueryConfig: selectedRelationQueryConfig,\n    // \t\t\trelation,\n    // \t\t} = manyRelation;\n    // \t\tdistinct = {\n    // \t\t\ton: tableConfig.primaryKey.map((c) => aliasedTableColumn(c as PgColumn, tableAlias)),\n    // \t\t};\n    // \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n    // \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n    // \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n    // \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n    // \t\tconst joinOn = and(\n    // \t\t\t...normalizedRelation.fields.map((field, i) =>\n    // \t\t\t\teq(\n    // \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n    // \t\t\t\t\taliasedTableColumn(field, tableAlias),\n    // \t\t\t\t)\n    // \t\t\t),\n    // \t\t);\n    // \t\tconst builtRelationJoin = this.buildRelationalQueryWithPK({\n    // \t\t\tfullSchema,\n    // \t\t\tschema,\n    // \t\t\ttableNamesMap,\n    // \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n    // \t\t\ttableConfig: schema[relationTableTsName]!,\n    // \t\t\tqueryConfig: selectedRelationQueryConfig,\n    // \t\t\ttableAlias: relationTableAlias,\n    // \t\t\tjoinOn,\n    // \t\t});\n    // \t\tconst builtRelationSelectionField = sql`case when ${\n    // \t\t\tsql.identifier(relationTableAlias)\n    // \t\t} is null then '[]' else json_agg(json_build_array(${\n    // \t\t\tsql.join(\n    // \t\t\t\tbuiltRelationJoin.selection.map(({ field }) =>\n    // \t\t\t\t\tis(field, SQL.Aliased)\n    // \t\t\t\t\t\t? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`\n    // \t\t\t\t\t\t: is(field, Column)\n    // \t\t\t\t\t\t? aliasedTableColumn(field, relationTableAlias)\n    // \t\t\t\t\t\t: field\n    // \t\t\t\t),\n    // \t\t\t\tsql`, `,\n    // \t\t\t)\n    // \t\t})) over (partition by ${sql.join(distinct.on, sql`, `)}) end`.as(selectedRelationTsKey);\n    // \t\tconst isLateralJoin = is(builtRelationJoin.sql, SQL);\n    // \t\tjoins.push({\n    // \t\t\ton: isLateralJoin ? sql`true` : joinOn,\n    // \t\t\ttable: isLateralJoin\n    // \t\t\t\t? new Subquery(builtRelationJoin.sql as SQL, {}, relationTableAlias)\n    // \t\t\t\t: aliasedTable(builtRelationJoin.sql as PgTable, relationTableAlias),\n    // \t\t\talias: relationTableAlias,\n    // \t\t\tjoinType: 'left',\n    // \t\t\tlateral: isLateralJoin,\n    // \t\t});\n    // \t\t// Build the \"from\" subquery with the remaining Many relations\n    // \t\tconst builtTableFrom = this.buildRelationalQueryWithPK({\n    // \t\t\tfullSchema,\n    // \t\t\tschema,\n    // \t\t\ttableNamesMap,\n    // \t\t\ttable,\n    // \t\t\ttableConfig,\n    // \t\t\tqueryConfig: {\n    // \t\t\t\t...config,\n    // \t\t\t\twhere: undefined,\n    // \t\t\t\torderBy: undefined,\n    // \t\t\t\tlimit: undefined,\n    // \t\t\t\toffset: undefined,\n    // \t\t\t\twith: manyRelations.slice(1).reduce<NonNullable<typeof config['with']>>(\n    // \t\t\t\t\t(result, { tsKey, queryConfig: configValue }) => {\n    // \t\t\t\t\t\tresult[tsKey] = configValue;\n    // \t\t\t\t\t\treturn result;\n    // \t\t\t\t\t},\n    // \t\t\t\t\t{},\n    // \t\t\t\t),\n    // \t\t\t},\n    // \t\t\ttableAlias,\n    // \t\t});\n    // \t\tselectedRelations.push({\n    // \t\t\tdbKey: selectedRelationTsKey,\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tfield: builtRelationSelectionField,\n    // \t\t\trelationTableTsKey: relationTableTsName,\n    // \t\t\tisJson: true,\n    // \t\t\tselection: builtRelationJoin.selection,\n    // \t\t});\n    // \t\t// selection = builtTableFrom.selection.map((item) =>\n    // \t\t// \tis(item.field, SQL.Aliased)\n    // \t\t// \t\t? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }\n    // \t\t// \t\t: item\n    // \t\t// );\n    // \t\t// selectionForBuild = [{\n    // \t\t// \tdbKey: '*',\n    // \t\t// \ttsKey: '*',\n    // \t\t// \tfield: sql`${sql.identifier(tableAlias)}.*`,\n    // \t\t// \tselection: [],\n    // \t\t// \tisJson: false,\n    // \t\t// \trelationTableTsKey: undefined,\n    // \t\t// }];\n    // \t\t// const newSelectionItem: (typeof selection)[number] = {\n    // \t\t// \tdbKey: selectedRelationTsKey,\n    // \t\t// \ttsKey: selectedRelationTsKey,\n    // \t\t// \tfield,\n    // \t\t// \trelationTableTsKey: relationTableTsName,\n    // \t\t// \tisJson: true,\n    // \t\t// \tselection: builtRelationJoin.selection,\n    // \t\t// };\n    // \t\t// selection.push(newSelectionItem);\n    // \t\t// selectionForBuild.push(newSelectionItem);\n    // \t\ttableFrom = is(builtTableFrom.sql, PgTable)\n    // \t\t\t? builtTableFrom.sql\n    // \t\t\t: new Subquery(builtTableFrom.sql, {}, tableAlias);\n    // \t}\n    // \tif (selectedColumns.length === 0 && selectedRelations.length === 0 && selectedExtras.length === 0) {\n    // \t\tthrow new DrizzleError(`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")`);\n    // \t}\n    // \tlet selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'];\n    // \tfunction prepareSelectedColumns() {\n    // \t\treturn selectedColumns.map((key) => ({\n    // \t\t\tdbKey: tableConfig.columns[key]!.name,\n    // \t\t\ttsKey: key,\n    // \t\t\tfield: tableConfig.columns[key] as PgColumn,\n    // \t\t\trelationTableTsKey: undefined,\n    // \t\t\tisJson: false,\n    // \t\t\tselection: [],\n    // \t\t}));\n    // \t}\n    // \tfunction prepareSelectedExtras() {\n    // \t\treturn selectedExtras.map((item) => ({\n    // \t\t\tdbKey: item.value.fieldAlias,\n    // \t\t\ttsKey: item.tsKey,\n    // \t\t\tfield: item.value,\n    // \t\t\trelationTableTsKey: undefined,\n    // \t\t\tisJson: false,\n    // \t\t\tselection: [],\n    // \t\t}));\n    // \t}\n    // \tif (isRoot) {\n    // \t\tselection = [\n    // \t\t\t...prepareSelectedColumns(),\n    // \t\t\t...prepareSelectedExtras(),\n    // \t\t];\n    // \t}\n    // \tif (hasUserDefinedWhere || orderBy.length > 0) {\n    // \t\ttableFrom = new Subquery(\n    // \t\t\tthis.buildSelectQuery({\n    // \t\t\t\ttable: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,\n    // \t\t\t\tfields: {},\n    // \t\t\t\tfieldsFlat: selectionForBuild.map(({ field }) => ({\n    // \t\t\t\t\tpath: [],\n    // \t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n    // \t\t\t\t})),\n    // \t\t\t\tjoins,\n    // \t\t\t\tdistinct,\n    // \t\t\t}),\n    // \t\t\t{},\n    // \t\t\ttableAlias,\n    // \t\t);\n    // \t\tselectionForBuild = selection.map((item) =>\n    // \t\t\tis(item.field, SQL.Aliased)\n    // \t\t\t\t? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }\n    // \t\t\t\t: item\n    // \t\t);\n    // \t\tjoins = [];\n    // \t\tdistinct = undefined;\n    // \t}\n    // \tconst result = this.buildSelectQuery({\n    // \t\ttable: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,\n    // \t\tfields: {},\n    // \t\tfieldsFlat: selectionForBuild.map(({ field }) => ({\n    // \t\t\tpath: [],\n    // \t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n    // \t\t})),\n    // \t\twhere,\n    // \t\tlimit,\n    // \t\toffset,\n    // \t\tjoins,\n    // \t\torderBy,\n    // \t\tdistinct,\n    // \t});\n    // \treturn {\n    // \t\ttableTsKey: tableConfig.tsName,\n    // \t\tsql: result,\n    // \t\tselection,\n    // \t};\n    // }\n    buildRelationalQueryWithoutPK({ fullSchema, schema, tableNamesMap, table, tableConfig, queryConfig: config, tableAlias, nestedQueryRelation, joinOn }) {\n        let selection = [];\n        let limit, offset, orderBy = [], where;\n        const joins = [];\n        if (config === true) {\n            const selectionEntries = Object.entries(tableConfig.columns);\n            selection = selectionEntries.map(([key, value])=>({\n                    dbKey: value.name,\n                    tsKey: key,\n                    field: aliasedTableColumn(value, tableAlias),\n                    relationTableTsKey: undefined,\n                    isJson: false,\n                    selection: []\n                }));\n        } else {\n            const aliasedColumns = Object.fromEntries(Object.entries(tableConfig.columns).map(([key, value])=>[\n                    key,\n                    aliasedTableColumn(value, tableAlias)\n                ]));\n            if (config.where) {\n                const whereSql = typeof config.where === \"function\" ? config.where(aliasedColumns, getOperators()) : config.where;\n                where = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n            }\n            const fieldsSelection = [];\n            let selectedColumns = [];\n            // Figure out which columns to select\n            if (config.columns) {\n                let isIncludeMode = false;\n                for (const [field, value] of Object.entries(config.columns)){\n                    if (value === undefined) {\n                        continue;\n                    }\n                    if (field in tableConfig.columns) {\n                        if (!isIncludeMode && value === true) {\n                            isIncludeMode = true;\n                        }\n                        selectedColumns.push(field);\n                    }\n                }\n                if (selectedColumns.length > 0) {\n                    selectedColumns = isIncludeMode ? selectedColumns.filter((c)=>config.columns?.[c] === true) : Object.keys(tableConfig.columns).filter((key)=>!selectedColumns.includes(key));\n                }\n            } else {\n                // Select all columns if selection is not specified\n                selectedColumns = Object.keys(tableConfig.columns);\n            }\n            for (const field of selectedColumns){\n                const column = tableConfig.columns[field];\n                fieldsSelection.push({\n                    tsKey: field,\n                    value: column\n                });\n            }\n            let selectedRelations = [];\n            // Figure out which relations to select\n            if (config.with) {\n                selectedRelations = Object.entries(config.with).filter((entry)=>!!entry[1]).map(([tsKey, queryConfig])=>({\n                        tsKey,\n                        queryConfig,\n                        relation: tableConfig.relations[tsKey]\n                    }));\n            }\n            let extras;\n            // Figure out which extras to select\n            if (config.extras) {\n                extras = typeof config.extras === \"function\" ? config.extras(aliasedColumns, {\n                    sql\n                }) : config.extras;\n                for (const [tsKey, value] of Object.entries(extras)){\n                    fieldsSelection.push({\n                        tsKey,\n                        value: mapColumnsInAliasedSQLToAlias(value, tableAlias)\n                    });\n                }\n            }\n            // Transform `fieldsSelection` into `selection`\n            // `fieldsSelection` shouldn't be used after this point\n            for (const { tsKey, value } of fieldsSelection){\n                selection.push({\n                    dbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey].name,\n                    tsKey,\n                    field: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n                    relationTableTsKey: undefined,\n                    isJson: false,\n                    selection: []\n                });\n            }\n            let orderByOrig = typeof config.orderBy === \"function\" ? config.orderBy(aliasedColumns, getOrderByOperators()) : config.orderBy ?? [];\n            if (!Array.isArray(orderByOrig)) {\n                orderByOrig = [\n                    orderByOrig\n                ];\n            }\n            orderBy = orderByOrig.map((orderByValue)=>{\n                if (is(orderByValue, Column)) {\n                    return aliasedTableColumn(orderByValue, tableAlias);\n                }\n                return mapColumnsInSQLToAlias(orderByValue, tableAlias);\n            });\n            limit = config.limit;\n            offset = config.offset;\n            // Process all relations\n            for (const { tsKey: selectedRelationTsKey, queryConfig: selectedRelationConfigValue, relation } of selectedRelations){\n                const normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n                const relationTableName = relation.referencedTable[Table.Symbol.Name];\n                const relationTableTsName = tableNamesMap[relationTableName];\n                const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n                const joinOn = and(...normalizedRelation.fields.map((field, i)=>eq(aliasedTableColumn(normalizedRelation.references[i], relationTableAlias), aliasedTableColumn(field, tableAlias))));\n                const builtRelation = this.buildRelationalQueryWithoutPK({\n                    fullSchema,\n                    schema,\n                    tableNamesMap,\n                    table: fullSchema[relationTableTsName],\n                    tableConfig: schema[relationTableTsName],\n                    queryConfig: is(relation, One) ? selectedRelationConfigValue === true ? {\n                        limit: 1\n                    } : {\n                        ...selectedRelationConfigValue,\n                        limit: 1\n                    } : selectedRelationConfigValue,\n                    tableAlias: relationTableAlias,\n                    joinOn,\n                    nestedQueryRelation: relation\n                });\n                const field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier(\"data\")}`.as(selectedRelationTsKey);\n                joins.push({\n                    on: sql`true`,\n                    table: new Subquery(builtRelation.sql, {}, relationTableAlias),\n                    alias: relationTableAlias,\n                    joinType: \"left\",\n                    lateral: true\n                });\n                selection.push({\n                    dbKey: selectedRelationTsKey,\n                    tsKey: selectedRelationTsKey,\n                    field,\n                    relationTableTsKey: relationTableTsName,\n                    isJson: true,\n                    selection: builtRelation.selection\n                });\n            }\n        }\n        if (selection.length === 0) {\n            throw new DrizzleError(`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")`);\n        }\n        let result;\n        where = and(joinOn, where);\n        if (nestedQueryRelation) {\n            let field = sql`json_build_array(${sql.join(selection.map(({ field, tsKey, isJson })=>isJson ? sql`${sql.identifier(`${tableAlias}_${tsKey}`)}.${sql.identifier(\"data\")}` : is(field, SQL.Aliased) ? field.sql : field), sql`, `)})`;\n            if (is(nestedQueryRelation, Many)) {\n                field = sql`coalesce(json_agg(${field}${orderBy.length > 0 ? sql` order by ${sql.join(orderBy, sql`, `)}` : undefined}), '[]'::json)`;\n            // orderBy = [];\n            }\n            const nestedSelection = [\n                {\n                    dbKey: \"data\",\n                    tsKey: \"data\",\n                    field: field.as(\"data\"),\n                    isJson: true,\n                    relationTableTsKey: tableConfig.tsName,\n                    selection\n                }\n            ];\n            const needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n            if (needsSubquery) {\n                result = this.buildSelectQuery({\n                    table: aliasedTable(table, tableAlias),\n                    fields: {},\n                    fieldsFlat: [\n                        {\n                            path: [],\n                            field: sql.raw(\"*\")\n                        }\n                    ],\n                    where,\n                    limit,\n                    offset,\n                    orderBy\n                });\n                where = undefined;\n                limit = undefined;\n                offset = undefined;\n                orderBy = [];\n            } else {\n                result = aliasedTable(table, tableAlias);\n            }\n            result = this.buildSelectQuery({\n                table: is(result, PgTable) ? result : new Subquery(result, {}, tableAlias),\n                fields: {},\n                fieldsFlat: nestedSelection.map(({ field })=>({\n                        path: [],\n                        field: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field\n                    })),\n                joins,\n                where,\n                limit,\n                offset,\n                orderBy\n            });\n        } else {\n            result = this.buildSelectQuery({\n                table: aliasedTable(table, tableAlias),\n                fields: {},\n                fieldsFlat: selection.map(({ field })=>({\n                        path: [],\n                        field: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field\n                    })),\n                joins,\n                where,\n                limit,\n                offset,\n                orderBy\n            });\n        }\n        return {\n            tableTsKey: tableConfig.tsName,\n            sql: result,\n            selection\n        };\n    }\n}\nclass TypedQueryBuilder {\n    static{\n        this[entityKind] = \"TypedQueryBuilder\";\n    }\n    /** @internal */ getSelectedFields() {\n        return this._.selectedFields;\n    }\n}\nclass PgSelectBuilder {\n    static{\n        this[entityKind] = \"PgSelectBuilder\";\n    }\n    constructor(config){\n        this.withList = [];\n        this.fields = config.fields;\n        this.session = config.session;\n        this.dialect = config.dialect;\n        if (config.withList) {\n            this.withList = config.withList;\n        }\n        this.distinct = config.distinct;\n    }\n    /**\n     * Specify the table, subquery, or other target that you're\n     * building a select query against.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FROM|Postgres from documentation}\n     */ from(source) {\n        const isPartialSelect = !!this.fields;\n        let fields;\n        if (this.fields) {\n            fields = this.fields;\n        } else if (is(source, Subquery)) {\n            // This is required to use the proxy handler to get the correct field values from the subquery\n            fields = Object.fromEntries(Object.keys(source[SubqueryConfig].selection).map((key)=>[\n                    key,\n                    source[key]\n                ]));\n        } else if (is(source, PgViewBase)) {\n            fields = source[ViewBaseConfig].selectedFields;\n        } else if (is(source, SQL)) {\n            fields = {};\n        } else {\n            fields = getTableColumns(source);\n        }\n        return new PgSelect({\n            table: source,\n            fields,\n            isPartialSelect,\n            session: this.session,\n            dialect: this.dialect,\n            withList: this.withList,\n            distinct: this.distinct\n        });\n    }\n}\nclass PgSelectQueryBuilder extends TypedQueryBuilder {\n    static{\n        this[entityKind] = \"PgSelectQueryBuilder\";\n    }\n    constructor({ table, fields, isPartialSelect, session, dialect, withList, distinct }){\n        super();\n        /**\n     * For each row of the table, include\n     * values from a matching row of the joined\n     * table, if there is a matching row. If not,\n     * all of the columns of the joined table\n     * will be set to null.\n     */ this.leftJoin = this.createJoin(\"left\");\n        /**\n     * Includes all of the rows of the joined table.\n     * If there is no matching row in the main table,\n     * all the columns of the main table will be\n     * set to null.\n     */ this.rightJoin = this.createJoin(\"right\");\n        /**\n     * This is the default type of join.\n     *\n     * For each row of the table, the joined table\n     * needs to have a matching row, or it will\n     * be excluded from results.\n     */ this.innerJoin = this.createJoin(\"inner\");\n        /**\n     * Rows from both the main & joined are included,\n     * regardless of whether or not they have matching\n     * rows in the other table.\n     */ this.fullJoin = this.createJoin(\"full\");\n        this.config = {\n            withList,\n            table,\n            fields: {\n                ...fields\n            },\n            distinct\n        };\n        this.isPartialSelect = isPartialSelect;\n        this.session = session;\n        this.dialect = dialect;\n        this._ = {\n            selectedFields: fields\n        };\n        this.tableName = getTableLikeName(table);\n        this.joinsNotNullableMap = typeof this.tableName === \"string\" ? {\n            [this.tableName]: true\n        } : {};\n    }\n    createJoin(joinType) {\n        return (table, on)=>{\n            const baseTableName = this.tableName;\n            const tableName = getTableLikeName(table);\n            if (typeof tableName === \"string\" && this.config.joins?.some((join)=>join.alias === tableName)) {\n                throw new Error(`Alias \"${tableName}\" is already used in this query`);\n            }\n            if (!this.isPartialSelect) {\n                // If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n                if (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === \"string\") {\n                    this.config.fields = {\n                        [baseTableName]: this.config.fields\n                    };\n                }\n                if (typeof tableName === \"string\" && !is(table, SQL)) {\n                    const selection = is(table, Subquery) ? table[SubqueryConfig].selection : is(table, View) ? table[ViewBaseConfig].selectedFields : table[Table.Symbol.Columns];\n                    this.config.fields[tableName] = selection;\n                }\n            }\n            if (typeof on === \"function\") {\n                on = on(new Proxy(this.config.fields, new SelectionProxyHandler({\n                    sqlAliasedBehavior: \"sql\",\n                    sqlBehavior: \"sql\"\n                })));\n            }\n            if (!this.config.joins) {\n                this.config.joins = [];\n            }\n            this.config.joins.push({\n                on,\n                table,\n                joinType,\n                alias: tableName\n            });\n            if (typeof tableName === \"string\") {\n                switch(joinType){\n                    case \"left\":\n                        {\n                            this.joinsNotNullableMap[tableName] = false;\n                            break;\n                        }\n                    case \"right\":\n                        {\n                            this.joinsNotNullableMap = Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([key])=>[\n                                    key,\n                                    false\n                                ]));\n                            this.joinsNotNullableMap[tableName] = true;\n                            break;\n                        }\n                    case \"inner\":\n                        {\n                            this.joinsNotNullableMap[tableName] = true;\n                            break;\n                        }\n                    case \"full\":\n                        {\n                            this.joinsNotNullableMap = Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([key])=>[\n                                    key,\n                                    false\n                                ]));\n                            this.joinsNotNullableMap[tableName] = false;\n                            break;\n                        }\n                }\n            }\n            return this;\n        };\n    }\n    /**\n     * Specify a condition to narrow the result set. Multiple\n     * conditions can be combined with the `and` and `or`\n     * functions.\n     *\n     * ## Examples\n     *\n     * ```ts\n     * // Find cars made in the year 2000\n     * db.select().from(cars).where(eq(cars.year, 2000));\n     * ```\n     */ where(where) {\n        if (typeof where === \"function\") {\n            where = where(new Proxy(this.config.fields, new SelectionProxyHandler({\n                sqlAliasedBehavior: \"sql\",\n                sqlBehavior: \"sql\"\n            })));\n        }\n        this.config.where = where;\n        return this;\n    }\n    /**\n     * Sets the HAVING clause of this query, which often\n     * used with GROUP BY and filters rows after they've been\n     * grouped together and combined.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-HAVING|Postgres having clause documentation}\n     */ having(having) {\n        if (typeof having === \"function\") {\n            having = having(new Proxy(this.config.fields, new SelectionProxyHandler({\n                sqlAliasedBehavior: \"sql\",\n                sqlBehavior: \"sql\"\n            })));\n        }\n        this.config.having = having;\n        return this;\n    }\n    groupBy(...columns) {\n        if (typeof columns[0] === \"function\") {\n            const groupBy = columns[0](new Proxy(this.config.fields, new SelectionProxyHandler({\n                sqlAliasedBehavior: \"alias\",\n                sqlBehavior: \"sql\"\n            })));\n            this.config.groupBy = Array.isArray(groupBy) ? groupBy : [\n                groupBy\n            ];\n        } else {\n            this.config.groupBy = columns;\n        }\n        return this;\n    }\n    orderBy(...columns) {\n        if (typeof columns[0] === \"function\") {\n            const orderBy = columns[0](new Proxy(this.config.fields, new SelectionProxyHandler({\n                sqlAliasedBehavior: \"alias\",\n                sqlBehavior: \"sql\"\n            })));\n            this.config.orderBy = Array.isArray(orderBy) ? orderBy : [\n                orderBy\n            ];\n        } else {\n            this.config.orderBy = columns;\n        }\n        return this;\n    }\n    /**\n     * Set the maximum number of rows that will be\n     * returned by this query.\n     *\n     * ## Examples\n     *\n     * ```ts\n     * // Get the first 10 people from this query.\n     * db.select().from(people).limit(10);\n     * ```\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-LIMIT|Postgres LIMIT documentation}\n     */ limit(limit) {\n        this.config.limit = limit;\n        return this;\n    }\n    /**\n     * Skip a number of rows when returning results\n     * from this query.\n     *\n     * ## Examples\n     *\n     * ```ts\n     * // Get the 10th-20th people from this query.\n     * db.select().from(people).offset(10).limit(10);\n     * ```\n     */ offset(offset) {\n        this.config.offset = offset;\n        return this;\n    }\n    /**\n     * The FOR clause specifies a lock strength for this query\n     * that controls how strictly it acquires exclusive access to\n     * the rows being queried.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FOR-UPDATE-SHARE|Postgres locking clause documentation}\n     */ for(strength, config = {}) {\n        if (!this.config.lockingClauses) {\n            this.config.lockingClauses = [];\n        }\n        this.config.lockingClauses.push({\n            strength,\n            config\n        });\n        return this;\n    }\n    /** @internal */ getSQL() {\n        return this.dialect.buildSelectQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    as(alias) {\n        return new Proxy(new Subquery(this.getSQL(), this.config.fields, alias), new SelectionProxyHandler({\n            alias,\n            sqlAliasedBehavior: \"alias\",\n            sqlBehavior: \"error\"\n        }));\n    }\n}\nclass PgSelect extends PgSelectQueryBuilder {\n    static{\n        this[entityKind] = \"PgSelect\";\n    }\n    _prepare(name) {\n        const { session, config, dialect, joinsNotNullableMap } = this;\n        if (!session) {\n            throw new Error(\"Cannot execute a query on a query builder. Please use a database instance instead.\");\n        }\n        return tracer.startActiveSpan(\"drizzle.prepareQuery\", ()=>{\n            const fieldsList = orderSelectedFields(config.fields);\n            const query = session.prepareQuery(dialect.sqlToQuery(this.getSQL()), fieldsList, name);\n            query.joinsNotNullableMap = joinsNotNullableMap;\n            return query;\n        });\n    }\n    /**\n     * Create a prepared statement for this query. This allows\n     * the database to remember this query for the given session\n     * and call it by name, rather than specifying the full query.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-prepare.html|Postgres prepare documentation}\n     */ prepare(name) {\n        return this._prepare(name);\n    }\n    constructor(...args){\n        super(...args);\n        this.execute = (placeholderValues)=>{\n            return tracer.startActiveSpan(\"drizzle.operation\", ()=>{\n                return this._prepare().execute(placeholderValues);\n            });\n        };\n    }\n}\napplyMixins(PgSelect, [\n    QueryPromise\n]);\nclass QueryBuilder {\n    static{\n        this[entityKind] = \"PgQueryBuilder\";\n    }\n    $with(alias) {\n        const queryBuilder = this;\n        return {\n            as (qb) {\n                if (typeof qb === \"function\") {\n                    qb = qb(queryBuilder);\n                }\n                return new Proxy(new WithSubquery(qb.getSQL(), qb.getSelectedFields(), alias, true), new SelectionProxyHandler({\n                    alias,\n                    sqlAliasedBehavior: \"alias\",\n                    sqlBehavior: \"error\"\n                }));\n            }\n        };\n    }\n    with(...queries) {\n        const self = this;\n        function select(fields) {\n            return new PgSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                withList: queries\n            });\n        }\n        function selectDistinct(fields) {\n            return new PgSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                distinct: true\n            });\n        }\n        function selectDistinctOn(on, fields) {\n            return new PgSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                distinct: {\n                    on\n                }\n            });\n        }\n        return {\n            select,\n            selectDistinct,\n            selectDistinctOn\n        };\n    }\n    select(fields) {\n        return new PgSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect()\n        });\n    }\n    selectDistinct(fields) {\n        return new PgSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect(),\n            distinct: true\n        });\n    }\n    selectDistinctOn(on, fields) {\n        return new PgSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect(),\n            distinct: {\n                on\n            }\n        });\n    }\n    // Lazy load dialect to avoid circular dependency\n    getDialect() {\n        if (!this.dialect) {\n            this.dialect = new PgDialect();\n        }\n        return this.dialect;\n    }\n}\nclass DefaultViewBuilderCore {\n    static{\n        this[entityKind] = \"PgDefaultViewBuilderCore\";\n    }\n    constructor(name, schema){\n        this.config = {};\n        this.name = name;\n        this.schema = schema;\n    }\n    with(config) {\n        this.config.with = config;\n        return this;\n    }\n}\nclass ViewBuilder extends DefaultViewBuilderCore {\n    static{\n        this[entityKind] = \"PgViewBuilder\";\n    }\n    as(qb) {\n        if (typeof qb === \"function\") {\n            qb = qb(new QueryBuilder());\n        }\n        const selectionProxy = new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        });\n        const aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);\n        return new Proxy(new PgView({\n            pgConfig: this.config,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: aliasedSelection,\n                query: qb.getSQL().inlineParams()\n            }\n        }), selectionProxy);\n    }\n}\nclass ManualViewBuilder extends DefaultViewBuilderCore {\n    static{\n        this[entityKind] = \"PgManualViewBuilder\";\n    }\n    constructor(name, columns, schema){\n        super(name, schema);\n        this.columns = getTableColumns(pgTable(name, columns));\n    }\n    existing() {\n        return new Proxy(new PgView({\n            pgConfig: undefined,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: undefined\n            }\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n    as(query) {\n        return new Proxy(new PgView({\n            pgConfig: this.config,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: query.inlineParams()\n            }\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n}\nclass MaterializedViewBuilderCore {\n    static{\n        this[entityKind] = \"PgMaterializedViewBuilderCore\";\n    }\n    constructor(name, schema){\n        this.config = {};\n        this.name = name;\n        this.schema = schema;\n    }\n    using(using) {\n        this.config.using = using;\n        return this;\n    }\n    with(config) {\n        this.config.with = config;\n        return this;\n    }\n    tablespace(tablespace) {\n        this.config.tablespace = tablespace;\n        return this;\n    }\n    withNoData() {\n        this.config.withNoData = true;\n        return this;\n    }\n}\nclass MaterializedViewBuilder extends MaterializedViewBuilderCore {\n    static{\n        this[entityKind] = \"PgMaterializedViewBuilder\";\n    }\n    as(qb) {\n        if (typeof qb === \"function\") {\n            qb = qb(new QueryBuilder());\n        }\n        const selectionProxy = new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        });\n        const aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);\n        return new Proxy(new PgMaterializedView({\n            pgConfig: {\n                with: this.config.with,\n                using: this.config.using,\n                tablespace: this.config.tablespace,\n                withNoData: this.config.withNoData\n            },\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: aliasedSelection,\n                query: qb.getSQL().inlineParams()\n            }\n        }), selectionProxy);\n    }\n}\nclass ManualMaterializedViewBuilder extends MaterializedViewBuilderCore {\n    static{\n        this[entityKind] = \"PgManualMaterializedViewBuilder\";\n    }\n    constructor(name, columns, schema){\n        super(name, schema);\n        this.columns = getTableColumns(pgTable(name, columns));\n    }\n    existing() {\n        return new Proxy(new PgMaterializedView({\n            pgConfig: undefined,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: undefined\n            }\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n    as(query) {\n        return new Proxy(new PgMaterializedView({\n            pgConfig: undefined,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: query.inlineParams()\n            }\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n}\nclass PgViewBase extends View {\n    static{\n        this[entityKind] = \"PgViewBase\";\n    }\n}\nconst PgViewConfig = Symbol.for(\"drizzle:PgViewConfig\");\nclass PgView extends PgViewBase {\n    static{\n        this[entityKind] = \"PgView\";\n    }\n    constructor({ pgConfig, config }){\n        super(config);\n        if (pgConfig) {\n            this[PgViewConfig] = {\n                with: pgConfig.with\n            };\n        }\n    }\n}\nconst PgMaterializedViewConfig = Symbol.for(\"drizzle:PgMaterializedViewConfig\");\nclass PgMaterializedView extends PgViewBase {\n    static{\n        this[entityKind] = \"PgMaterializedView\";\n    }\n    constructor({ pgConfig, config }){\n        super(config);\n        this[PgMaterializedViewConfig] = {\n            with: pgConfig?.with,\n            using: pgConfig?.using,\n            tablespace: pgConfig?.tablespace,\n            withNoData: pgConfig?.withNoData\n        };\n    }\n}\n/** @internal */ function pgViewWithSchema(name, selection, schema) {\n    if (selection) {\n        return new ManualViewBuilder(name, selection, schema);\n    }\n    return new ViewBuilder(name, schema);\n}\n/** @internal */ function pgMaterializedViewWithSchema(name, selection, schema) {\n    if (selection) {\n        return new ManualMaterializedViewBuilder(name, selection, schema);\n    }\n    return new MaterializedViewBuilder(name, schema);\n}\nfunction pgView(name, columns) {\n    return pgViewWithSchema(name, columns, undefined);\n}\nfunction pgMaterializedView(name, columns) {\n    return pgMaterializedViewWithSchema(name, columns, undefined);\n}\nclass Relation {\n    static{\n        this[entityKind] = \"Relation\";\n    }\n    constructor(sourceTable, referencedTable, relationName){\n        this.sourceTable = sourceTable;\n        this.referencedTable = referencedTable;\n        this.relationName = relationName;\n        this.referencedTableName = referencedTable[Table.Symbol.Name];\n    }\n}\nclass Relations {\n    static{\n        this[entityKind] = \"Relations\";\n    }\n    constructor(table, config){\n        this.table = table;\n        this.config = config;\n    }\n}\nclass One extends Relation {\n    static{\n        this[entityKind] = \"One\";\n    }\n    constructor(sourceTable, referencedTable, config, isNullable){\n        super(sourceTable, referencedTable, config?.relationName);\n        this.config = config;\n        this.isNullable = isNullable;\n    }\n    withFieldName(fieldName) {\n        const relation = new One(this.sourceTable, this.referencedTable, this.config, this.isNullable);\n        relation.fieldName = fieldName;\n        return relation;\n    }\n}\nclass Many extends Relation {\n    static{\n        this[entityKind] = \"Many\";\n    }\n    constructor(sourceTable, referencedTable, config){\n        super(sourceTable, referencedTable, config?.relationName);\n        this.config = config;\n    }\n    withFieldName(fieldName) {\n        const relation = new Many(this.sourceTable, this.referencedTable, this.config);\n        relation.fieldName = fieldName;\n        return relation;\n    }\n}\nfunction getOperators() {\n    return {\n        and,\n        between,\n        eq,\n        exists,\n        gt,\n        gte,\n        ilike,\n        inArray,\n        isNull,\n        isNotNull,\n        like,\n        lt,\n        lte,\n        ne,\n        not,\n        notBetween,\n        notExists,\n        notLike,\n        notIlike,\n        notInArray,\n        or,\n        sql\n    };\n}\nfunction getOrderByOperators() {\n    return {\n        sql,\n        asc,\n        desc\n    };\n}\nfunction extractTablesRelationalConfig(schema, configHelpers) {\n    if (Object.keys(schema).length === 1 && \"default\" in schema && !is(schema[\"default\"], Table)) {\n        schema = schema[\"default\"];\n    }\n    // table DB name -> schema table key\n    const tableNamesMap = {};\n    // Table relations found before their tables - need to buffer them until we know the schema table key\n    const relationsBuffer = {};\n    const tablesConfig = {};\n    for (const [key, value] of Object.entries(schema)){\n        if (isTable(value)) {\n            const dbName = value[Table.Symbol.Name];\n            const bufferedRelations = relationsBuffer[dbName];\n            tableNamesMap[dbName] = key;\n            tablesConfig[key] = {\n                tsName: key,\n                dbName: value[Table.Symbol.Name],\n                columns: value[Table.Symbol.Columns],\n                relations: bufferedRelations?.relations ?? {},\n                primaryKey: bufferedRelations?.primaryKey ?? []\n            };\n            // Fill in primary keys\n            for (const column of Object.values(value[Table.Symbol.Columns])){\n                if (column.primary) {\n                    tablesConfig[key].primaryKey.push(column);\n                }\n            }\n            const extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.(value);\n            if (extraConfig) {\n                for (const configEntry of Object.values(extraConfig)){\n                    if (is(configEntry, PrimaryKeyBuilder)) {\n                        tablesConfig[key].primaryKey.push(...configEntry.columns);\n                    }\n                }\n            }\n        } else if (is(value, Relations)) {\n            const dbName = value.table[Table.Symbol.Name];\n            const tableName = tableNamesMap[dbName];\n            const relations = value.config(configHelpers(value.table));\n            let primaryKey;\n            for (const [relationName, relation] of Object.entries(relations)){\n                if (tableName) {\n                    const tableConfig = tablesConfig[tableName];\n                    tableConfig.relations[relationName] = relation;\n                } else {\n                    if (!(dbName in relationsBuffer)) {\n                        relationsBuffer[dbName] = {\n                            relations: {},\n                            primaryKey\n                        };\n                    }\n                    relationsBuffer[dbName].relations[relationName] = relation;\n                }\n            }\n        }\n    }\n    return {\n        tables: tablesConfig,\n        tableNamesMap\n    };\n}\nfunction relations(table, relations) {\n    return new Relations(table, (helpers)=>Object.fromEntries(Object.entries(relations(helpers)).map(([key, value])=>[\n                key,\n                value.withFieldName(key)\n            ])));\n}\nfunction createOne(sourceTable) {\n    return function one(table, config) {\n        return new One(sourceTable, table, config, config?.fields.reduce((res, f)=>res && f.notNull, true) ?? false);\n    };\n}\nfunction createMany(sourceTable) {\n    return function many(referencedTable, config) {\n        return new Many(sourceTable, referencedTable, config);\n    };\n}\nfunction normalizeRelation(schema, tableNamesMap, relation) {\n    if (is(relation, One) && relation.config) {\n        return {\n            fields: relation.config.fields,\n            references: relation.config.references\n        };\n    }\n    const referencedTableTsName = tableNamesMap[relation.referencedTable[Table.Symbol.Name]];\n    if (!referencedTableTsName) {\n        throw new Error(`Table \"${relation.referencedTable[Table.Symbol.Name]}\" not found in schema`);\n    }\n    const referencedTableConfig = schema[referencedTableTsName];\n    if (!referencedTableConfig) {\n        throw new Error(`Table \"${referencedTableTsName}\" not found in schema`);\n    }\n    const sourceTable = relation.sourceTable;\n    const sourceTableTsName = tableNamesMap[sourceTable[Table.Symbol.Name]];\n    if (!sourceTableTsName) {\n        throw new Error(`Table \"${sourceTable[Table.Symbol.Name]}\" not found in schema`);\n    }\n    const reverseRelations = [];\n    for (const referencedTableRelation of Object.values(referencedTableConfig.relations)){\n        if (relation.relationName && relation !== referencedTableRelation && referencedTableRelation.relationName === relation.relationName || !relation.relationName && referencedTableRelation.referencedTable === relation.sourceTable) {\n            reverseRelations.push(referencedTableRelation);\n        }\n    }\n    if (reverseRelations.length > 1) {\n        throw relation.relationName ? new Error(`There are multiple relations with name \"${relation.relationName}\" in table \"${referencedTableTsName}\"`) : new Error(`There are multiple relations between \"${referencedTableTsName}\" and \"${relation.sourceTable[Table.Symbol.Name]}\". Please specify relation name`);\n    }\n    if (reverseRelations[0] && is(reverseRelations[0], One) && reverseRelations[0].config) {\n        return {\n            fields: reverseRelations[0].config.references,\n            references: reverseRelations[0].config.fields\n        };\n    }\n    throw new Error(`There is not enough information to infer relation \"${sourceTableTsName}.${relation.fieldName}\"`);\n}\nfunction createTableRelationsHelpers(sourceTable) {\n    return {\n        one: createOne(sourceTable),\n        many: createMany(sourceTable)\n    };\n}\nfunction mapRelationalRow(tablesConfig, tableConfig, row, buildQueryResultSelection, mapColumnValue = (value)=>value) {\n    const result = {};\n    for (const [selectionItemIndex, selectionItem] of buildQueryResultSelection.entries()){\n        if (selectionItem.isJson) {\n            const relation = tableConfig.relations[selectionItem.tsKey];\n            const rawSubRows = row[selectionItemIndex];\n            const subRows = typeof rawSubRows === \"string\" ? JSON.parse(rawSubRows) : rawSubRows;\n            result[selectionItem.tsKey] = is(relation, One) ? subRows && mapRelationalRow(tablesConfig, tablesConfig[selectionItem.relationTableTsKey], subRows, selectionItem.selection, mapColumnValue) : subRows.map((subRow)=>mapRelationalRow(tablesConfig, tablesConfig[selectionItem.relationTableTsKey], subRow, selectionItem.selection, mapColumnValue));\n        } else {\n            const value = mapColumnValue(row[selectionItemIndex]);\n            const field = selectionItem.field;\n            let decoder;\n            if (is(field, Column)) {\n                decoder = field;\n            } else if (is(field, SQL)) {\n                decoder = field.decoder;\n            } else {\n                decoder = field.sql.decoder;\n            }\n            result[selectionItem.tsKey] = value === null ? null : decoder.mapFromDriverValue(value);\n        }\n    }\n    return result;\n}\nfunction bindIfParam(value, column) {\n    if (isDriverValueEncoder(column) && !isSQLWrapper(value) && !is(value, Param) && !is(value, Placeholder) && !is(value, Column) && !is(value, Table) && !is(value, View)) {\n        return new Param(value, column);\n    }\n    return value;\n}\n/**\n * Test that two values are equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is null, you may want to use\n * `isNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford\n * db.select().from(cars)\n *   .where(eq(cars.make, 'Ford'))\n * ```\n *\n * @see isNull for a way to test equality to NULL.\n */ const eq = (left, right)=>{\n    return sql`${left} = ${bindIfParam(right, left)}`;\n};\n/**\n * Test that two values are not equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is not null, you may want to use\n * `isNotNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars not made by Ford\n * db.select().from(cars)\n *   .where(ne(cars.make, 'Ford'))\n * ```\n *\n * @see isNotNull for a way to test whether a value is not null.\n */ const ne = (left, right)=>{\n    return sql`${left} <> ${bindIfParam(right, left)}`;\n};\nfunction and(...unfilteredConditions) {\n    const conditions = unfilteredConditions.filter((c)=>c !== undefined);\n    if (conditions.length === 0) {\n        return undefined;\n    }\n    if (conditions.length === 1) {\n        return new SQL(conditions);\n    }\n    return new SQL([\n        new StringChunk(\"(\"),\n        sql.join(conditions, new StringChunk(\" and \")),\n        new StringChunk(\")\")\n    ]);\n}\nfunction or(...unfilteredConditions) {\n    const conditions = unfilteredConditions.filter((c)=>c !== undefined);\n    if (conditions.length === 0) {\n        return undefined;\n    }\n    if (conditions.length === 1) {\n        return new SQL(conditions);\n    }\n    return new SQL([\n        new StringChunk(\"(\"),\n        sql.join(conditions, new StringChunk(\" or \")),\n        new StringChunk(\")\")\n    ]);\n}\n/**\n * Negate the meaning of an expression using the `not` keyword.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars _not_ made by GM or Ford.\n * db.select().from(cars)\n *   .where(not(inArray(cars.make, ['GM', 'Ford'])))\n * ```\n */ function not(condition) {\n    return sql`not ${condition}`;\n}\n/**\n * Test that the first expression passed is greater than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made after 2000.\n * db.select().from(cars)\n *   .where(gt(cars.year, 2000))\n * ```\n *\n * @see gte for greater-than-or-equal\n */ const gt = (left, right)=>{\n    return sql`${left} > ${bindIfParam(right, left)}`;\n};\n/**\n * Test that the first expression passed is greater than\n * or equal to the second expression. Use `gt` to\n * test whether an expression is strictly greater\n * than another.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made on or after 2000.\n * db.select().from(cars)\n *   .where(gte(cars.year, 2000))\n * ```\n *\n * @see gt for a strictly greater-than condition\n */ const gte = (left, right)=>{\n    return sql`${left} >= ${bindIfParam(right, left)}`;\n};\n/**\n * Test that the first expression passed is less than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lt(cars.year, 2000))\n * ```\n *\n * @see lte for greater-than-or-equal\n */ const lt = (left, right)=>{\n    return sql`${left} < ${bindIfParam(right, left)}`;\n};\n/**\n * Test that the first expression passed is less than\n * or equal to the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lte(cars.year, 2000))\n * ```\n *\n * @see lt for a strictly less-than condition\n */ const lte = (left, right)=>{\n    return sql`${left} <= ${bindIfParam(right, left)}`;\n};\nfunction inArray(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error(\"inArray requires at least one value\");\n        }\n        return sql`${column} in ${values.map((v)=>bindIfParam(v, column))}`;\n    }\n    return sql`${column} in ${bindIfParam(values, column)}`;\n}\nfunction notInArray(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error(\"notInArray requires at least one value\");\n        }\n        return sql`${column} not in ${values.map((v)=>bindIfParam(v, column))}`;\n    }\n    return sql`${column} not in ${bindIfParam(values, column)}`;\n}\n/**\n * Test whether an expression is NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have no discontinuedAt date.\n * db.select().from(cars)\n *   .where(isNull(cars.discontinuedAt))\n * ```\n *\n * @see isNotNull for the inverse of this test\n */ function isNull(value) {\n    return sql`${value} is null`;\n}\n/**\n * Test whether an expression is not NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have been discontinued.\n * db.select().from(cars)\n *   .where(isNotNull(cars.discontinuedAt))\n * ```\n *\n * @see isNull for the inverse of this test\n */ function isNotNull(value) {\n    return sql`${value} is not null`;\n}\n/**\n * Test whether a subquery evaluates to have any rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column has a match in a cities\n * // table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     exists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see notExists for the inverse of this test\n */ function exists(subquery) {\n    return sql`exists (${subquery})`;\n}\n/**\n * Test whether a subquery doesn't include any result\n * rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column doesn't match\n * // a row in the cities table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     notExists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see exists for the inverse of this test\n */ function notExists(subquery) {\n    return sql`not exists (${subquery})`;\n}\nfunction between(column, min, max) {\n    return sql`${column} between ${bindIfParam(min, column)} and ${bindIfParam(max, column)}`;\n}\nfunction notBetween(column, min, max) {\n    return sql`${column} not between ${bindIfParam(min, column)} and ${bindIfParam(max, column)}`;\n}\n/**\n * Compare a column to a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(like(cars.name, '%Turbo%'))\n * ```\n *\n * @see ilike for a case-insensitive version of this condition\n */ function like(column, value) {\n    return sql`${column} like ${value}`;\n}\n/**\n * The inverse of like - this tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"ROver\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see like for the inverse condition\n * @see notIlike for a case-insensitive version of this condition\n */ function notLike(column, value) {\n    return sql`${column} not like ${value}`;\n}\n/**\n * Case-insensitively compare a column to a pattern,\n * which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * Unlike like, this performs a case-insensitive comparison.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(ilike(cars.name, '%Turbo%'))\n * ```\n *\n * @see like for a case-sensitive version of this condition\n */ function ilike(column, value) {\n    return sql`${column} ilike ${value}`;\n}\n/**\n * The inverse of ilike - this case-insensitively tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"Rover\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see ilike for the inverse condition\n * @see notLike for a case-sensitive version of this condition\n */ function notIlike(column, value) {\n    return sql`${column} not ilike ${value}`;\n}\nfunction arrayContains(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error(\"arrayContains requires at least one value\");\n        }\n        const array = sql`${bindIfParam(values, column)}`;\n        return sql`${column} @> ${array}`;\n    }\n    return sql`${column} @> ${bindIfParam(values, column)}`;\n}\nfunction arrayContained(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error(\"arrayContained requires at least one value\");\n        }\n        const array = sql`${bindIfParam(values, column)}`;\n        return sql`${column} <@ ${array}`;\n    }\n    return sql`${column} <@ ${bindIfParam(values, column)}`;\n}\nfunction arrayOverlaps(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error(\"arrayOverlaps requires at least one value\");\n        }\n        const array = sql`${bindIfParam(values, column)}`;\n        return sql`${column} && ${array}`;\n    }\n    return sql`${column} && ${bindIfParam(values, column)}`;\n}\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in ascending\n * order. By the SQL standard, ascending order is the\n * default, so it is not usually necessary to specify\n * ascending sort order.\n *\n * ## Examples\n *\n * ```ts\n * // Return cars, starting with the oldest models\n * // and going in ascending order to the newest.\n * db.select().from(cars)\n *   .orderBy(asc(cars.year));\n * ```\n *\n * @see desc to sort in descending order\n */ function asc(column) {\n    return sql`${column} asc`;\n}\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in descending\n * order.\n *\n * ## Examples\n *\n * ```ts\n * // Select users, with the most recently created\n * // records coming first.\n * db.select().from(users)\n *   .orderBy(desc(users.createdAt));\n * ```\n *\n * @see asc to sort in ascending order\n */ function desc(column) {\n    return sql`${column} desc`;\n}\n/**\n * This class is used to indicate a primitive param value that is used in `sql` tag.\n * It is only used on type level and is never instantiated at runtime.\n * If you see a value of this type in the code, its runtime value is actually the primitive param value.\n */ class FakePrimitiveParam {\n    static{\n        this[entityKind] = \"FakePrimitiveParam\";\n    }\n}\nfunction isSQLWrapper(value) {\n    return typeof value === \"object\" && value !== null && \"getSQL\" in value && typeof value.getSQL === \"function\";\n}\nfunction mergeQueries(queries) {\n    const result = {\n        sql: \"\",\n        params: []\n    };\n    for (const query of queries){\n        result.sql += query.sql;\n        result.params.push(...query.params);\n        if (query.typings?.length) {\n            if (!result.typings) {\n                result.typings = [];\n            }\n            result.typings.push(...query.typings);\n        }\n    }\n    return result;\n}\nclass StringChunk {\n    static{\n        this[entityKind] = \"StringChunk\";\n    }\n    constructor(value){\n        this.value = Array.isArray(value) ? value : [\n            value\n        ];\n    }\n    getSQL() {\n        return new SQL([\n            this\n        ]);\n    }\n}\nclass SQL {\n    static{\n        this[entityKind] = \"SQL\";\n    }\n    constructor(queryChunks){\n        /** @internal */ this.decoder = noopDecoder;\n        this.shouldInlineParams = false;\n        this.queryChunks = queryChunks;\n    }\n    append(query) {\n        this.queryChunks.push(...query.queryChunks);\n        return this;\n    }\n    toQuery(config) {\n        return tracer.startActiveSpan(\"drizzle.buildSQL\", (span)=>{\n            const query = this.buildQueryFromSourceParams(this.queryChunks, config);\n            span?.setAttributes({\n                \"drizzle.query.text\": query.sql,\n                \"drizzle.query.params\": JSON.stringify(query.params)\n            });\n            return query;\n        });\n    }\n    buildQueryFromSourceParams(chunks, _config) {\n        const config = Object.assign({}, _config, {\n            inlineParams: _config.inlineParams || this.shouldInlineParams,\n            paramStartIndex: _config.paramStartIndex || {\n                value: 0\n            }\n        });\n        const { escapeName, escapeParam, prepareTyping, inlineParams, paramStartIndex } = config;\n        return mergeQueries(chunks.map((chunk)=>{\n            if (is(chunk, StringChunk)) {\n                return {\n                    sql: chunk.value.join(\"\"),\n                    params: []\n                };\n            }\n            if (is(chunk, Name)) {\n                return {\n                    sql: escapeName(chunk.value),\n                    params: []\n                };\n            }\n            if (chunk === undefined) {\n                return {\n                    sql: \"\",\n                    params: []\n                };\n            }\n            if (Array.isArray(chunk)) {\n                const result = [\n                    new StringChunk(\"(\")\n                ];\n                for (const [i, p] of chunk.entries()){\n                    result.push(p);\n                    if (i < chunk.length - 1) {\n                        result.push(new StringChunk(\", \"));\n                    }\n                }\n                result.push(new StringChunk(\")\"));\n                return this.buildQueryFromSourceParams(result, config);\n            }\n            if (is(chunk, SQL)) {\n                return this.buildQueryFromSourceParams(chunk.queryChunks, {\n                    ...config,\n                    inlineParams: inlineParams || chunk.shouldInlineParams\n                });\n            }\n            if (is(chunk, Table)) {\n                const schemaName = chunk[Table.Symbol.Schema];\n                const tableName = chunk[Table.Symbol.Name];\n                return {\n                    sql: schemaName === undefined ? escapeName(tableName) : escapeName(schemaName) + \".\" + escapeName(tableName),\n                    params: []\n                };\n            }\n            if (is(chunk, Column)) {\n                return {\n                    sql: escapeName(chunk.table[Table.Symbol.Name]) + \".\" + escapeName(chunk.name),\n                    params: []\n                };\n            }\n            if (is(chunk, View)) {\n                const schemaName = chunk[ViewBaseConfig].schema;\n                const viewName = chunk[ViewBaseConfig].name;\n                return {\n                    sql: schemaName === undefined ? escapeName(viewName) : escapeName(schemaName) + \".\" + escapeName(viewName),\n                    params: []\n                };\n            }\n            if (is(chunk, Param)) {\n                const mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);\n                if (is(mappedValue, SQL)) {\n                    return this.buildQueryFromSourceParams([\n                        mappedValue\n                    ], config);\n                }\n                if (inlineParams) {\n                    return {\n                        sql: this.mapInlineParam(mappedValue, config),\n                        params: []\n                    };\n                }\n                let typings;\n                if (prepareTyping !== undefined) {\n                    typings = [\n                        prepareTyping(chunk.encoder)\n                    ];\n                }\n                return {\n                    sql: escapeParam(paramStartIndex.value++, mappedValue),\n                    params: [\n                        mappedValue\n                    ],\n                    typings\n                };\n            }\n            if (is(chunk, Placeholder)) {\n                return {\n                    sql: escapeParam(paramStartIndex.value++, chunk),\n                    params: [\n                        chunk\n                    ]\n                };\n            }\n            if (is(chunk, SQL.Aliased) && chunk.fieldAlias !== undefined) {\n                return {\n                    sql: escapeName(chunk.fieldAlias),\n                    params: []\n                };\n            }\n            if (is(chunk, Subquery)) {\n                if (chunk[SubqueryConfig].isWith) {\n                    return {\n                        sql: escapeName(chunk[SubqueryConfig].alias),\n                        params: []\n                    };\n                }\n                return this.buildQueryFromSourceParams([\n                    new StringChunk(\"(\"),\n                    chunk[SubqueryConfig].sql,\n                    new StringChunk(\") \"),\n                    new Name(chunk[SubqueryConfig].alias)\n                ], config);\n            }\n            // if (is(chunk, Placeholder)) {\n            // \treturn {sql: escapeParam}\n            if (isSQLWrapper(chunk)) {\n                return this.buildQueryFromSourceParams([\n                    new StringChunk(\"(\"),\n                    chunk.getSQL(),\n                    new StringChunk(\")\")\n                ], config);\n            }\n            if (is(chunk, Relation)) {\n                return this.buildQueryFromSourceParams([\n                    chunk.sourceTable,\n                    new StringChunk(\".\"),\n                    sql.identifier(chunk.fieldName)\n                ], config);\n            }\n            if (inlineParams) {\n                return {\n                    sql: this.mapInlineParam(chunk, config),\n                    params: []\n                };\n            }\n            return {\n                sql: escapeParam(paramStartIndex.value++, chunk),\n                params: [\n                    chunk\n                ]\n            };\n        }));\n    }\n    mapInlineParam(chunk, { escapeString }) {\n        if (chunk === null) {\n            return \"null\";\n        }\n        if (typeof chunk === \"number\" || typeof chunk === \"boolean\") {\n            return chunk.toString();\n        }\n        if (typeof chunk === \"string\") {\n            return escapeString(chunk);\n        }\n        if (typeof chunk === \"object\") {\n            const mappedValueAsString = chunk.toString();\n            if (mappedValueAsString === \"[object Object]\") {\n                return escapeString(JSON.stringify(chunk));\n            }\n            return escapeString(mappedValueAsString);\n        }\n        throw new Error(\"Unexpected param value: \" + chunk);\n    }\n    getSQL() {\n        return this;\n    }\n    as(alias) {\n        // TODO: remove with deprecated overloads\n        if (alias === undefined) {\n            return this;\n        }\n        return new SQL.Aliased(this, alias);\n    }\n    mapWith(decoder) {\n        this.decoder = typeof decoder === \"function\" ? {\n            mapFromDriverValue: decoder\n        } : decoder;\n        return this;\n    }\n    inlineParams() {\n        this.shouldInlineParams = true;\n        return this;\n    }\n}\n/**\n * Any DB name (table, column, index etc.)\n */ class Name {\n    static{\n        this[entityKind] = \"Name\";\n    }\n    constructor(value){\n        this.value = value;\n    }\n    getSQL() {\n        return new SQL([\n            this\n        ]);\n    }\n}\n/**\n * Any DB name (table, column, index etc.)\n * @deprecated Use `sql.identifier` instead.\n */ function name(value) {\n    return new Name(value);\n}\nfunction isDriverValueEncoder(value) {\n    return typeof value === \"object\" && value !== null && \"mapToDriverValue\" in value && typeof value.mapToDriverValue === \"function\";\n}\nconst noopDecoder = {\n    mapFromDriverValue: (value)=>value\n};\nconst noopEncoder = {\n    mapToDriverValue: (value)=>value\n};\nconst noopMapper = {\n    ...noopDecoder,\n    ...noopEncoder\n};\n/** Parameter value that is optionally bound to an encoder (for example, a column). */ class Param {\n    static{\n        this[entityKind] = \"Param\";\n    }\n    /**\n     * @param value - Parameter value\n     * @param encoder - Encoder to convert the value to a driver parameter\n     */ constructor(value, encoder = noopEncoder){\n        this.value = value;\n        this.encoder = encoder;\n    }\n    getSQL() {\n        return new SQL([\n            this\n        ]);\n    }\n}\n/** @deprecated Use `sql.param` instead. */ function param(value, encoder) {\n    return new Param(value, encoder);\n}\n/*\n    The type of `params` is specified as `SQLSourceParam[]`, but that's slightly incorrect -\n    in runtime, users won't pass `FakePrimitiveParam` instances as `params` - they will pass primitive values\n    which will be wrapped in `Param` using `buildChunksFromParam(...)`. That's why the overload\n    specify `params` as `any[]` and not as `SQLSourceParam[]`. This type is used to make our lives easier and\n    the type checker happy.\n*/ function sql(strings, ...params) {\n    const queryChunks = [];\n    if (params.length > 0 || strings.length > 0 && strings[0] !== \"\") {\n        queryChunks.push(new StringChunk(strings[0]));\n    }\n    for (const [paramIndex, param] of params.entries()){\n        queryChunks.push(param, new StringChunk(strings[paramIndex + 1]));\n    }\n    return new SQL(queryChunks);\n}\n(function(sql) {\n    function empty() {\n        return new SQL([]);\n    }\n    sql.empty = empty;\n    /** @deprecated - use `sql.join()` */ function fromList(list) {\n        return new SQL(list);\n    }\n    sql.fromList = fromList;\n    /**\n     * Convenience function to create an SQL query from a raw string.\n     * @param str The raw SQL query string.\n     */ function raw(str) {\n        return new SQL([\n            new StringChunk(str)\n        ]);\n    }\n    sql.raw = raw;\n    /**\n     * Join a list of SQL chunks with a separator.\n     * @example\n     * ```ts\n     * const query = sql.join([sql`a`, sql`b`, sql`c`]);\n     * // sql`abc`\n     * ```\n     * @example\n     * ```ts\n     * const query = sql.join([sql`a`, sql`b`, sql`c`], sql`, `);\n     * // sql`a, b, c`\n     * ```\n     */ function join(chunks, separator) {\n        const result = [];\n        for (const [i, chunk] of chunks.entries()){\n            if (i > 0 && separator !== undefined) {\n                result.push(separator);\n            }\n            result.push(chunk);\n        }\n        return new SQL(result);\n    }\n    sql.join = join;\n    /**\n     * Create a SQL chunk that represents a DB identifier (table, column, index etc.).\n     * When used in a query, the identifier will be escaped based on the DB engine.\n     * For example, in PostgreSQL, identifiers are escaped with double quotes.\n     *\n     * **WARNING: This function does not offer any protection against SQL injections, so you must validate any user input beforehand.**\n     *\n     * @example ```ts\n     * const query = sql`SELECT * FROM ${sql.identifier('my-table')}`;\n     * // 'SELECT * FROM \"my-table\"'\n     * ```\n     */ function identifier(value) {\n        return new Name(value);\n    }\n    sql.identifier = identifier;\n    function placeholder(name) {\n        return new Placeholder(name);\n    }\n    sql.placeholder = placeholder;\n    function param(value, encoder) {\n        return new Param(value, encoder);\n    }\n    sql.param = param;\n})(sql || (sql = {}));\n(function(SQL) {\n    class Aliased {\n        static{\n            this[entityKind] = \"SQL.Aliased\";\n        }\n        constructor(sql, fieldAlias){\n            /** @internal */ this.isSelectionField = false;\n            this.sql = sql;\n            this.fieldAlias = fieldAlias;\n        }\n        getSQL() {\n            return this.sql;\n        }\n        /** @internal */ clone() {\n            return new Aliased(this.sql, this.fieldAlias);\n        }\n    }\n    SQL.Aliased = Aliased;\n})(SQL || (SQL = {}));\nclass Placeholder {\n    static{\n        this[entityKind] = \"Placeholder\";\n    }\n    constructor(name){\n        this.name = name;\n    }\n    getSQL() {\n        return new SQL([\n            this\n        ]);\n    }\n}\n/** @deprecated Use `sql.placeholder` instead. */ function placeholder(name) {\n    return new Placeholder(name);\n}\nfunction fillPlaceholders(params, values) {\n    return params.map((p)=>{\n        if (is(p, Placeholder)) {\n            if (!(p.name in values)) {\n                throw new Error(`No value for placeholder \"${p.name}\" was provided`);\n            }\n            return values[p.name];\n        }\n        return p;\n    });\n}\n// Defined separately from the Column class to resolve circular dependency\nColumn.prototype.getSQL = function() {\n    return new SQL([\n        this\n    ]);\n};\nclass ColumnAliasProxyHandler {\n    static{\n        this[entityKind] = \"ColumnAliasProxyHandler\";\n    }\n    constructor(table){\n        this.table = table;\n    }\n    get(columnObj, prop) {\n        if (prop === \"table\") {\n            return this.table;\n        }\n        return columnObj[prop];\n    }\n}\nclass TableAliasProxyHandler {\n    static{\n        this[entityKind] = \"TableAliasProxyHandler\";\n    }\n    constructor(alias, replaceOriginalName){\n        this.alias = alias;\n        this.replaceOriginalName = replaceOriginalName;\n    }\n    get(target, prop) {\n        if (prop === Table.Symbol.IsAlias) {\n            return true;\n        }\n        if (prop === Table.Symbol.Name) {\n            return this.alias;\n        }\n        if (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {\n            return this.alias;\n        }\n        if (prop === ViewBaseConfig) {\n            return {\n                ...target[ViewBaseConfig],\n                name: this.alias,\n                isAlias: true\n            };\n        }\n        if (prop === Table.Symbol.Columns) {\n            const columns = target[Table.Symbol.Columns];\n            if (!columns) {\n                return columns;\n            }\n            const proxiedColumns = {};\n            Object.keys(columns).map((key)=>{\n                proxiedColumns[key] = new Proxy(columns[key], new ColumnAliasProxyHandler(new Proxy(target, this)));\n            });\n            return proxiedColumns;\n        }\n        const value = target[prop];\n        if (is(value, Column)) {\n            return new Proxy(value, new ColumnAliasProxyHandler(new Proxy(target, this)));\n        }\n        return value;\n    }\n}\nclass RelationTableAliasProxyHandler {\n    static{\n        this[entityKind] = \"RelationTableAliasProxyHandler\";\n    }\n    constructor(alias){\n        this.alias = alias;\n    }\n    get(target, prop) {\n        if (prop === \"sourceTable\") {\n            return aliasedTable(target.sourceTable, this.alias);\n        }\n        return target[prop];\n    }\n}\nfunction aliasedTable(table, tableAlias) {\n    return new Proxy(table, new TableAliasProxyHandler(tableAlias, false));\n}\nfunction aliasedRelation(relation, tableAlias) {\n    return new Proxy(relation, new RelationTableAliasProxyHandler(tableAlias));\n}\nfunction aliasedTableColumn(column, tableAlias) {\n    return new Proxy(column, new ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false))));\n}\nfunction mapColumnsInAliasedSQLToAlias(query, alias) {\n    return new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);\n}\nfunction mapColumnsInSQLToAlias(query, alias) {\n    return sql.join(query.queryChunks.map((c)=>{\n        if (is(c, Column)) {\n            return aliasedTableColumn(c, alias);\n        }\n        if (is(c, SQL)) {\n            return mapColumnsInSQLToAlias(c, alias);\n        }\n        if (is(c, SQL.Aliased)) {\n            return mapColumnsInAliasedSQLToAlias(c, alias);\n        }\n        return c;\n    }));\n}\n //# sourceMappingURL=alias-cf8e03cd.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/drizzle-orm/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/drizzle-orm/index.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bS),\n/* harmony export */   Column: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   ColumnAliasProxyHandler: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b4),\n/* harmony export */   ColumnBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   Columns: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bQ),\n/* harmony export */   ConsoleLogWriter: () => (/* binding */ ConsoleLogWriter),\n/* harmony export */   DefaultLogger: () => (/* binding */ DefaultLogger),\n/* harmony export */   DrizzleError: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   ExtraConfigBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bU),\n/* harmony export */   FakePrimitiveParam: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bC),\n/* harmony export */   IsAlias: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bT),\n/* harmony export */   Many: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   Name: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bF),\n/* harmony export */   NoopLogger: () => (/* binding */ NoopLogger),\n/* harmony export */   One: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.O),\n/* harmony export */   OriginalName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bR),\n/* harmony export */   Param: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   Placeholder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bM),\n/* harmony export */   QueryPromise: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q),\n/* harmony export */   Relation: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bx),\n/* harmony export */   RelationTableAliasProxyHandler: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b5),\n/* harmony export */   Relations: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.by),\n/* harmony export */   SQL: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   Schema: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bP),\n/* harmony export */   SelectionProxyHandler: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   StringChunk: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bE),\n/* harmony export */   Subquery: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   SubqueryConfig: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.u),\n/* harmony export */   Table: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T),\n/* harmony export */   TableAliasProxyHandler: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   TableName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bO),\n/* harmony export */   TransactionRollbackError: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   View: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.v),\n/* harmony export */   ViewBaseConfig: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.V),\n/* harmony export */   WithSubquery: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.W),\n/* harmony export */   aliasedRelation: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b6),\n/* harmony export */   aliasedTable: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.G),\n/* harmony export */   aliasedTableColumn: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w),\n/* harmony export */   and: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.E),\n/* harmony export */   applyMixins: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.H),\n/* harmony export */   arrayContained: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bt),\n/* harmony export */   arrayContains: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bs),\n/* harmony export */   arrayOverlaps: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bu),\n/* harmony export */   asc: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bv),\n/* harmony export */   between: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bm),\n/* harmony export */   bindIfParam: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b8),\n/* harmony export */   createMany: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bB),\n/* harmony export */   createOne: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bA),\n/* harmony export */   createTableRelationsHelpers: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   desc: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bw),\n/* harmony export */   entityKind: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   eq: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.F),\n/* harmony export */   exists: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bk),\n/* harmony export */   extractTablesRelationalConfig: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   fillPlaceholders: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   getOperators: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.x),\n/* harmony export */   getOrderByOperators: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   getTableColumns: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.I),\n/* harmony export */   getTableLikeName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.K),\n/* harmony export */   getTableName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   gt: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bc),\n/* harmony export */   gte: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bd),\n/* harmony export */   hasOwnEntityKind: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b7),\n/* harmony export */   iife: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bW),\n/* harmony export */   ilike: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bq),\n/* harmony export */   inArray: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bg),\n/* harmony export */   is: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   isDriverValueEncoder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bH),\n/* harmony export */   isNotNull: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bj),\n/* harmony export */   isNull: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bi),\n/* harmony export */   isSQLWrapper: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bD),\n/* harmony export */   isTable: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bV),\n/* harmony export */   like: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bo),\n/* harmony export */   lt: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.be),\n/* harmony export */   lte: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bf),\n/* harmony export */   mapColumnsInAliasedSQLToAlias: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.z),\n/* harmony export */   mapColumnsInSQLToAlias: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.y),\n/* harmony export */   mapRelationalRow: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   mapResultRow: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   mapUpdateSet: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   name: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bG),\n/* harmony export */   ne: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b9),\n/* harmony export */   noopDecoder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bI),\n/* harmony export */   noopEncoder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bJ),\n/* harmony export */   noopMapper: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bK),\n/* harmony export */   normalizeRelation: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.B),\n/* harmony export */   not: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bb),\n/* harmony export */   notBetween: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bn),\n/* harmony export */   notExists: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bl),\n/* harmony export */   notIlike: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.br),\n/* harmony export */   notInArray: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bh),\n/* harmony export */   notLike: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bp),\n/* harmony export */   or: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ba),\n/* harmony export */   orderSelectedFields: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   param: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bL),\n/* harmony export */   placeholder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bN),\n/* harmony export */   relations: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bz),\n/* harmony export */   sql: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s)\n/* harmony export */ });\n/* harmony import */ var _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alias-cf8e03cd.mjs */ \"(rsc)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs\");\n\n\nclass ConsoleLogWriter {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"ConsoleLogWriter\";\n    }\n    write(message) {\n        console.log(message);\n    }\n}\nclass DefaultLogger {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"DefaultLogger\";\n    }\n    constructor(config){\n        this.writer = config?.writer ?? new ConsoleLogWriter();\n    }\n    logQuery(query, params) {\n        const stringifiedParams = params.map((p)=>{\n            try {\n                return JSON.stringify(p);\n            } catch  {\n                return String(p);\n            }\n        });\n        const paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(\", \")}]` : \"\";\n        this.writer.write(`Query: ${query}${paramsStr}`);\n    }\n}\nclass NoopLogger {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"NoopLogger\";\n    }\n    logQuery() {\n    // noop\n    }\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZHJpenpsZS1vcm0vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF1RDtBQUNvcUQ7QUFFM3RELE1BQU04TDs7WUFDSyxDQUFDN0wsa0RBQVVBLENBQUMsR0FBRzs7SUFDdEI4TCxNQUFNQyxPQUFPLEVBQUU7UUFDWEMsUUFBUUMsR0FBRyxDQUFDRjtJQUNoQjtBQUNKO0FBQ0EsTUFBTUc7O1lBQ0ssQ0FBQ2xNLGtEQUFVQSxDQUFDLEdBQUc7O0lBRXRCbU0sWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLElBQUksQ0FBQ0MsTUFBTSxHQUFHRCxRQUFRQyxVQUFVLElBQUlSO0lBQ3hDO0lBQ0FTLFNBQVNDLEtBQUssRUFBRUMsTUFBTSxFQUFFO1FBQ3BCLE1BQU1DLG9CQUFvQkQsT0FBT0UsR0FBRyxDQUFDLENBQUN2TTtZQUNsQyxJQUFJO2dCQUNBLE9BQU93TSxLQUFLQyxTQUFTLENBQUN6TTtZQUMxQixFQUNBLE9BQU07Z0JBQ0YsT0FBTzBNLE9BQU8xTTtZQUNsQjtRQUNKO1FBQ0EsTUFBTTJNLFlBQVlMLGtCQUFrQk0sTUFBTSxHQUFHLENBQUMsYUFBYSxFQUFFTixrQkFBa0JPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHO1FBQy9GLElBQUksQ0FBQ1gsTUFBTSxDQUFDUCxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUVTLE1BQU0sRUFBRU8sVUFBVSxDQUFDO0lBQ25EO0FBQ0o7QUFDQSxNQUFNRzs7WUFDSyxDQUFDak4sa0RBQVVBLENBQUMsR0FBRzs7SUFDdEJzTSxXQUFXO0lBQ1AsT0FBTztJQUNYO0FBQ0o7QUFFbUUsQ0FDbkUsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tLy4vbm9kZV9tb2R1bGVzL2RyaXp6bGUtb3JtL2luZGV4Lm1qcz9jZjQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGUgYXMgZW50aXR5S2luZCB9IGZyb20gJy4vYWxpYXMtY2Y4ZTAzY2QubWpzJztcbmV4cG9ydCB7IGJTIGFzIEJhc2VOYW1lLCBwIGFzIENvbHVtbiwgYjQgYXMgQ29sdW1uQWxpYXNQcm94eUhhbmRsZXIsIEMgYXMgQ29sdW1uQnVpbGRlciwgYlEgYXMgQ29sdW1ucywgRCBhcyBEcml6emxlRXJyb3IsIGJVIGFzIEV4dHJhQ29uZmlnQnVpbGRlciwgYkMgYXMgRmFrZVByaW1pdGl2ZVBhcmFtLCBiVCBhcyBJc0FsaWFzLCBNIGFzIE1hbnksIGJGIGFzIE5hbWUsIE8gYXMgT25lLCBiUiBhcyBPcmlnaW5hbE5hbWUsIGIgYXMgUGFyYW0sIGJNIGFzIFBsYWNlaG9sZGVyLCBRIGFzIFF1ZXJ5UHJvbWlzZSwgYnggYXMgUmVsYXRpb24sIGI1IGFzIFJlbGF0aW9uVGFibGVBbGlhc1Byb3h5SGFuZGxlciwgYnkgYXMgUmVsYXRpb25zLCBTIGFzIFNRTCwgYlAgYXMgU2NoZW1hLCBqIGFzIFNlbGVjdGlvblByb3h5SGFuZGxlciwgYkUgYXMgU3RyaW5nQ2h1bmssIHIgYXMgU3VicXVlcnksIHUgYXMgU3VicXVlcnlDb25maWcsIFQgYXMgVGFibGUsIG4gYXMgVGFibGVBbGlhc1Byb3h5SGFuZGxlciwgYk8gYXMgVGFibGVOYW1lLCBsIGFzIFRyYW5zYWN0aW9uUm9sbGJhY2tFcnJvciwgdiBhcyBWaWV3LCBWIGFzIFZpZXdCYXNlQ29uZmlnLCBXIGFzIFdpdGhTdWJxdWVyeSwgYjYgYXMgYWxpYXNlZFJlbGF0aW9uLCBHIGFzIGFsaWFzZWRUYWJsZSwgdyBhcyBhbGlhc2VkVGFibGVDb2x1bW4sIEUgYXMgYW5kLCBIIGFzIGFwcGx5TWl4aW5zLCBidCBhcyBhcnJheUNvbnRhaW5lZCwgYnMgYXMgYXJyYXlDb250YWlucywgYnUgYXMgYXJyYXlPdmVybGFwcywgYnYgYXMgYXNjLCBibSBhcyBiZXR3ZWVuLCBiOCBhcyBiaW5kSWZQYXJhbSwgYkIgYXMgY3JlYXRlTWFueSwgYkEgYXMgY3JlYXRlT25lLCBjIGFzIGNyZWF0ZVRhYmxlUmVsYXRpb25zSGVscGVycywgYncgYXMgZGVzYywgRiBhcyBlcSwgYmsgYXMgZXhpc3RzLCBhIGFzIGV4dHJhY3RUYWJsZXNSZWxhdGlvbmFsQ29uZmlnLCBmIGFzIGZpbGxQbGFjZWhvbGRlcnMsIHggYXMgZ2V0T3BlcmF0b3JzLCBBIGFzIGdldE9yZGVyQnlPcGVyYXRvcnMsIEkgYXMgZ2V0VGFibGVDb2x1bW5zLCBLIGFzIGdldFRhYmxlTGlrZU5hbWUsIHEgYXMgZ2V0VGFibGVOYW1lLCBiYyBhcyBndCwgYmQgYXMgZ3RlLCBiNyBhcyBoYXNPd25FbnRpdHlLaW5kLCBiVyBhcyBpaWZlLCBicSBhcyBpbGlrZSwgYmcgYXMgaW5BcnJheSwgaSBhcyBpcywgYkggYXMgaXNEcml2ZXJWYWx1ZUVuY29kZXIsIGJqIGFzIGlzTm90TnVsbCwgYmkgYXMgaXNOdWxsLCBiRCBhcyBpc1NRTFdyYXBwZXIsIGJWIGFzIGlzVGFibGUsIGJvIGFzIGxpa2UsIGJlIGFzIGx0LCBiZiBhcyBsdGUsIHogYXMgbWFwQ29sdW1uc0luQWxpYXNlZFNRTFRvQWxpYXMsIHkgYXMgbWFwQ29sdW1uc0luU1FMVG9BbGlhcywgZyBhcyBtYXBSZWxhdGlvbmFsUm93LCBtIGFzIG1hcFJlc3VsdFJvdywgZCBhcyBtYXBVcGRhdGVTZXQsIGJHIGFzIG5hbWUsIGI5IGFzIG5lLCBiSSBhcyBub29wRGVjb2RlciwgYkogYXMgbm9vcEVuY29kZXIsIGJLIGFzIG5vb3BNYXBwZXIsIEIgYXMgbm9ybWFsaXplUmVsYXRpb24sIGJiIGFzIG5vdCwgYm4gYXMgbm90QmV0d2VlbiwgYmwgYXMgbm90RXhpc3RzLCBiciBhcyBub3RJbGlrZSwgYmggYXMgbm90SW5BcnJheSwgYnAgYXMgbm90TGlrZSwgYmEgYXMgb3IsIG8gYXMgb3JkZXJTZWxlY3RlZEZpZWxkcywgYkwgYXMgcGFyYW0sIGJOIGFzIHBsYWNlaG9sZGVyLCBieiBhcyByZWxhdGlvbnMsIHMgYXMgc3FsIH0gZnJvbSAnLi9hbGlhcy1jZjhlMDNjZC5tanMnO1xuXG5jbGFzcyBDb25zb2xlTG9nV3JpdGVyIHtcbiAgICBzdGF0aWMgW2VudGl0eUtpbmRdID0gJ0NvbnNvbGVMb2dXcml0ZXInO1xuICAgIHdyaXRlKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgfVxufVxuY2xhc3MgRGVmYXVsdExvZ2dlciB7XG4gICAgc3RhdGljIFtlbnRpdHlLaW5kXSA9ICdEZWZhdWx0TG9nZ2VyJztcbiAgICB3cml0ZXI7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMud3JpdGVyID0gY29uZmlnPy53cml0ZXIgPz8gbmV3IENvbnNvbGVMb2dXcml0ZXIoKTtcbiAgICB9XG4gICAgbG9nUXVlcnkocXVlcnksIHBhcmFtcykge1xuICAgICAgICBjb25zdCBzdHJpbmdpZmllZFBhcmFtcyA9IHBhcmFtcy5tYXAoKHApID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcocCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwYXJhbXNTdHIgPSBzdHJpbmdpZmllZFBhcmFtcy5sZW5ndGggPyBgIC0tIHBhcmFtczogWyR7c3RyaW5naWZpZWRQYXJhbXMuam9pbignLCAnKX1dYCA6ICcnO1xuICAgICAgICB0aGlzLndyaXRlci53cml0ZShgUXVlcnk6ICR7cXVlcnl9JHtwYXJhbXNTdHJ9YCk7XG4gICAgfVxufVxuY2xhc3MgTm9vcExvZ2dlciB7XG4gICAgc3RhdGljIFtlbnRpdHlLaW5kXSA9ICdOb29wTG9nZ2VyJztcbiAgICBsb2dRdWVyeSgpIHtcbiAgICAgICAgLy8gbm9vcFxuICAgIH1cbn1cblxuZXhwb3J0IHsgQ29uc29sZUxvZ1dyaXRlciwgRGVmYXVsdExvZ2dlciwgTm9vcExvZ2dlciwgZW50aXR5S2luZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbImUiLCJlbnRpdHlLaW5kIiwiYlMiLCJCYXNlTmFtZSIsInAiLCJDb2x1bW4iLCJiNCIsIkNvbHVtbkFsaWFzUHJveHlIYW5kbGVyIiwiQyIsIkNvbHVtbkJ1aWxkZXIiLCJiUSIsIkNvbHVtbnMiLCJEIiwiRHJpenpsZUVycm9yIiwiYlUiLCJFeHRyYUNvbmZpZ0J1aWxkZXIiLCJiQyIsIkZha2VQcmltaXRpdmVQYXJhbSIsImJUIiwiSXNBbGlhcyIsIk0iLCJNYW55IiwiYkYiLCJOYW1lIiwiTyIsIk9uZSIsImJSIiwiT3JpZ2luYWxOYW1lIiwiYiIsIlBhcmFtIiwiYk0iLCJQbGFjZWhvbGRlciIsIlEiLCJRdWVyeVByb21pc2UiLCJieCIsIlJlbGF0aW9uIiwiYjUiLCJSZWxhdGlvblRhYmxlQWxpYXNQcm94eUhhbmRsZXIiLCJieSIsIlJlbGF0aW9ucyIsIlMiLCJTUUwiLCJiUCIsIlNjaGVtYSIsImoiLCJTZWxlY3Rpb25Qcm94eUhhbmRsZXIiLCJiRSIsIlN0cmluZ0NodW5rIiwiciIsIlN1YnF1ZXJ5IiwidSIsIlN1YnF1ZXJ5Q29uZmlnIiwiVCIsIlRhYmxlIiwibiIsIlRhYmxlQWxpYXNQcm94eUhhbmRsZXIiLCJiTyIsIlRhYmxlTmFtZSIsImwiLCJUcmFuc2FjdGlvblJvbGxiYWNrRXJyb3IiLCJ2IiwiVmlldyIsIlYiLCJWaWV3QmFzZUNvbmZpZyIsIlciLCJXaXRoU3VicXVlcnkiLCJiNiIsImFsaWFzZWRSZWxhdGlvbiIsIkciLCJhbGlhc2VkVGFibGUiLCJ3IiwiYWxpYXNlZFRhYmxlQ29sdW1uIiwiRSIsImFuZCIsIkgiLCJhcHBseU1peGlucyIsImJ0IiwiYXJyYXlDb250YWluZWQiLCJicyIsImFycmF5Q29udGFpbnMiLCJidSIsImFycmF5T3ZlcmxhcHMiLCJidiIsImFzYyIsImJtIiwiYmV0d2VlbiIsImI4IiwiYmluZElmUGFyYW0iLCJiQiIsImNyZWF0ZU1hbnkiLCJiQSIsImNyZWF0ZU9uZSIsImMiLCJjcmVhdGVUYWJsZVJlbGF0aW9uc0hlbHBlcnMiLCJidyIsImRlc2MiLCJGIiwiZXEiLCJiayIsImV4aXN0cyIsImEiLCJleHRyYWN0VGFibGVzUmVsYXRpb25hbENvbmZpZyIsImYiLCJmaWxsUGxhY2Vob2xkZXJzIiwieCIsImdldE9wZXJhdG9ycyIsIkEiLCJnZXRPcmRlckJ5T3BlcmF0b3JzIiwiSSIsImdldFRhYmxlQ29sdW1ucyIsIksiLCJnZXRUYWJsZUxpa2VOYW1lIiwicSIsImdldFRhYmxlTmFtZSIsImJjIiwiZ3QiLCJiZCIsImd0ZSIsImI3IiwiaGFzT3duRW50aXR5S2luZCIsImJXIiwiaWlmZSIsImJxIiwiaWxpa2UiLCJiZyIsImluQXJyYXkiLCJpIiwiaXMiLCJiSCIsImlzRHJpdmVyVmFsdWVFbmNvZGVyIiwiYmoiLCJpc05vdE51bGwiLCJiaSIsImlzTnVsbCIsImJEIiwiaXNTUUxXcmFwcGVyIiwiYlYiLCJpc1RhYmxlIiwiYm8iLCJsaWtlIiwiYmUiLCJsdCIsImJmIiwibHRlIiwieiIsIm1hcENvbHVtbnNJbkFsaWFzZWRTUUxUb0FsaWFzIiwieSIsIm1hcENvbHVtbnNJblNRTFRvQWxpYXMiLCJnIiwibWFwUmVsYXRpb25hbFJvdyIsIm0iLCJtYXBSZXN1bHRSb3ciLCJkIiwibWFwVXBkYXRlU2V0IiwiYkciLCJuYW1lIiwiYjkiLCJuZSIsImJJIiwibm9vcERlY29kZXIiLCJiSiIsIm5vb3BFbmNvZGVyIiwiYksiLCJub29wTWFwcGVyIiwiQiIsIm5vcm1hbGl6ZVJlbGF0aW9uIiwiYmIiLCJub3QiLCJibiIsIm5vdEJldHdlZW4iLCJibCIsIm5vdEV4aXN0cyIsImJyIiwibm90SWxpa2UiLCJiaCIsIm5vdEluQXJyYXkiLCJicCIsIm5vdExpa2UiLCJiYSIsIm9yIiwibyIsIm9yZGVyU2VsZWN0ZWRGaWVsZHMiLCJiTCIsInBhcmFtIiwiYk4iLCJwbGFjZWhvbGRlciIsImJ6IiwicmVsYXRpb25zIiwicyIsInNxbCIsIkNvbnNvbGVMb2dXcml0ZXIiLCJ3cml0ZSIsIm1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwiRGVmYXVsdExvZ2dlciIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwid3JpdGVyIiwibG9nUXVlcnkiLCJxdWVyeSIsInBhcmFtcyIsInN0cmluZ2lmaWVkUGFyYW1zIiwibWFwIiwiSlNPTiIsInN0cmluZ2lmeSIsIlN0cmluZyIsInBhcmFtc1N0ciIsImxlbmd0aCIsImpvaW4iLCJOb29wTG9nZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/drizzle-orm/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/drizzle-orm/mysql-core/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/drizzle-orm/mysql-core/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Check: () => (/* binding */ Check),\n/* harmony export */   CheckBuilder: () => (/* binding */ CheckBuilder),\n/* harmony export */   ForeignKey: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   ForeignKeyBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.F),\n/* harmony export */   Index: () => (/* binding */ Index),\n/* harmony export */   IndexBuilder: () => (/* binding */ IndexBuilder),\n/* harmony export */   IndexBuilderOn: () => (/* binding */ IndexBuilderOn),\n/* harmony export */   InlineForeignKeys: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.I),\n/* harmony export */   ManualViewBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   MySqlBigInt53: () => (/* binding */ MySqlBigInt53),\n/* harmony export */   MySqlBigInt53Builder: () => (/* binding */ MySqlBigInt53Builder),\n/* harmony export */   MySqlBigInt64: () => (/* binding */ MySqlBigInt64),\n/* harmony export */   MySqlBigInt64Builder: () => (/* binding */ MySqlBigInt64Builder),\n/* harmony export */   MySqlBinary: () => (/* binding */ MySqlBinary),\n/* harmony export */   MySqlBinaryBuilder: () => (/* binding */ MySqlBinaryBuilder),\n/* harmony export */   MySqlBoolean: () => (/* binding */ MySqlBoolean),\n/* harmony export */   MySqlBooleanBuilder: () => (/* binding */ MySqlBooleanBuilder),\n/* harmony export */   MySqlChar: () => (/* binding */ MySqlChar),\n/* harmony export */   MySqlCharBuilder: () => (/* binding */ MySqlCharBuilder),\n/* harmony export */   MySqlColumn: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   MySqlColumnBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   MySqlColumnBuilderWithAutoIncrement: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   MySqlColumnWithAutoIncrement: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   MySqlCustomColumn: () => (/* binding */ MySqlCustomColumn),\n/* harmony export */   MySqlCustomColumnBuilder: () => (/* binding */ MySqlCustomColumnBuilder),\n/* harmony export */   MySqlDatabase: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   MySqlDate: () => (/* binding */ MySqlDate),\n/* harmony export */   MySqlDateBuilder: () => (/* binding */ MySqlDateBuilder),\n/* harmony export */   MySqlDateString: () => (/* binding */ MySqlDateString),\n/* harmony export */   MySqlDateStringBuilder: () => (/* binding */ MySqlDateStringBuilder),\n/* harmony export */   MySqlDateTime: () => (/* binding */ MySqlDateTime),\n/* harmony export */   MySqlDateTimeBuilder: () => (/* binding */ MySqlDateTimeBuilder),\n/* harmony export */   MySqlDateTimeString: () => (/* binding */ MySqlDateTimeString),\n/* harmony export */   MySqlDateTimeStringBuilder: () => (/* binding */ MySqlDateTimeStringBuilder),\n/* harmony export */   MySqlDecimal: () => (/* binding */ MySqlDecimal),\n/* harmony export */   MySqlDecimalBuilder: () => (/* binding */ MySqlDecimalBuilder),\n/* harmony export */   MySqlDelete: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   MySqlDialect: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   MySqlDouble: () => (/* binding */ MySqlDouble),\n/* harmony export */   MySqlDoubleBuilder: () => (/* binding */ MySqlDoubleBuilder),\n/* harmony export */   MySqlEnumColumn: () => (/* binding */ MySqlEnumColumn),\n/* harmony export */   MySqlEnumColumnBuilder: () => (/* binding */ MySqlEnumColumnBuilder),\n/* harmony export */   MySqlFloat: () => (/* binding */ MySqlFloat),\n/* harmony export */   MySqlFloatBuilder: () => (/* binding */ MySqlFloatBuilder),\n/* harmony export */   MySqlInsert: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   MySqlInsertBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   MySqlInt: () => (/* binding */ MySqlInt),\n/* harmony export */   MySqlIntBuilder: () => (/* binding */ MySqlIntBuilder),\n/* harmony export */   MySqlJson: () => (/* binding */ MySqlJson),\n/* harmony export */   MySqlJsonBuilder: () => (/* binding */ MySqlJsonBuilder),\n/* harmony export */   MySqlMediumInt: () => (/* binding */ MySqlMediumInt),\n/* harmony export */   MySqlMediumIntBuilder: () => (/* binding */ MySqlMediumIntBuilder),\n/* harmony export */   MySqlReal: () => (/* binding */ MySqlReal),\n/* harmony export */   MySqlRealBuilder: () => (/* binding */ MySqlRealBuilder),\n/* harmony export */   MySqlSchema: () => (/* binding */ MySqlSchema),\n/* harmony export */   MySqlSelect: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   MySqlSelectBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   MySqlSelectQueryBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   MySqlSerial: () => (/* binding */ MySqlSerial),\n/* harmony export */   MySqlSerialBuilder: () => (/* binding */ MySqlSerialBuilder),\n/* harmony export */   MySqlSession: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   MySqlSmallInt: () => (/* binding */ MySqlSmallInt),\n/* harmony export */   MySqlSmallIntBuilder: () => (/* binding */ MySqlSmallIntBuilder),\n/* harmony export */   MySqlTable: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   MySqlText: () => (/* binding */ MySqlText),\n/* harmony export */   MySqlTextBuilder: () => (/* binding */ MySqlTextBuilder),\n/* harmony export */   MySqlTime: () => (/* binding */ MySqlTime),\n/* harmony export */   MySqlTimeBuilder: () => (/* binding */ MySqlTimeBuilder),\n/* harmony export */   MySqlTimestamp: () => (/* binding */ MySqlTimestamp),\n/* harmony export */   MySqlTimestampBuilder: () => (/* binding */ MySqlTimestampBuilder),\n/* harmony export */   MySqlTimestampString: () => (/* binding */ MySqlTimestampString),\n/* harmony export */   MySqlTimestampStringBuilder: () => (/* binding */ MySqlTimestampStringBuilder),\n/* harmony export */   MySqlTinyInt: () => (/* binding */ MySqlTinyInt),\n/* harmony export */   MySqlTinyIntBuilder: () => (/* binding */ MySqlTinyIntBuilder),\n/* harmony export */   MySqlTransaction: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   MySqlUpdate: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.u),\n/* harmony export */   MySqlUpdateBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.t),\n/* harmony export */   MySqlVarBinary: () => (/* binding */ MySqlVarBinary),\n/* harmony export */   MySqlVarBinaryBuilder: () => (/* binding */ MySqlVarBinaryBuilder),\n/* harmony export */   MySqlVarChar: () => (/* binding */ MySqlVarChar),\n/* harmony export */   MySqlVarCharBuilder: () => (/* binding */ MySqlVarCharBuilder),\n/* harmony export */   MySqlView: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.E),\n/* harmony export */   MySqlViewBase: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   MySqlViewConfig: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   MySqlYear: () => (/* binding */ MySqlYear),\n/* harmony export */   MySqlYearBuilder: () => (/* binding */ MySqlYearBuilder),\n/* harmony export */   PreparedQuery: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.P),\n/* harmony export */   PrimaryKey: () => (/* binding */ PrimaryKey),\n/* harmony export */   PrimaryKeyBuilder: () => (/* binding */ PrimaryKeyBuilder),\n/* harmony export */   QueryBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.Q),\n/* harmony export */   UniqueConstraint: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   UniqueConstraintBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.U),\n/* harmony export */   UniqueOnConstraintBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.z),\n/* harmony export */   ViewBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.B),\n/* harmony export */   ViewBuilderCore: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.V),\n/* harmony export */   alias: () => (/* binding */ alias),\n/* harmony export */   bigint: () => (/* binding */ bigint),\n/* harmony export */   binary: () => (/* binding */ binary),\n/* harmony export */   boolean: () => (/* binding */ boolean),\n/* harmony export */   char: () => (/* binding */ char),\n/* harmony export */   check: () => (/* binding */ check),\n/* harmony export */   customType: () => (/* binding */ customType),\n/* harmony export */   date: () => (/* binding */ date),\n/* harmony export */   datetime: () => (/* binding */ datetime),\n/* harmony export */   decimal: () => (/* binding */ decimal),\n/* harmony export */   double: () => (/* binding */ double),\n/* harmony export */   float: () => (/* binding */ float),\n/* harmony export */   foreignKey: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   getTableConfig: () => (/* binding */ getTableConfig),\n/* harmony export */   getViewConfig: () => (/* binding */ getViewConfig),\n/* harmony export */   index: () => (/* binding */ index),\n/* harmony export */   int: () => (/* binding */ int),\n/* harmony export */   isMySqlSchema: () => (/* binding */ isMySqlSchema),\n/* harmony export */   json: () => (/* binding */ json),\n/* harmony export */   longtext: () => (/* binding */ longtext),\n/* harmony export */   mediumint: () => (/* binding */ mediumint),\n/* harmony export */   mediumtext: () => (/* binding */ mediumtext),\n/* harmony export */   mysqlDatabase: () => (/* binding */ mysqlDatabase),\n/* harmony export */   mysqlEnum: () => (/* binding */ mysqlEnum),\n/* harmony export */   mysqlSchema: () => (/* binding */ mysqlSchema),\n/* harmony export */   mysqlTable: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.v),\n/* harmony export */   mysqlTableCreator: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.w),\n/* harmony export */   mysqlTableWithSchema: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   mysqlView: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.G),\n/* harmony export */   mysqlViewWithSchema: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   primaryKey: () => (/* binding */ primaryKey),\n/* harmony export */   real: () => (/* binding */ real),\n/* harmony export */   serial: () => (/* binding */ serial),\n/* harmony export */   smallint: () => (/* binding */ smallint),\n/* harmony export */   text: () => (/* binding */ text),\n/* harmony export */   time: () => (/* binding */ time),\n/* harmony export */   timestamp: () => (/* binding */ timestamp),\n/* harmony export */   tinyint: () => (/* binding */ tinyint),\n/* harmony export */   tinytext: () => (/* binding */ tinytext),\n/* harmony export */   unique: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.x),\n/* harmony export */   uniqueIndex: () => (/* binding */ uniqueIndex),\n/* harmony export */   uniqueKeyName: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.y),\n/* harmony export */   varbinary: () => (/* binding */ varbinary),\n/* harmony export */   varchar: () => (/* binding */ varchar),\n/* harmony export */   year: () => (/* binding */ year)\n/* harmony export */ });\n/* harmony import */ var _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../alias-cf8e03cd.mjs */ \"(rsc)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs\");\n/* harmony import */ var _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view-23898f21.mjs */ \"(rsc)/./node_modules/drizzle-orm/view-23898f21.mjs\");\n\n\n\nclass MySqlBigInt53Builder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlBigInt53Builder\";\n    }\n    constructor(name){\n        super(name, \"number\", \"MySqlBigInt53\");\n    }\n    /** @internal */ build(table) {\n        return new MySqlBigInt53(table, this.config);\n    }\n}\nclass MySqlBigInt53 extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlBigInt53\";\n    }\n    getSQLType() {\n        return \"bigint\";\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"number\") {\n            return value;\n        }\n        return Number(value);\n    }\n}\nclass MySqlBigInt64Builder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlBigInt64Builder\";\n    }\n    constructor(name){\n        super(name, \"bigint\", \"MySqlBigInt64\");\n    }\n    /** @internal */ build(table) {\n        return new MySqlBigInt64(table, this.config);\n    }\n}\nclass MySqlBigInt64 extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlBigInt64\";\n    }\n    getSQLType() {\n        return \"bigint\";\n    }\n    // eslint-disable-next-line unicorn/prefer-native-coercion-functions\n    mapFromDriverValue(value) {\n        return BigInt(value);\n    }\n}\nfunction bigint(name, config) {\n    if (config.mode === \"number\") {\n        return new MySqlBigInt53Builder(name);\n    }\n    return new MySqlBigInt64Builder(name);\n}\nclass MySqlBinaryBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlBinaryBuilder\";\n    }\n    constructor(name, length){\n        super(name, \"string\", \"MySqlBinary\");\n        this.config.length = length;\n    }\n    /** @internal */ build(table) {\n        return new MySqlBinary(table, this.config);\n    }\n}\nclass MySqlBinary extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlBinary\";\n    }\n    getSQLType() {\n        return this.length === undefined ? `binary` : `binary(${this.length})`;\n    }\n    constructor(...args){\n        super(...args);\n        this.length = this.config.length;\n    }\n}\nfunction binary(name, config = {}) {\n    return new MySqlBinaryBuilder(name, config.length);\n}\nclass MySqlBooleanBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlBooleanBuilder\";\n    }\n    constructor(name){\n        super(name, \"boolean\", \"MySqlBoolean\");\n    }\n    /** @internal */ build(table) {\n        return new MySqlBoolean(table, this.config);\n    }\n}\nclass MySqlBoolean extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlBoolean\";\n    }\n    getSQLType() {\n        return \"boolean\";\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"boolean\") {\n            return value;\n        }\n        return value === 1;\n    }\n}\nfunction boolean(name) {\n    return new MySqlBooleanBuilder(name);\n}\nclass MySqlCharBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlCharBuilder\";\n    }\n    constructor(name, config){\n        super(name, \"string\", \"MySqlChar\");\n        this.config.length = config.length;\n        this.config.enum = config.enum;\n    }\n    /** @internal */ build(table) {\n        return new MySqlChar(table, this.config);\n    }\n}\nclass MySqlChar extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlChar\";\n    }\n    getSQLType() {\n        return this.length === undefined ? `char` : `char(${this.length})`;\n    }\n    constructor(...args){\n        super(...args);\n        this.length = this.config.length;\n        this.enumValues = this.config.enum;\n    }\n}\nfunction char(name, config = {}) {\n    return new MySqlCharBuilder(name, config);\n}\nclass MySqlCustomColumnBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlCustomColumnBuilder\";\n    }\n    constructor(name, fieldConfig, customTypeParams){\n        super(name, \"custom\", \"MySqlCustomColumn\");\n        this.config.fieldConfig = fieldConfig;\n        this.config.customTypeParams = customTypeParams;\n    }\n    /** @internal */ build(table) {\n        return new MySqlCustomColumn(table, this.config);\n    }\n}\nclass MySqlCustomColumn extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlCustomColumn\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n        this.mapTo = config.customTypeParams.toDriver;\n        this.mapFrom = config.customTypeParams.fromDriver;\n    }\n    getSQLType() {\n        return this.sqlName;\n    }\n    mapFromDriverValue(value) {\n        return typeof this.mapFrom === \"function\" ? this.mapFrom(value) : value;\n    }\n    mapToDriverValue(value) {\n        return typeof this.mapTo === \"function\" ? this.mapTo(value) : value;\n    }\n}\n/**\n * Custom mysql database data type generator\n */ function customType(customTypeParams) {\n    return (dbName, fieldConfig)=>{\n        return new MySqlCustomColumnBuilder(dbName, fieldConfig, customTypeParams);\n    };\n}\nclass MySqlDateBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlDateBuilder\";\n    }\n    constructor(name){\n        super(name, \"date\", \"MySqlDate\");\n    }\n    /** @internal */ build(table) {\n        return new MySqlDate(table, this.config);\n    }\n}\nclass MySqlDate extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlDate\";\n    }\n    constructor(table, config){\n        super(table, config);\n    }\n    getSQLType() {\n        return `date`;\n    }\n    mapFromDriverValue(value) {\n        return new Date(value);\n    }\n}\nclass MySqlDateStringBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlDateStringBuilder\";\n    }\n    constructor(name){\n        super(name, \"string\", \"MySqlDateString\");\n    }\n    /** @internal */ build(table) {\n        return new MySqlDateString(table, this.config);\n    }\n}\nclass MySqlDateString extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlDateString\";\n    }\n    constructor(table, config){\n        super(table, config);\n    }\n    getSQLType() {\n        return `date`;\n    }\n}\nfunction date(name, config = {}) {\n    if (config.mode === \"string\") {\n        return new MySqlDateStringBuilder(name);\n    }\n    return new MySqlDateBuilder(name);\n}\nclass MySqlDateTimeBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlDateTimeBuilder\";\n    }\n    constructor(name, config){\n        super(name, \"date\", \"MySqlDateTime\");\n        this.config.fsp = config?.fsp;\n    }\n    /** @internal */ build(table) {\n        return new MySqlDateTime(table, this.config);\n    }\n}\nclass MySqlDateTime extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlDateTime\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.fsp = config.fsp;\n    }\n    getSQLType() {\n        const precision = this.fsp === undefined ? \"\" : `(${this.fsp})`;\n        return `datetime${precision}`;\n    }\n    mapToDriverValue(value) {\n        return value.toISOString().replace(\"T\", \" \").replace(\"Z\", \"\");\n    }\n    mapFromDriverValue(value) {\n        return new Date(value.replace(\" \", \"T\") + \"Z\");\n    }\n}\nclass MySqlDateTimeStringBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlDateTimeStringBuilder\";\n    }\n    constructor(name, config){\n        super(name, \"string\", \"MySqlDateTimeString\");\n        this.config.fsp = config?.fsp;\n    }\n    /** @internal */ build(table) {\n        return new MySqlDateTimeString(table, this.config);\n    }\n}\nclass MySqlDateTimeString extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlDateTimeString\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.fsp = config.fsp;\n    }\n    getSQLType() {\n        const precision = this.fsp === undefined ? \"\" : `(${this.fsp})`;\n        return `datetime${precision}`;\n    }\n}\nfunction datetime(name, config = {}) {\n    if (config.mode === \"string\") {\n        return new MySqlDateTimeStringBuilder(name, config);\n    }\n    return new MySqlDateTimeBuilder(name, config);\n}\nclass MySqlDecimalBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlDecimalBuilder\";\n    }\n    constructor(name, precision, scale){\n        super(name, \"string\", \"MySqlDecimal\");\n        this.config.precision = precision;\n        this.config.scale = scale;\n    }\n    /** @internal */ build(table) {\n        return new MySqlDecimal(table, this.config);\n    }\n}\nclass MySqlDecimal extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlDecimal\";\n    }\n    getSQLType() {\n        if (this.precision !== undefined && this.scale !== undefined) {\n            return `decimal(${this.precision},${this.scale})`;\n        } else if (this.precision === undefined) {\n            return \"decimal\";\n        } else {\n            return `decimal(${this.precision})`;\n        }\n    }\n    constructor(...args){\n        super(...args);\n        this.precision = this.config.precision;\n        this.scale = this.config.scale;\n    }\n}\nfunction decimal(name, config = {}) {\n    return new MySqlDecimalBuilder(name, config.precision, config.scale);\n}\nclass MySqlDoubleBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlDoubleBuilder\";\n    }\n    constructor(name, config){\n        super(name, \"number\", \"MySqlDouble\");\n        this.config.precision = config?.precision;\n        this.config.scale = config?.scale;\n    }\n    /** @internal */ build(table) {\n        return new MySqlDouble(table, this.config);\n    }\n}\nclass MySqlDouble extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlDouble\";\n    }\n    getSQLType() {\n        if (this.precision !== undefined && this.scale !== undefined) {\n            return `double(${this.precision},${this.scale})`;\n        } else if (this.precision === undefined) {\n            return \"double\";\n        } else {\n            return `double(${this.precision})`;\n        }\n    }\n    constructor(...args){\n        super(...args);\n        this.precision = this.config.precision;\n        this.scale = this.config.scale;\n    }\n}\nfunction double(name, config) {\n    return new MySqlDoubleBuilder(name, config);\n}\nclass MySqlEnumColumnBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlEnumColumnBuilder\";\n    }\n    constructor(name, values){\n        super(name, \"string\", \"MySqlEnumColumn\");\n        this.config.enumValues = values;\n    }\n    /** @internal */ build(table) {\n        return new MySqlEnumColumn(table, this.config);\n    }\n}\nclass MySqlEnumColumn extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlEnumColumn\";\n    }\n    getSQLType() {\n        return `enum(${this.enumValues.map((value)=>`'${value}'`).join(\",\")})`;\n    }\n    constructor(...args){\n        super(...args);\n        this.enumValues = this.config.enumValues;\n    }\n}\nfunction mysqlEnum(name, values) {\n    if (values.length === 0) {\n        throw new Error(`You have an empty array for \"${name}\" enum values`);\n    }\n    return new MySqlEnumColumnBuilder(name, values);\n}\nclass MySqlFloatBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlFloatBuilder\";\n    }\n    constructor(name){\n        super(name, \"number\", \"MySqlFloat\");\n    }\n    /** @internal */ build(table) {\n        return new MySqlFloat(table, this.config);\n    }\n}\nclass MySqlFloat extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlFloat\";\n    }\n    getSQLType() {\n        return \"float\";\n    }\n}\nfunction float(name) {\n    return new MySqlFloatBuilder(name);\n}\nclass MySqlIntBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlIntBuilder\";\n    }\n    constructor(name){\n        super(name, \"number\", \"MySqlInt\");\n    }\n    /** @internal */ build(table) {\n        return new MySqlInt(table, this.config);\n    }\n}\nclass MySqlInt extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlInt\";\n    }\n    getSQLType() {\n        return \"int\";\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            return Number(value);\n        }\n        return value;\n    }\n}\nfunction int(name) {\n    return new MySqlIntBuilder(name);\n}\nclass MySqlJsonBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlJsonBuilder\";\n    }\n    constructor(name){\n        super(name, \"json\", \"MySqlJson\");\n    }\n    /** @internal */ build(table) {\n        return new MySqlJson(table, this.config);\n    }\n}\nclass MySqlJson extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlJson\";\n    }\n    getSQLType() {\n        return \"json\";\n    }\n    mapToDriverValue(value) {\n        return JSON.stringify(value);\n    }\n}\nfunction json(name) {\n    return new MySqlJsonBuilder(name);\n}\nclass MySqlMediumIntBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlMediumIntBuilder\";\n    }\n    constructor(name){\n        super(name, \"number\", \"MySqlMediumInt\");\n    }\n    /** @internal */ build(table) {\n        return new MySqlMediumInt(table, this.config);\n    }\n}\nclass MySqlMediumInt extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlMediumInt\";\n    }\n    getSQLType() {\n        return \"mediumint\";\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            return Number(value);\n        }\n        return value;\n    }\n}\nfunction mediumint(name) {\n    return new MySqlMediumIntBuilder(name);\n}\nclass MySqlRealBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlRealBuilder\";\n    }\n    constructor(name, config){\n        super(name, \"number\", \"MySqlReal\");\n        this.config.precision = config?.precision;\n        this.config.scale = config?.scale;\n    }\n    /** @internal */ build(table) {\n        return new MySqlReal(table, this.config);\n    }\n}\nclass MySqlReal extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlReal\";\n    }\n    getSQLType() {\n        if (this.precision !== undefined && this.scale !== undefined) {\n            return `real(${this.precision}, ${this.scale})`;\n        } else if (this.precision === undefined) {\n            return \"real\";\n        } else {\n            return `real(${this.precision})`;\n        }\n    }\n    constructor(...args){\n        super(...args);\n        this.precision = this.config.precision;\n        this.scale = this.config.scale;\n    }\n}\nfunction real(name, config = {}) {\n    return new MySqlRealBuilder(name, config);\n}\nclass MySqlSerialBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlSerialBuilder\";\n    }\n    constructor(name){\n        super(name, \"number\", \"MySqlSerial\");\n        this.config.hasDefault = true;\n        this.config.autoIncrement = true;\n    }\n    /** @internal */ build(table) {\n        return new MySqlSerial(table, this.config);\n    }\n}\nclass MySqlSerial extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlSerial\";\n    }\n    getSQLType() {\n        return \"serial\";\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            return Number(value);\n        }\n        return value;\n    }\n}\nfunction serial(name) {\n    return new MySqlSerialBuilder(name);\n}\nclass MySqlSmallIntBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlSmallIntBuilder\";\n    }\n    constructor(name){\n        super(name, \"number\", \"MySqlSmallInt\");\n    }\n    /** @internal */ build(table) {\n        return new MySqlSmallInt(table, this.config);\n    }\n}\nclass MySqlSmallInt extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlSmallInt\";\n    }\n    getSQLType() {\n        return \"smallint\";\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            return Number(value);\n        }\n        return value;\n    }\n}\nfunction smallint(name) {\n    return new MySqlSmallIntBuilder(name);\n}\nclass MySqlTextBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlTextBuilder\";\n    }\n    constructor(name, textType, config){\n        super(name, \"string\", \"MySqlText\");\n        this.config.textType = textType;\n        this.config.enumValues = config.enum;\n    }\n    /** @internal */ build(table) {\n        return new MySqlText(table, this.config);\n    }\n}\nclass MySqlText extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlText\";\n    }\n    getSQLType() {\n        return this.textType;\n    }\n    constructor(...args){\n        super(...args);\n        this.textType = this.config.textType;\n        this.enumValues = this.config.enumValues;\n    }\n}\nfunction text(name, config = {}) {\n    return new MySqlTextBuilder(name, \"text\", config);\n}\nfunction tinytext(name, config = {}) {\n    return new MySqlTextBuilder(name, \"tinytext\", config);\n}\nfunction mediumtext(name, config = {}) {\n    return new MySqlTextBuilder(name, \"mediumtext\", config);\n}\nfunction longtext(name, config = {}) {\n    return new MySqlTextBuilder(name, \"longtext\", config);\n}\nclass MySqlTimeBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlTimeBuilder\";\n    }\n    constructor(name, config){\n        super(name, \"string\", \"MySqlTime\");\n        this.config.fsp = config?.fsp;\n    }\n    /** @internal */ build(table) {\n        return new MySqlTime(table, this.config);\n    }\n}\nclass MySqlTime extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlTime\";\n    }\n    getSQLType() {\n        const precision = this.fsp === undefined ? \"\" : `(${this.fsp})`;\n        return `time${precision}`;\n    }\n    constructor(...args){\n        super(...args);\n        this.fsp = this.config.fsp;\n    }\n}\nfunction time(name, config) {\n    return new MySqlTimeBuilder(name, config);\n}\nclass MySqlDateColumnBaseBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlDateColumnBuilder\";\n    }\n    defaultNow() {\n        return this.default(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.s`(now())`);\n    }\n    // \"on update now\" also adds an implicit default value to the column - https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html\n    onUpdateNow() {\n        this.config.hasOnUpdateNow = true;\n        this.config.hasDefault = true;\n        return this;\n    }\n}\nclass MySqlDateBaseColumn extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlDateColumn\";\n    }\n    constructor(...args){\n        super(...args);\n        this.hasOnUpdateNow = this.config.hasOnUpdateNow;\n    }\n}\nclass MySqlTimestampBuilder extends MySqlDateColumnBaseBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlTimestampBuilder\";\n    }\n    constructor(name, config){\n        super(name, \"date\", \"MySqlTimestamp\");\n        this.config.fsp = config?.fsp;\n    }\n    /** @internal */ build(table) {\n        return new MySqlTimestamp(table, this.config);\n    }\n}\nclass MySqlTimestamp extends MySqlDateBaseColumn {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlTimestamp\";\n    }\n    getSQLType() {\n        const precision = this.fsp === undefined ? \"\" : `(${this.fsp})`;\n        return `timestamp${precision}`;\n    }\n    mapFromDriverValue(value) {\n        return new Date(value + \"+0000\");\n    }\n    mapToDriverValue(value) {\n        return value.toISOString().slice(0, -1).replace(\"T\", \" \");\n    }\n    constructor(...args){\n        super(...args);\n        this.fsp = this.config.fsp;\n    }\n}\nclass MySqlTimestampStringBuilder extends MySqlDateColumnBaseBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlTimestampStringBuilder\";\n    }\n    constructor(name, config){\n        super(name, \"string\", \"MySqlTimestampString\");\n        this.config.fsp = config?.fsp;\n    }\n    /** @internal */ build(table) {\n        return new MySqlTimestampString(table, this.config);\n    }\n}\nclass MySqlTimestampString extends MySqlDateBaseColumn {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlTimestampString\";\n    }\n    getSQLType() {\n        const precision = this.fsp === undefined ? \"\" : `(${this.fsp})`;\n        return `timestamp${precision}`;\n    }\n    constructor(...args){\n        super(...args);\n        this.fsp = this.config.fsp;\n    }\n}\nfunction timestamp(name, config = {}) {\n    if (config.mode === \"string\") {\n        return new MySqlTimestampStringBuilder(name, config);\n    }\n    return new MySqlTimestampBuilder(name, config);\n}\nclass MySqlTinyIntBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlTinyIntBuilder\";\n    }\n    constructor(name){\n        super(name, \"number\", \"MySqlTinyInt\");\n    }\n    /** @internal */ build(table) {\n        return new MySqlTinyInt(table, this.config);\n    }\n}\nclass MySqlTinyInt extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlTinyInt\";\n    }\n    getSQLType() {\n        return \"tinyint\";\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            return Number(value);\n        }\n        return value;\n    }\n}\nfunction tinyint(name) {\n    return new MySqlTinyIntBuilder(name);\n}\nclass MySqlVarBinaryBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlVarBinaryBuilder\";\n    }\n    /** @internal */ constructor(name, config){\n        super(name, \"string\", \"MySqlVarBinary\");\n        this.config.length = config?.length;\n    }\n    /** @internal */ build(table) {\n        return new MySqlVarBinary(table, this.config);\n    }\n}\nclass MySqlVarBinary extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlVarBinary\";\n    }\n    getSQLType() {\n        return this.length === undefined ? `varbinary` : `varbinary(${this.length})`;\n    }\n    constructor(...args){\n        super(...args);\n        this.length = this.config.length;\n    }\n}\nfunction varbinary(name, options) {\n    return new MySqlVarBinaryBuilder(name, options);\n}\nclass MySqlVarCharBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlVarCharBuilder\";\n    }\n    /** @internal */ constructor(name, config){\n        super(name, \"string\", \"MySqlVarChar\");\n        this.config.length = config.length;\n        this.config.enum = config.enum;\n    }\n    /** @internal */ build(table) {\n        return new MySqlVarChar(table, this.config);\n    }\n}\nclass MySqlVarChar extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlVarChar\";\n    }\n    getSQLType() {\n        return this.length === undefined ? `varchar` : `varchar(${this.length})`;\n    }\n    constructor(...args){\n        super(...args);\n        this.length = this.config.length;\n        this.enumValues = this.config.enum;\n    }\n}\nfunction varchar(name, config) {\n    return new MySqlVarCharBuilder(name, config);\n}\nclass MySqlYearBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlYearBuilder\";\n    }\n    constructor(name){\n        super(name, \"number\", \"MySqlYear\");\n    }\n    /** @internal */ build(table) {\n        return new MySqlYear(table, this.config);\n    }\n}\nclass MySqlYear extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlYear\";\n    }\n    getSQLType() {\n        return `year`;\n    }\n}\nfunction year(name) {\n    return new MySqlYearBuilder(name);\n}\nfunction alias(table, alias) {\n    return new Proxy(table, new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.n(alias, false));\n}\nclass CheckBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlCheckBuilder\";\n    }\n    constructor(name, value){\n        this.name = name;\n        this.value = value;\n    }\n    /** @internal */ build(table) {\n        return new Check(table, this);\n    }\n}\nclass Check {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlCheck\";\n    }\n    constructor(table, builder){\n        this.table = table;\n        this.name = builder.name;\n        this.value = builder.value;\n    }\n}\nfunction check(name, value) {\n    return new CheckBuilder(name, value);\n}\nclass IndexBuilderOn {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlIndexBuilderOn\";\n    }\n    constructor(name, unique){\n        this.name = name;\n        this.unique = unique;\n    }\n    on(...columns) {\n        return new IndexBuilder(this.name, columns, this.unique);\n    }\n}\nclass IndexBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlIndexBuilder\";\n    }\n    constructor(name, columns, unique){\n        this.config = {\n            name,\n            columns,\n            unique\n        };\n    }\n    using(using) {\n        this.config.using = using;\n        return this;\n    }\n    algorythm(algorythm) {\n        this.config.algorythm = algorythm;\n        return this;\n    }\n    lock(lock) {\n        this.config.lock = lock;\n        return this;\n    }\n    /** @internal */ build(table) {\n        return new Index(this.config, table);\n    }\n}\nclass Index {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlIndex\";\n    }\n    constructor(config, table){\n        this.config = {\n            ...config,\n            table\n        };\n    }\n}\nfunction index(name) {\n    return new IndexBuilderOn(name, false);\n}\nfunction uniqueIndex(name) {\n    return new IndexBuilderOn(name, true);\n}\nfunction primaryKey(...columns) {\n    return new PrimaryKeyBuilder(columns);\n}\nclass PrimaryKeyBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlPrimaryKeyBuilder\";\n    }\n    constructor(columns){\n        this.columns = columns;\n    }\n    /** @internal */ build(table) {\n        return new PrimaryKey(table, this.columns);\n    }\n}\nclass PrimaryKey {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlPrimaryKey\";\n    }\n    constructor(table, columns){\n        this.table = table;\n        this.columns = columns;\n    }\n    getName() {\n        return `${this.table[_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.h.Symbol.Name]}_${this.columns.map((column)=>column.name).join(\"_\")}_pk`;\n    }\n}\nclass MySqlSchema {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"MySqlSchema\";\n    }\n    constructor(schemaName){\n        this.table = (name, columns, extraConfig)=>{\n            return (0,_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.m)(name, columns, extraConfig, this.schemaName);\n        };\n        this.view = (name, columns)=>{\n            return (0,_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(name, columns, this.schemaName);\n        };\n        this.schemaName = schemaName;\n    }\n}\n/** @deprecated - use `instanceof MySqlSchema` */ function isMySqlSchema(obj) {\n    return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(obj, MySqlSchema);\n}\n/**\n * Create a MySQL schema.\n * https://dev.mysql.com/doc/refman/8.0/en/create-database.html\n *\n * @param name mysql use schema name\n * @returns MySQL schema\n */ function mysqlDatabase(name) {\n    return new MySqlSchema(name);\n}\n/**\n * @see mysqlDatabase\n */ const mysqlSchema = mysqlDatabase;\nfunction getTableConfig(table) {\n    const columns = Object.values(table[_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.h.Symbol.Columns]);\n    const indexes = [];\n    const checks = [];\n    const primaryKeys = [];\n    const uniqueConstraints = [];\n    const foreignKeys = Object.values(table[_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.h.Symbol.InlineForeignKeys]);\n    const name = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.T.Symbol.Name];\n    const schema = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.T.Symbol.Schema];\n    const baseName = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.T.Symbol.BaseName];\n    const extraConfigBuilder = table[_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.h.Symbol.ExtraConfigBuilder];\n    if (extraConfigBuilder !== undefined) {\n        const extraConfig = extraConfigBuilder(table[_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.h.Symbol.Columns]);\n        for (const builder of Object.values(extraConfig)){\n            if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(builder, IndexBuilder)) {\n                indexes.push(builder.build(table));\n            } else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(builder, CheckBuilder)) {\n                checks.push(builder.build(table));\n            } else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(builder, _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.U)) {\n                uniqueConstraints.push(builder.build(table));\n            } else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(builder, PrimaryKeyBuilder)) {\n                primaryKeys.push(builder.build(table));\n            } else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(builder, _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.F)) {\n                foreignKeys.push(builder.build(table));\n            }\n        }\n    }\n    return {\n        columns,\n        indexes,\n        foreignKeys,\n        checks,\n        primaryKeys,\n        uniqueConstraints,\n        name,\n        schema,\n        baseName\n    };\n}\nfunction getViewConfig(view) {\n    return {\n        ...view[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.V],\n        ...view[_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.j]\n    };\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/drizzle-orm/mysql-core/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/drizzle-orm/planetscale-serverless/index.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/drizzle-orm/planetscale-serverless/index.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlanetScalePreparedQuery: () => (/* binding */ PlanetScalePreparedQuery),\n/* harmony export */   PlanetScaleTransaction: () => (/* binding */ PlanetScaleTransaction),\n/* harmony export */   PlanetscaleSession: () => (/* binding */ PlanetscaleSession),\n/* harmony export */   drizzle: () => (/* binding */ drizzle)\n/* harmony export */ });\n/* harmony import */ var _index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index.mjs */ \"(rsc)/./node_modules/drizzle-orm/index.mjs\");\n/* harmony import */ var _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view-23898f21.mjs */ \"(rsc)/./node_modules/drizzle-orm/view-23898f21.mjs\");\n/* harmony import */ var _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../alias-cf8e03cd.mjs */ \"(rsc)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs\");\n\n\n\nclass PlanetScalePreparedQuery extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.P {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"PlanetScalePreparedQuery\";\n    }\n    constructor(client, queryString, params, logger, fields, customResultMapper){\n        super();\n        this.rawQuery = {\n            as: \"object\"\n        };\n        this.query = {\n            as: \"array\"\n        };\n        this.client = client;\n        this.queryString = queryString;\n        this.params = params;\n        this.logger = logger;\n        this.fields = fields;\n        this.customResultMapper = customResultMapper;\n    }\n    async execute(placeholderValues = {}) {\n        const params = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(this.params, placeholderValues);\n        this.logger.logQuery(this.queryString, params);\n        const { fields, client, queryString, rawQuery, query, joinsNotNullableMap, customResultMapper } = this;\n        if (!fields && !customResultMapper) {\n            return client.execute(queryString, params, rawQuery);\n        }\n        const { rows } = await client.execute(queryString, params, query);\n        if (customResultMapper) {\n            return customResultMapper(rows);\n        }\n        return rows.map((row)=>(0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(fields, row, joinsNotNullableMap));\n    }\n    iterator(_placeholderValues) {\n        throw new Error(\"Streaming is not supported by the PlanetScale Serverless driver\");\n    }\n}\nclass PlanetscaleSession extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.M {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"PlanetscaleSession\";\n    }\n    constructor(baseClient, dialect, tx, schema, options = {}){\n        super(dialect);\n        this.baseClient = baseClient;\n        this.schema = schema;\n        this.options = options;\n        this.client = tx ?? baseClient;\n        this.logger = options.logger ?? new _index_mjs__WEBPACK_IMPORTED_MODULE_2__.NoopLogger();\n    }\n    prepareQuery(query, fields, customResultMapper) {\n        return new PlanetScalePreparedQuery(this.client, query.sql, query.params, this.logger, fields, customResultMapper);\n    }\n    async query(query, params) {\n        this.logger.logQuery(query, params);\n        return await this.client.execute(query, params, {\n            as: \"array\"\n        });\n    }\n    async queryObjects(query, params) {\n        return this.client.execute(query, params, {\n            as: \"object\"\n        });\n    }\n    all(query) {\n        const querySql = this.dialect.sqlToQuery(query);\n        this.logger.logQuery(querySql.sql, querySql.params);\n        return this.client.execute(querySql.sql, querySql.params, {\n            as: \"object\"\n        }).then((eQuery)=>eQuery.rows);\n    }\n    transaction(transaction) {\n        return this.baseClient.transaction((pstx)=>{\n            const session = new PlanetscaleSession(this.baseClient, this.dialect, pstx, this.schema, this.options);\n            const tx = new PlanetScaleTransaction(this.dialect, session, this.schema);\n            return transaction(tx);\n        });\n    }\n}\nclass PlanetScaleTransaction extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.a {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"PlanetScaleTransaction\";\n    }\n    constructor(dialect, session, schema, nestedIndex = 0){\n        super(dialect, session, schema, nestedIndex, \"planetscale\");\n    }\n    async transaction(transaction) {\n        const savepointName = `sp${this.nestedIndex + 1}`;\n        const tx = new PlanetScaleTransaction(this.dialect, this.session, this.schema, this.nestedIndex + 1);\n        await tx.execute(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.s.raw(`savepoint ${savepointName}`));\n        try {\n            const result = await transaction(tx);\n            await tx.execute(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.s.raw(`release savepoint ${savepointName}`));\n            return result;\n        } catch (err) {\n            await tx.execute(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.s.raw(`rollback to savepoint ${savepointName}`));\n            throw err;\n        }\n    }\n}\nfunction drizzle(client, config = {}) {\n    const dialect = new _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.c();\n    let logger;\n    if (config.logger === true) {\n        logger = new _index_mjs__WEBPACK_IMPORTED_MODULE_2__.DefaultLogger();\n    } else if (config.logger !== false) {\n        logger = config.logger;\n    }\n    let schema;\n    if (config.schema) {\n        const tablesConfig = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(config.schema, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.c);\n        schema = {\n            fullSchema: config.schema,\n            schema: tablesConfig.tables,\n            tableNamesMap: tablesConfig.tableNamesMap\n        };\n    }\n    const session = new PlanetscaleSession(client, dialect, undefined, schema, {\n        logger\n    });\n    return new _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.b(dialect, session, schema, \"planetscale\");\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZHJpenpsZS1vcm0vcGxhbmV0c2NhbGUtc2VydmVybGVzcy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF5RDtBQUNrRjtBQUN1QztBQUVsTCxNQUFNc0IsaUNBQWlDbkIsaURBQWFBOztZQU96QyxDQUFDVSxrREFBVUEsQ0FBQyxHQUFHOztJQUd0QlUsWUFBWUMsTUFBTSxFQUFFQyxXQUFXLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLGtCQUFrQixDQUFFO1FBQ3pFLEtBQUs7YUFIVEMsV0FBVztZQUFFQyxJQUFJO1FBQVM7YUFDMUJDLFFBQVE7WUFBRUQsSUFBSTtRQUFRO1FBR2xCLElBQUksQ0FBQ1AsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0MsV0FBVyxHQUFHQTtRQUNuQixJQUFJLENBQUNDLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNDLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNDLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNDLGtCQUFrQixHQUFHQTtJQUM5QjtJQUNBLE1BQU1JLFFBQVFDLG9CQUFvQixDQUFDLENBQUMsRUFBRTtRQUNsQyxNQUFNUixTQUFTWCxzREFBZ0JBLENBQUMsSUFBSSxDQUFDVyxNQUFNLEVBQUVRO1FBQzdDLElBQUksQ0FBQ1AsTUFBTSxDQUFDUSxRQUFRLENBQUMsSUFBSSxDQUFDVixXQUFXLEVBQUVDO1FBQ3ZDLE1BQU0sRUFBRUUsTUFBTSxFQUFFSixNQUFNLEVBQUVDLFdBQVcsRUFBRUssUUFBUSxFQUFFRSxLQUFLLEVBQUVJLG1CQUFtQixFQUFFUCxrQkFBa0IsRUFBRSxHQUFHLElBQUk7UUFDdEcsSUFBSSxDQUFDRCxVQUFVLENBQUNDLG9CQUFvQjtZQUNoQyxPQUFPTCxPQUFPUyxPQUFPLENBQUNSLGFBQWFDLFFBQVFJO1FBQy9DO1FBQ0EsTUFBTSxFQUFFTyxJQUFJLEVBQUUsR0FBRyxNQUFNYixPQUFPUyxPQUFPLENBQUNSLGFBQWFDLFFBQVFNO1FBQzNELElBQUlILG9CQUFvQjtZQUNwQixPQUFPQSxtQkFBbUJRO1FBQzlCO1FBQ0EsT0FBT0EsS0FBS0MsR0FBRyxDQUFDLENBQUNDLE1BQVF0QixzREFBWUEsQ0FBQ1csUUFBUVcsS0FBS0g7SUFDdkQ7SUFDQUksU0FBU0Msa0JBQWtCLEVBQUU7UUFDekIsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0FBQ0o7QUFDQSxNQUFNQywyQkFBMkJ0QyxpREFBWUE7O1lBSWxDLENBQUNRLGtEQUFVQSxDQUFDLEdBQUc7O0lBR3RCVSxZQUFZcUIsVUFBVSxFQUFFQyxPQUFPLEVBQUVDLEVBQUUsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLENBQUMsQ0FBQyxDQUFFO1FBQ3ZELEtBQUssQ0FBQ0g7UUFDTixJQUFJLENBQUNELFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDRyxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDeEIsTUFBTSxHQUFHc0IsTUFBTUY7UUFDcEIsSUFBSSxDQUFDakIsTUFBTSxHQUFHcUIsUUFBUXJCLE1BQU0sSUFBSSxJQUFJM0Isa0RBQVVBO0lBQ2xEO0lBQ0FpRCxhQUFhakIsS0FBSyxFQUFFSixNQUFNLEVBQUVDLGtCQUFrQixFQUFFO1FBQzVDLE9BQU8sSUFBSVAseUJBQXlCLElBQUksQ0FBQ0UsTUFBTSxFQUFFUSxNQUFNYixHQUFHLEVBQUVhLE1BQU1OLE1BQU0sRUFBRSxJQUFJLENBQUNDLE1BQU0sRUFBRUMsUUFBUUM7SUFDbkc7SUFDQSxNQUFNRyxNQUFNQSxLQUFLLEVBQUVOLE1BQU0sRUFBRTtRQUN2QixJQUFJLENBQUNDLE1BQU0sQ0FBQ1EsUUFBUSxDQUFDSCxPQUFPTjtRQUM1QixPQUFPLE1BQU0sSUFBSSxDQUFDRixNQUFNLENBQUNTLE9BQU8sQ0FBQ0QsT0FBT04sUUFBUTtZQUFFSyxJQUFJO1FBQVE7SUFDbEU7SUFDQSxNQUFNbUIsYUFBYWxCLEtBQUssRUFBRU4sTUFBTSxFQUFFO1FBQzlCLE9BQU8sSUFBSSxDQUFDRixNQUFNLENBQUNTLE9BQU8sQ0FBQ0QsT0FBT04sUUFBUTtZQUFFSyxJQUFJO1FBQVM7SUFDN0Q7SUFDQW9CLElBQUluQixLQUFLLEVBQUU7UUFDUCxNQUFNb0IsV0FBVyxJQUFJLENBQUNQLE9BQU8sQ0FBQ1EsVUFBVSxDQUFDckI7UUFDekMsSUFBSSxDQUFDTCxNQUFNLENBQUNRLFFBQVEsQ0FBQ2lCLFNBQVNqQyxHQUFHLEVBQUVpQyxTQUFTMUIsTUFBTTtRQUNsRCxPQUFPLElBQUksQ0FBQ0YsTUFBTSxDQUFDUyxPQUFPLENBQUNtQixTQUFTakMsR0FBRyxFQUFFaUMsU0FBUzFCLE1BQU0sRUFBRTtZQUFFSyxJQUFJO1FBQVMsR0FBR3VCLElBQUksQ0FBQyxDQUFDQyxTQUFXQSxPQUFPbEIsSUFBSTtJQUM1RztJQUNBbUIsWUFBWUEsV0FBVyxFQUFFO1FBQ3JCLE9BQU8sSUFBSSxDQUFDWixVQUFVLENBQUNZLFdBQVcsQ0FBQyxDQUFDQztZQUNoQyxNQUFNQyxVQUFVLElBQUlmLG1CQUFtQixJQUFJLENBQUNDLFVBQVUsRUFBRSxJQUFJLENBQUNDLE9BQU8sRUFBRVksTUFBTSxJQUFJLENBQUNWLE1BQU0sRUFBRSxJQUFJLENBQUNDLE9BQU87WUFDckcsTUFBTUYsS0FBSyxJQUFJYSx1QkFBdUIsSUFBSSxDQUFDZCxPQUFPLEVBQUVhLFNBQVMsSUFBSSxDQUFDWCxNQUFNO1lBQ3hFLE9BQU9TLFlBQVlWO1FBQ3ZCO0lBQ0o7QUFDSjtBQUNBLE1BQU1hLCtCQUErQnBELGlEQUFnQkE7O1lBQzFDLENBQUNNLGtEQUFVQSxDQUFDLEdBQUc7O0lBQ3RCVSxZQUFZc0IsT0FBTyxFQUFFYSxPQUFPLEVBQUVYLE1BQU0sRUFBRWEsY0FBYyxDQUFDLENBQUU7UUFDbkQsS0FBSyxDQUFDZixTQUFTYSxTQUFTWCxRQUFRYSxhQUFhO0lBQ2pEO0lBQ0EsTUFBTUosWUFBWUEsV0FBVyxFQUFFO1FBQzNCLE1BQU1LLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUNELFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDakQsTUFBTWQsS0FBSyxJQUFJYSx1QkFBdUIsSUFBSSxDQUFDZCxPQUFPLEVBQUUsSUFBSSxDQUFDYSxPQUFPLEVBQUUsSUFBSSxDQUFDWCxNQUFNLEVBQUUsSUFBSSxDQUFDYSxXQUFXLEdBQUc7UUFDbEcsTUFBTWQsR0FBR2IsT0FBTyxDQUFDZCxrREFBR0EsQ0FBQzJDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRUQsY0FBYyxDQUFDO1FBQ3JELElBQUk7WUFDQSxNQUFNRSxTQUFTLE1BQU1QLFlBQVlWO1lBQ2pDLE1BQU1BLEdBQUdiLE9BQU8sQ0FBQ2Qsa0RBQUdBLENBQUMyQyxHQUFHLENBQUMsQ0FBQyxrQkFBa0IsRUFBRUQsY0FBYyxDQUFDO1lBQzdELE9BQU9FO1FBQ1gsRUFDQSxPQUFPQyxLQUFLO1lBQ1IsTUFBTWxCLEdBQUdiLE9BQU8sQ0FBQ2Qsa0RBQUdBLENBQUMyQyxHQUFHLENBQUMsQ0FBQyxzQkFBc0IsRUFBRUQsY0FBYyxDQUFDO1lBQ2pFLE1BQU1HO1FBQ1Y7SUFDSjtBQUNKO0FBRUEsU0FBU0MsUUFBUXpDLE1BQU0sRUFBRTBDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hDLE1BQU1yQixVQUFVLElBQUlsQyxpREFBWUE7SUFDaEMsSUFBSWdCO0lBQ0osSUFBSXVDLE9BQU92QyxNQUFNLEtBQUssTUFBTTtRQUN4QkEsU0FBUyxJQUFJMUIscURBQWFBO0lBQzlCLE9BQ0ssSUFBSWlFLE9BQU92QyxNQUFNLEtBQUssT0FBTztRQUM5QkEsU0FBU3VDLE9BQU92QyxNQUFNO0lBQzFCO0lBQ0EsSUFBSW9CO0lBQ0osSUFBSW1CLE9BQU9uQixNQUFNLEVBQUU7UUFDZixNQUFNb0IsZUFBZS9DLHNEQUE2QkEsQ0FBQzhDLE9BQU9uQixNQUFNLEVBQUUxQixrREFBMkJBO1FBQzdGMEIsU0FBUztZQUNMcUIsWUFBWUYsT0FBT25CLE1BQU07WUFDekJBLFFBQVFvQixhQUFhRSxNQUFNO1lBQzNCQyxlQUFlSCxhQUFhRyxhQUFhO1FBQzdDO0lBQ0o7SUFDQSxNQUFNWixVQUFVLElBQUlmLG1CQUFtQm5CLFFBQVFxQixTQUFTMEIsV0FBV3hCLFFBQVE7UUFBRXBCO0lBQU87SUFDcEYsT0FBTyxJQUFJbEIsaURBQWFBLENBQUNvQyxTQUFTYSxTQUFTWCxRQUFRO0FBQ3ZEO0FBRXlGLENBQ3pGLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbS8uL25vZGVfbW9kdWxlcy9kcml6emxlLW9ybS9wbGFuZXRzY2FsZS1zZXJ2ZXJsZXNzL2luZGV4Lm1qcz8wNTg2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vb3BMb2dnZXIsIERlZmF1bHRMb2dnZXIgfSBmcm9tICcuLi9pbmRleC5tanMnO1xuaW1wb3J0IHsgUCBhcyBQcmVwYXJlZFF1ZXJ5LCBNIGFzIE15U3FsU2Vzc2lvbiwgYSBhcyBNeVNxbFRyYW5zYWN0aW9uLCBiIGFzIE15U3FsRGF0YWJhc2UsIGMgYXMgTXlTcWxEaWFsZWN0IH0gZnJvbSAnLi4vdmlldy0yMzg5OGYyMS5tanMnO1xuaW1wb3J0IHsgZSBhcyBlbnRpdHlLaW5kLCBmIGFzIGZpbGxQbGFjZWhvbGRlcnMsIG0gYXMgbWFwUmVzdWx0Um93LCBzIGFzIHNxbCwgYSBhcyBleHRyYWN0VGFibGVzUmVsYXRpb25hbENvbmZpZywgYyBhcyBjcmVhdGVUYWJsZVJlbGF0aW9uc0hlbHBlcnMgfSBmcm9tICcuLi9hbGlhcy1jZjhlMDNjZC5tanMnO1xuXG5jbGFzcyBQbGFuZXRTY2FsZVByZXBhcmVkUXVlcnkgZXh0ZW5kcyBQcmVwYXJlZFF1ZXJ5IHtcbiAgICBjbGllbnQ7XG4gICAgcXVlcnlTdHJpbmc7XG4gICAgcGFyYW1zO1xuICAgIGxvZ2dlcjtcbiAgICBmaWVsZHM7XG4gICAgY3VzdG9tUmVzdWx0TWFwcGVyO1xuICAgIHN0YXRpYyBbZW50aXR5S2luZF0gPSAnUGxhbmV0U2NhbGVQcmVwYXJlZFF1ZXJ5JztcbiAgICByYXdRdWVyeSA9IHsgYXM6ICdvYmplY3QnIH07XG4gICAgcXVlcnkgPSB7IGFzOiAnYXJyYXknIH07XG4gICAgY29uc3RydWN0b3IoY2xpZW50LCBxdWVyeVN0cmluZywgcGFyYW1zLCBsb2dnZXIsIGZpZWxkcywgY3VzdG9tUmVzdWx0TWFwcGVyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgICAgICB0aGlzLnF1ZXJ5U3RyaW5nID0gcXVlcnlTdHJpbmc7XG4gICAgICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICAgICAgdGhpcy5maWVsZHMgPSBmaWVsZHM7XG4gICAgICAgIHRoaXMuY3VzdG9tUmVzdWx0TWFwcGVyID0gY3VzdG9tUmVzdWx0TWFwcGVyO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHBsYWNlaG9sZGVyVmFsdWVzID0ge30pIHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gZmlsbFBsYWNlaG9sZGVycyh0aGlzLnBhcmFtcywgcGxhY2Vob2xkZXJWYWx1ZXMpO1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2dRdWVyeSh0aGlzLnF1ZXJ5U3RyaW5nLCBwYXJhbXMpO1xuICAgICAgICBjb25zdCB7IGZpZWxkcywgY2xpZW50LCBxdWVyeVN0cmluZywgcmF3UXVlcnksIHF1ZXJ5LCBqb2luc05vdE51bGxhYmxlTWFwLCBjdXN0b21SZXN1bHRNYXBwZXIgfSA9IHRoaXM7XG4gICAgICAgIGlmICghZmllbGRzICYmICFjdXN0b21SZXN1bHRNYXBwZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQuZXhlY3V0ZShxdWVyeVN0cmluZywgcGFyYW1zLCByYXdRdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyByb3dzIH0gPSBhd2FpdCBjbGllbnQuZXhlY3V0ZShxdWVyeVN0cmluZywgcGFyYW1zLCBxdWVyeSk7XG4gICAgICAgIGlmIChjdXN0b21SZXN1bHRNYXBwZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXN0b21SZXN1bHRNYXBwZXIocm93cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvd3MubWFwKChyb3cpID0+IG1hcFJlc3VsdFJvdyhmaWVsZHMsIHJvdywgam9pbnNOb3ROdWxsYWJsZU1hcCkpO1xuICAgIH1cbiAgICBpdGVyYXRvcihfcGxhY2Vob2xkZXJWYWx1ZXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdHJlYW1pbmcgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgUGxhbmV0U2NhbGUgU2VydmVybGVzcyBkcml2ZXInKTtcbiAgICB9XG59XG5jbGFzcyBQbGFuZXRzY2FsZVNlc3Npb24gZXh0ZW5kcyBNeVNxbFNlc3Npb24ge1xuICAgIGJhc2VDbGllbnQ7XG4gICAgc2NoZW1hO1xuICAgIG9wdGlvbnM7XG4gICAgc3RhdGljIFtlbnRpdHlLaW5kXSA9ICdQbGFuZXRzY2FsZVNlc3Npb24nO1xuICAgIGxvZ2dlcjtcbiAgICBjbGllbnQ7XG4gICAgY29uc3RydWN0b3IoYmFzZUNsaWVudCwgZGlhbGVjdCwgdHgsIHNjaGVtYSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGRpYWxlY3QpO1xuICAgICAgICB0aGlzLmJhc2VDbGllbnQgPSBiYXNlQ2xpZW50O1xuICAgICAgICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jbGllbnQgPSB0eCA/PyBiYXNlQ2xpZW50O1xuICAgICAgICB0aGlzLmxvZ2dlciA9IG9wdGlvbnMubG9nZ2VyID8/IG5ldyBOb29wTG9nZ2VyKCk7XG4gICAgfVxuICAgIHByZXBhcmVRdWVyeShxdWVyeSwgZmllbGRzLCBjdXN0b21SZXN1bHRNYXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQbGFuZXRTY2FsZVByZXBhcmVkUXVlcnkodGhpcy5jbGllbnQsIHF1ZXJ5LnNxbCwgcXVlcnkucGFyYW1zLCB0aGlzLmxvZ2dlciwgZmllbGRzLCBjdXN0b21SZXN1bHRNYXBwZXIpO1xuICAgIH1cbiAgICBhc3luYyBxdWVyeShxdWVyeSwgcGFyYW1zKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZ1F1ZXJ5KHF1ZXJ5LCBwYXJhbXMpO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuZXhlY3V0ZShxdWVyeSwgcGFyYW1zLCB7IGFzOiAnYXJyYXknIH0pO1xuICAgIH1cbiAgICBhc3luYyBxdWVyeU9iamVjdHMocXVlcnksIHBhcmFtcykge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZXhlY3V0ZShxdWVyeSwgcGFyYW1zLCB7IGFzOiAnb2JqZWN0JyB9KTtcbiAgICB9XG4gICAgYWxsKHF1ZXJ5KSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5U3FsID0gdGhpcy5kaWFsZWN0LnNxbFRvUXVlcnkocXVlcnkpO1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2dRdWVyeShxdWVyeVNxbC5zcWwsIHF1ZXJ5U3FsLnBhcmFtcyk7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5leGVjdXRlKHF1ZXJ5U3FsLnNxbCwgcXVlcnlTcWwucGFyYW1zLCB7IGFzOiAnb2JqZWN0JyB9KS50aGVuKChlUXVlcnkpID0+IGVRdWVyeS5yb3dzKTtcbiAgICB9XG4gICAgdHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZUNsaWVudC50cmFuc2FjdGlvbigocHN0eCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IG5ldyBQbGFuZXRzY2FsZVNlc3Npb24odGhpcy5iYXNlQ2xpZW50LCB0aGlzLmRpYWxlY3QsIHBzdHgsIHRoaXMuc2NoZW1hLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgdHggPSBuZXcgUGxhbmV0U2NhbGVUcmFuc2FjdGlvbih0aGlzLmRpYWxlY3QsIHNlc3Npb24sIHRoaXMuc2NoZW1hKTtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbih0eCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmNsYXNzIFBsYW5ldFNjYWxlVHJhbnNhY3Rpb24gZXh0ZW5kcyBNeVNxbFRyYW5zYWN0aW9uIHtcbiAgICBzdGF0aWMgW2VudGl0eUtpbmRdID0gJ1BsYW5ldFNjYWxlVHJhbnNhY3Rpb24nO1xuICAgIGNvbnN0cnVjdG9yKGRpYWxlY3QsIHNlc3Npb24sIHNjaGVtYSwgbmVzdGVkSW5kZXggPSAwKSB7XG4gICAgICAgIHN1cGVyKGRpYWxlY3QsIHNlc3Npb24sIHNjaGVtYSwgbmVzdGVkSW5kZXgsICdwbGFuZXRzY2FsZScpO1xuICAgIH1cbiAgICBhc3luYyB0cmFuc2FjdGlvbih0cmFuc2FjdGlvbikge1xuICAgICAgICBjb25zdCBzYXZlcG9pbnROYW1lID0gYHNwJHt0aGlzLm5lc3RlZEluZGV4ICsgMX1gO1xuICAgICAgICBjb25zdCB0eCA9IG5ldyBQbGFuZXRTY2FsZVRyYW5zYWN0aW9uKHRoaXMuZGlhbGVjdCwgdGhpcy5zZXNzaW9uLCB0aGlzLnNjaGVtYSwgdGhpcy5uZXN0ZWRJbmRleCArIDEpO1xuICAgICAgICBhd2FpdCB0eC5leGVjdXRlKHNxbC5yYXcoYHNhdmVwb2ludCAke3NhdmVwb2ludE5hbWV9YCkpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdHJhbnNhY3Rpb24odHgpO1xuICAgICAgICAgICAgYXdhaXQgdHguZXhlY3V0ZShzcWwucmF3KGByZWxlYXNlIHNhdmVwb2ludCAke3NhdmVwb2ludE5hbWV9YCkpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBhd2FpdCB0eC5leGVjdXRlKHNxbC5yYXcoYHJvbGxiYWNrIHRvIHNhdmVwb2ludCAke3NhdmVwb2ludE5hbWV9YCkpO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcml6emxlKGNsaWVudCwgY29uZmlnID0ge30pIHtcbiAgICBjb25zdCBkaWFsZWN0ID0gbmV3IE15U3FsRGlhbGVjdCgpO1xuICAgIGxldCBsb2dnZXI7XG4gICAgaWYgKGNvbmZpZy5sb2dnZXIgPT09IHRydWUpIHtcbiAgICAgICAgbG9nZ2VyID0gbmV3IERlZmF1bHRMb2dnZXIoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29uZmlnLmxvZ2dlciAhPT0gZmFsc2UpIHtcbiAgICAgICAgbG9nZ2VyID0gY29uZmlnLmxvZ2dlcjtcbiAgICB9XG4gICAgbGV0IHNjaGVtYTtcbiAgICBpZiAoY29uZmlnLnNjaGVtYSkge1xuICAgICAgICBjb25zdCB0YWJsZXNDb25maWcgPSBleHRyYWN0VGFibGVzUmVsYXRpb25hbENvbmZpZyhjb25maWcuc2NoZW1hLCBjcmVhdGVUYWJsZVJlbGF0aW9uc0hlbHBlcnMpO1xuICAgICAgICBzY2hlbWEgPSB7XG4gICAgICAgICAgICBmdWxsU2NoZW1hOiBjb25maWcuc2NoZW1hLFxuICAgICAgICAgICAgc2NoZW1hOiB0YWJsZXNDb25maWcudGFibGVzLFxuICAgICAgICAgICAgdGFibGVOYW1lc01hcDogdGFibGVzQ29uZmlnLnRhYmxlTmFtZXNNYXAsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHNlc3Npb24gPSBuZXcgUGxhbmV0c2NhbGVTZXNzaW9uKGNsaWVudCwgZGlhbGVjdCwgdW5kZWZpbmVkLCBzY2hlbWEsIHsgbG9nZ2VyIH0pO1xuICAgIHJldHVybiBuZXcgTXlTcWxEYXRhYmFzZShkaWFsZWN0LCBzZXNzaW9uLCBzY2hlbWEsICdwbGFuZXRzY2FsZScpO1xufVxuXG5leHBvcnQgeyBQbGFuZXRTY2FsZVByZXBhcmVkUXVlcnksIFBsYW5ldFNjYWxlVHJhbnNhY3Rpb24sIFBsYW5ldHNjYWxlU2Vzc2lvbiwgZHJpenpsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbIk5vb3BMb2dnZXIiLCJEZWZhdWx0TG9nZ2VyIiwiUCIsIlByZXBhcmVkUXVlcnkiLCJNIiwiTXlTcWxTZXNzaW9uIiwiYSIsIk15U3FsVHJhbnNhY3Rpb24iLCJiIiwiTXlTcWxEYXRhYmFzZSIsImMiLCJNeVNxbERpYWxlY3QiLCJlIiwiZW50aXR5S2luZCIsImYiLCJmaWxsUGxhY2Vob2xkZXJzIiwibSIsIm1hcFJlc3VsdFJvdyIsInMiLCJzcWwiLCJleHRyYWN0VGFibGVzUmVsYXRpb25hbENvbmZpZyIsImNyZWF0ZVRhYmxlUmVsYXRpb25zSGVscGVycyIsIlBsYW5ldFNjYWxlUHJlcGFyZWRRdWVyeSIsImNvbnN0cnVjdG9yIiwiY2xpZW50IiwicXVlcnlTdHJpbmciLCJwYXJhbXMiLCJsb2dnZXIiLCJmaWVsZHMiLCJjdXN0b21SZXN1bHRNYXBwZXIiLCJyYXdRdWVyeSIsImFzIiwicXVlcnkiLCJleGVjdXRlIiwicGxhY2Vob2xkZXJWYWx1ZXMiLCJsb2dRdWVyeSIsImpvaW5zTm90TnVsbGFibGVNYXAiLCJyb3dzIiwibWFwIiwicm93IiwiaXRlcmF0b3IiLCJfcGxhY2Vob2xkZXJWYWx1ZXMiLCJFcnJvciIsIlBsYW5ldHNjYWxlU2Vzc2lvbiIsImJhc2VDbGllbnQiLCJkaWFsZWN0IiwidHgiLCJzY2hlbWEiLCJvcHRpb25zIiwicHJlcGFyZVF1ZXJ5IiwicXVlcnlPYmplY3RzIiwiYWxsIiwicXVlcnlTcWwiLCJzcWxUb1F1ZXJ5IiwidGhlbiIsImVRdWVyeSIsInRyYW5zYWN0aW9uIiwicHN0eCIsInNlc3Npb24iLCJQbGFuZXRTY2FsZVRyYW5zYWN0aW9uIiwibmVzdGVkSW5kZXgiLCJzYXZlcG9pbnROYW1lIiwicmF3IiwicmVzdWx0IiwiZXJyIiwiZHJpenpsZSIsImNvbmZpZyIsInRhYmxlc0NvbmZpZyIsImZ1bGxTY2hlbWEiLCJ0YWJsZXMiLCJ0YWJsZU5hbWVzTWFwIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/drizzle-orm/planetscale-serverless/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/drizzle-orm/view-23898f21.mjs":
/*!****************************************************!*\
  !*** ./node_modules/drizzle-orm/view-23898f21.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ UniqueConstraint),\n/* harmony export */   B: () => (/* binding */ ViewBuilder),\n/* harmony export */   C: () => (/* binding */ ManualViewBuilder),\n/* harmony export */   D: () => (/* binding */ MySqlViewBase),\n/* harmony export */   E: () => (/* binding */ MySqlView),\n/* harmony export */   F: () => (/* binding */ ForeignKeyBuilder),\n/* harmony export */   G: () => (/* binding */ mysqlView),\n/* harmony export */   I: () => (/* binding */ InlineForeignKeys),\n/* harmony export */   M: () => (/* binding */ MySqlSession),\n/* harmony export */   P: () => (/* binding */ PreparedQuery),\n/* harmony export */   Q: () => (/* binding */ QueryBuilder),\n/* harmony export */   U: () => (/* binding */ UniqueConstraintBuilder),\n/* harmony export */   V: () => (/* binding */ ViewBuilderCore),\n/* harmony export */   a: () => (/* binding */ MySqlTransaction),\n/* harmony export */   b: () => (/* binding */ MySqlDatabase),\n/* harmony export */   c: () => (/* binding */ MySqlDialect),\n/* harmony export */   d: () => (/* binding */ MySqlColumnBuilderWithAutoIncrement),\n/* harmony export */   e: () => (/* binding */ MySqlColumnWithAutoIncrement),\n/* harmony export */   f: () => (/* binding */ MySqlColumnBuilder),\n/* harmony export */   g: () => (/* binding */ MySqlColumn),\n/* harmony export */   h: () => (/* binding */ MySqlTable),\n/* harmony export */   i: () => (/* binding */ mysqlViewWithSchema),\n/* harmony export */   j: () => (/* binding */ MySqlViewConfig),\n/* harmony export */   k: () => (/* binding */ ForeignKey),\n/* harmony export */   l: () => (/* binding */ foreignKey),\n/* harmony export */   m: () => (/* binding */ mysqlTableWithSchema),\n/* harmony export */   n: () => (/* binding */ MySqlDelete),\n/* harmony export */   o: () => (/* binding */ MySqlInsertBuilder),\n/* harmony export */   p: () => (/* binding */ MySqlInsert),\n/* harmony export */   q: () => (/* binding */ MySqlSelectBuilder),\n/* harmony export */   r: () => (/* binding */ MySqlSelectQueryBuilder),\n/* harmony export */   s: () => (/* binding */ MySqlSelect),\n/* harmony export */   t: () => (/* binding */ MySqlUpdateBuilder),\n/* harmony export */   u: () => (/* binding */ MySqlUpdate),\n/* harmony export */   v: () => (/* binding */ mysqlTable),\n/* harmony export */   w: () => (/* binding */ mysqlTableCreator),\n/* harmony export */   x: () => (/* binding */ unique),\n/* harmony export */   y: () => (/* binding */ uniqueKeyName),\n/* harmony export */   z: () => (/* binding */ UniqueOnConstraintBuilder)\n/* harmony export */ });\n/* harmony import */ var _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alias-cf8e03cd.mjs */ \"(rsc)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs\");\n\n/** @internal */ const InlineForeignKeys = Symbol.for(\"drizzle:MySqlInlineForeignKeys\");\nlet prop, prop1;\nclass MySqlTable extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T {\n    static{\n        prop = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns;\n        prop1 = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.ExtraConfigBuilder;\n    }\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlTable\";\n    }\n    static{\n        /** @internal */ this.Symbol = Object.assign({}, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol, {\n            InlineForeignKeys: InlineForeignKeys\n        });\n    }\n    constructor(...args){\n        super(...args);\n        /** @internal */ this[InlineForeignKeys] = [];\n        /** @internal */ this[prop1] = undefined;\n    }\n}\nfunction mysqlTableWithSchema(name, columns, extraConfig, schema, baseName = name) {\n    const rawTable = new MySqlTable(name, schema, baseName);\n    const builtColumns = Object.fromEntries(Object.entries(columns).map(([name, colBuilderBase])=>{\n        const colBuilder = colBuilderBase;\n        const column = colBuilder.build(rawTable);\n        rawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n        return [\n            name,\n            column\n        ];\n    }));\n    const table = Object.assign(rawTable, builtColumns);\n    table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns] = builtColumns;\n    if (extraConfig) {\n        table[MySqlTable.Symbol.ExtraConfigBuilder] = extraConfig;\n    }\n    return table;\n}\nconst mysqlTable = (name, columns, extraConfig)=>{\n    return mysqlTableWithSchema(name, columns, extraConfig, undefined, name);\n};\nfunction mysqlTableCreator(customizeTableName) {\n    return (name, columns, extraConfig)=>{\n        return mysqlTableWithSchema(customizeTableName(name), columns, extraConfig, undefined, name);\n    };\n}\nclass ForeignKeyBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlForeignKeyBuilder\";\n    }\n    constructor(config, actions){\n        this.reference = ()=>{\n            const { columns, foreignColumns } = config();\n            return {\n                columns,\n                foreignTable: foreignColumns[0].table,\n                foreignColumns\n            };\n        };\n        if (actions) {\n            this._onUpdate = actions.onUpdate;\n            this._onDelete = actions.onDelete;\n        }\n    }\n    onUpdate(action) {\n        this._onUpdate = action;\n        return this;\n    }\n    onDelete(action) {\n        this._onDelete = action;\n        return this;\n    }\n    /** @internal */ build(table) {\n        return new ForeignKey(table, this);\n    }\n}\nclass ForeignKey {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlForeignKey\";\n    }\n    constructor(table, builder){\n        this.table = table;\n        this.reference = builder.reference;\n        this.onUpdate = builder._onUpdate;\n        this.onDelete = builder._onDelete;\n    }\n    getName() {\n        const { columns, foreignColumns } = this.reference();\n        const columnNames = columns.map((column)=>column.name);\n        const foreignColumnNames = foreignColumns.map((column)=>column.name);\n        const chunks = [\n            this.table[MySqlTable.Symbol.Name],\n            ...columnNames,\n            foreignColumns[0].table[MySqlTable.Symbol.Name],\n            ...foreignColumnNames\n        ];\n        return `${chunks.join(\"_\")}_fk`;\n    }\n}\nfunction foreignKey(config) {\n    function mappedConfig() {\n        const { columns, foreignColumns } = config;\n        return {\n            columns,\n            foreignColumns\n        };\n    }\n    return new ForeignKeyBuilder(mappedConfig);\n}\nfunction unique(name) {\n    return new UniqueOnConstraintBuilder(name);\n}\nfunction uniqueKeyName(table, columns) {\n    return `${table[MySqlTable.Symbol.Name]}_${columns.join(\"_\")}_unique`;\n}\nclass UniqueConstraintBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlUniqueConstraintBuilder\";\n    }\n    constructor(columns, name){\n        this.name = name;\n        this.columns = columns;\n    }\n    /** @internal */ build(table) {\n        return new UniqueConstraint(table, this.columns, this.name);\n    }\n}\nclass UniqueOnConstraintBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlUniqueOnConstraintBuilder\";\n    }\n    constructor(name){\n        this.name = name;\n    }\n    on(...columns) {\n        return new UniqueConstraintBuilder(columns, this.name);\n    }\n}\nclass UniqueConstraint {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlUniqueConstraint\";\n    }\n    constructor(table, columns, name){\n        this.nullsNotDistinct = false;\n        this.table = table;\n        this.columns = columns;\n        this.name = name ?? uniqueKeyName(this.table, this.columns.map((column)=>column.name));\n    }\n    getName() {\n        return this.name;\n    }\n}\nclass MySqlColumnBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.C {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlColumnBuilder\";\n    }\n    references(ref, actions = {}) {\n        this.foreignKeyConfigs.push({\n            ref,\n            actions\n        });\n        return this;\n    }\n    unique(name) {\n        this.config.isUnique = true;\n        this.config.uniqueName = name;\n        return this;\n    }\n    /** @internal */ buildForeignKeys(column, table) {\n        return this.foreignKeyConfigs.map(({ ref, actions })=>{\n            return ((ref, actions)=>{\n                const builder = new ForeignKeyBuilder(()=>{\n                    const foreignColumn = ref();\n                    return {\n                        columns: [\n                            column\n                        ],\n                        foreignColumns: [\n                            foreignColumn\n                        ]\n                    };\n                });\n                if (actions.onUpdate) {\n                    builder.onUpdate(actions.onUpdate);\n                }\n                if (actions.onDelete) {\n                    builder.onDelete(actions.onDelete);\n                }\n                return builder.build(table);\n            })(ref, actions);\n        });\n    }\n    constructor(...args){\n        super(...args);\n        this.foreignKeyConfigs = [];\n    }\n}\n// To understand how to use `MySqlColumn` and `AnyMySqlColumn`, see `Column` and `AnyColumn` documentation.\nclass MySqlColumn extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlColumn\";\n    }\n    constructor(table, config){\n        if (!config.uniqueName) {\n            config.uniqueName = uniqueKeyName(table, [\n                config.name\n            ]);\n        }\n        super(table, config);\n        this.table = table;\n    }\n}\nclass MySqlColumnBuilderWithAutoIncrement extends MySqlColumnBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlColumnBuilderWithAutoIncrement\";\n    }\n    constructor(name, dataType, columnType){\n        super(name, dataType, columnType);\n        this.config.autoIncrement = false;\n    }\n    autoincrement() {\n        this.config.autoIncrement = true;\n        this.config.hasDefault = true;\n        return this;\n    }\n}\nclass MySqlColumnWithAutoIncrement extends MySqlColumn {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlColumnWithAutoIncrement\";\n    }\n    constructor(...args){\n        super(...args);\n        this.autoIncrement = this.config.autoIncrement;\n    }\n}\nclass MySqlDelete extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlDelete\";\n    }\n    constructor(table, session, dialect){\n        super();\n        this.execute = (placeholderValues)=>{\n            return this.prepare().execute(placeholderValues);\n        };\n        this.createIterator = ()=>{\n            const self = this;\n            return async function*(placeholderValues) {\n                yield* self.prepare().iterator(placeholderValues);\n            };\n        };\n        this.iterator = this.createIterator();\n        this.table = table;\n        this.session = session;\n        this.dialect = dialect;\n        this.config = {\n            table\n        };\n    }\n    where(where) {\n        this.config.where = where;\n        return this;\n    }\n    /** @internal */ getSQL() {\n        return this.dialect.buildDeleteQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    prepare() {\n        return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), this.config.returning);\n    }\n}\nclass MySqlInsertBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlInsertBuilder\";\n    }\n    constructor(table, session, dialect){\n        this.shouldIgnore = false;\n        this.table = table;\n        this.session = session;\n        this.dialect = dialect;\n    }\n    ignore() {\n        this.shouldIgnore = true;\n        return this;\n    }\n    values(values) {\n        values = Array.isArray(values) ? values : [\n            values\n        ];\n        if (values.length === 0) {\n            throw new Error(\"values() must be called with at least one value\");\n        }\n        const mappedValues = values.map((entry)=>{\n            const result = {};\n            const cols = this.table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns];\n            for (const colKey of Object.keys(entry)){\n                const colValue = entry[colKey];\n                result[colKey] = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(colValue, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S) ? colValue : new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b(colValue, cols[colKey]);\n            }\n            return result;\n        });\n        return new MySqlInsert(this.table, mappedValues, this.shouldIgnore, this.session, this.dialect);\n    }\n}\nclass MySqlInsert extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlInsert\";\n    }\n    constructor(table, values, ignore, session, dialect){\n        super();\n        this.execute = (placeholderValues)=>{\n            return this.prepare().execute(placeholderValues);\n        };\n        this.createIterator = ()=>{\n            const self = this;\n            return async function*(placeholderValues) {\n                yield* self.prepare().iterator(placeholderValues);\n            };\n        };\n        this.iterator = this.createIterator();\n        this.session = session;\n        this.dialect = dialect;\n        this.config = {\n            table,\n            values,\n            ignore\n        };\n    }\n    onDuplicateKeyUpdate(config) {\n        const setSql = this.dialect.buildUpdateSet(this.config.table, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(this.config.table, config.set));\n        this.config.onConflict = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`update ${setSql}`;\n        return this;\n    }\n    /** @internal */ getSQL() {\n        return this.dialect.buildInsertQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    prepare() {\n        return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), undefined);\n    }\n}\n// TODO find out how to use all/values. Seems like I need those functions\n// Build project\n// copy runtime tests to be sure it's working\n// Add mysql to drizzle-kit\n// Add Planetscale Driver and create example repo\nclass MySqlDialect {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlDialect\";\n    }\n    async migrate(migrations, session, config) {\n        const migrationsTable = config.migrationsTable ?? \"__drizzle_migrations\";\n        const migrationTableCreate = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`\n\t\t\tcreate table if not exists ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(migrationsTable)} (\n\t\t\t\tid serial primary key,\n\t\t\t\thash text not null,\n\t\t\t\tcreated_at bigint\n\t\t\t)\n\t\t`;\n        await session.execute(migrationTableCreate);\n        const dbMigrations = await session.all(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`select id, hash, created_at from ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(migrationsTable)} order by created_at desc limit 1`);\n        const lastDbMigration = dbMigrations[0];\n        await session.transaction(async (tx)=>{\n            for (const migration of migrations){\n                if (!lastDbMigration || Number(lastDbMigration.created_at) < migration.folderMillis) {\n                    for (const stmt of migration.sql){\n                        await tx.execute(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(stmt));\n                    }\n                    await tx.execute(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`insert into ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(migrationsTable)} (\\`hash\\`, \\`created_at\\`) values(${migration.hash}, ${migration.folderMillis})`);\n                }\n            }\n        });\n    }\n    escapeName(name) {\n        return `\\`${name}\\``;\n    }\n    escapeParam(_num) {\n        return `?`;\n    }\n    escapeString(str) {\n        return `'${str.replace(/'/g, \"''\")}'`;\n    }\n    buildDeleteQuery({ table, where, returning }) {\n        const returningSql = returning ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` returning ${this.buildSelection(returning, {\n            isSingleTable: true\n        })}` : undefined;\n        const whereSql = where ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` where ${where}` : undefined;\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`delete from ${table}${whereSql}${returningSql}`;\n    }\n    buildUpdateSet(table, set) {\n        const setEntries = Object.entries(set);\n        const setSize = setEntries.length;\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(setEntries.flatMap(([colName, value], i)=>{\n            const col = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns][colName];\n            const res = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(col.name)} = ${value}`;\n            if (i < setSize - 1) {\n                return [\n                    res,\n                    _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(\", \")\n                ];\n            }\n            return [\n                res\n            ];\n        }));\n    }\n    buildUpdateQuery({ table, set, where, returning }) {\n        const setSql = this.buildUpdateSet(table, set);\n        const returningSql = returning ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` returning ${this.buildSelection(returning, {\n            isSingleTable: true\n        })}` : undefined;\n        const whereSql = where ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` where ${where}` : undefined;\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`update ${table} set ${setSql}${whereSql}${returningSql}`;\n    }\n    /**\n     * Builds selection SQL with provided fields/expressions\n     *\n     * Examples:\n     *\n     * `select <selection> from`\n     *\n     * `insert ... returning <selection>`\n     *\n     * If `isSingleTable` is true, then columns won't be prefixed with table name\n     */ buildSelection(fields, { isSingleTable = false } = {}) {\n        const columnsLen = fields.length;\n        const chunks = fields.flatMap(({ field }, i)=>{\n            const chunk = [];\n            if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) && field.isSelectionField) {\n                chunk.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(field.fieldAlias));\n            } else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) || (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S)) {\n                const query = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) ? field.sql : field;\n                if (isSingleTable) {\n                    chunk.push(new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S(query.queryChunks.map((c)=>{\n                        if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(c, MySqlColumn)) {\n                            return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(c.name);\n                        }\n                        return c;\n                    })));\n                } else {\n                    chunk.push(query);\n                }\n                if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased)) {\n                    chunk.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` as ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(field.fieldAlias)}`);\n                }\n            } else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p)) {\n                if (isSingleTable) {\n                    chunk.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(field.name));\n                } else {\n                    chunk.push(field);\n                }\n            }\n            if (i < columnsLen - 1) {\n                chunk.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `);\n            }\n            return chunk;\n        });\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(chunks);\n    }\n    buildSelectQuery({ withList, fields, fieldsFlat, where, having, table, joins, orderBy, groupBy, limit, offset, lockingClause, distinct }) {\n        const fieldsList = fieldsFlat ?? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(fields);\n        for (const f of fieldsList){\n            if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(f.field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p) && (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.q)(f.field.table) !== ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r) ? table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.u].alias : (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, MySqlViewBase) ? table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.V].name : (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S) ? undefined : (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.q)(table)) && !((table)=>joins?.some(({ alias })=>alias === (table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.IsAlias] ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.q)(table) : table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.BaseName])))(f.field.table)) {\n                const tableName = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.q)(f.field.table);\n                throw new Error(`Your \"${f.path.join(\"->\")}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`);\n            }\n        }\n        const isSingleTable = !joins || joins.length === 0;\n        let withSql;\n        if (withList?.length) {\n            const withSqlChunks = [\n                _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`with `\n            ];\n            for (const [i, w] of withList.entries()){\n                withSqlChunks.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(w[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.u].alias)} as (${w[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.u].sql})`);\n                if (i < withList.length - 1) {\n                    withSqlChunks.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `);\n                }\n            }\n            withSqlChunks.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` `);\n            withSql = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(withSqlChunks);\n        }\n        const distinctSql = distinct ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` distinct` : undefined;\n        const selection = this.buildSelection(fieldsList, {\n            isSingleTable\n        });\n        const tableSql = (()=>{\n            if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T) && table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.OriginalName] !== table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Name]) {\n                return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.OriginalName])} ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Name])}`;\n            }\n            return table;\n        })();\n        const joinsArray = [];\n        if (joins) {\n            for (const [index, joinMeta] of joins.entries()){\n                if (index === 0) {\n                    joinsArray.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` `);\n                }\n                const table = joinMeta.table;\n                const lateralSql = joinMeta.lateral ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` lateral` : undefined;\n                if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, MySqlTable)) {\n                    const tableName = table[MySqlTable.Symbol.Name];\n                    const tableSchema = table[MySqlTable.Symbol.Schema];\n                    const origTableName = table[MySqlTable.Symbol.OriginalName];\n                    const alias = tableName === origTableName ? undefined : joinMeta.alias;\n                    joinsArray.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(joinMeta.joinType)} join${lateralSql} ${tableSchema ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(tableSchema)}.` : undefined}${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(origTableName)}${alias && _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(alias)}`} on ${joinMeta.on}`);\n                } else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.v)) {\n                    const viewName = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.V].name;\n                    const viewSchema = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.V].schema;\n                    const origViewName = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.V].originalName;\n                    const alias = viewName === origViewName ? undefined : joinMeta.alias;\n                    joinsArray.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(joinMeta.joinType)} join${lateralSql} ${viewSchema ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(viewSchema)}.` : undefined}${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(origViewName)}${alias && _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(alias)}`} on ${joinMeta.on}`);\n                } else {\n                    joinsArray.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(joinMeta.joinType)} join${lateralSql} ${table} on ${joinMeta.on}`);\n                }\n                if (index < joins.length - 1) {\n                    joinsArray.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` `);\n                }\n            }\n        }\n        const joinsSql = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(joinsArray);\n        const whereSql = where ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` where ${where}` : undefined;\n        const havingSql = having ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` having ${having}` : undefined;\n        let orderBySql;\n        if (orderBy && orderBy.length > 0) {\n            orderBySql = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` order by ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(orderBy, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `)}`;\n        }\n        let groupBySql;\n        if (groupBy && groupBy.length > 0) {\n            groupBySql = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` group by ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(groupBy, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `)}`;\n        }\n        const limitSql = limit ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` limit ${limit}` : undefined;\n        const offsetSql = offset ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` offset ${offset}` : undefined;\n        let lockingClausesSql;\n        if (lockingClause) {\n            const { config, strength } = lockingClause;\n            lockingClausesSql = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` for ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(strength)}`;\n            if (config.noWait) {\n                lockingClausesSql.append(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` no wait`);\n            } else if (config.skipLocked) {\n                lockingClausesSql.append(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` skip locked`);\n            }\n        }\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}${lockingClausesSql}`;\n    }\n    buildInsertQuery({ table, values, ignore, onConflict }) {\n        // const isSingleValue = values.length === 1;\n        const valuesSqlList = [];\n        const columns = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns];\n        const colEntries = Object.entries(columns);\n        const insertOrder = colEntries.map(([, column])=>_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(column.name));\n        for (const [valueIndex, value] of values.entries()){\n            const valueList = [];\n            for (const [fieldName, col] of colEntries){\n                const colValue = value[fieldName];\n                if (colValue === undefined || (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(colValue, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b) && colValue.value === undefined) {\n                    // eslint-disable-next-line unicorn/no-negated-condition\n                    if (col.defaultFn !== undefined) {\n                        const defaultFnResult = col.defaultFn();\n                        const defaultValue = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(defaultFnResult, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S) ? defaultFnResult : _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.param(defaultFnResult, col);\n                        valueList.push(defaultValue);\n                    } else {\n                        valueList.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`default`);\n                    }\n                } else {\n                    valueList.push(colValue);\n                }\n            }\n            valuesSqlList.push(valueList);\n            if (valueIndex < values.length - 1) {\n                valuesSqlList.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `);\n            }\n        }\n        const valuesSql = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(valuesSqlList);\n        const ignoreSql = ignore ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` ignore` : undefined;\n        const onConflictSql = onConflict ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` on duplicate key ${onConflict}` : undefined;\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`insert${ignoreSql} into ${table} ${insertOrder} values ${valuesSql}${onConflictSql}`;\n    }\n    sqlToQuery(sql) {\n        return sql.toQuery({\n            escapeName: this.escapeName,\n            escapeParam: this.escapeParam,\n            escapeString: this.escapeString\n        });\n    }\n    buildRelationalQuery({ fullSchema, schema, tableNamesMap, table, tableConfig, queryConfig: config, tableAlias, nestedQueryRelation, joinOn }) {\n        let selection = [];\n        let limit, offset, orderBy, where;\n        const joins = [];\n        if (config === true) {\n            const selectionEntries = Object.entries(tableConfig.columns);\n            selection = selectionEntries.map(([key, value])=>({\n                    dbKey: value.name,\n                    tsKey: key,\n                    field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(value, tableAlias),\n                    relationTableTsKey: undefined,\n                    isJson: false,\n                    selection: []\n                }));\n        } else {\n            const aliasedColumns = Object.fromEntries(Object.entries(tableConfig.columns).map(([key, value])=>[\n                    key,\n                    (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(value, tableAlias)\n                ]));\n            if (config.where) {\n                const whereSql = typeof config.where === \"function\" ? config.where(aliasedColumns, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.x)()) : config.where;\n                where = whereSql && (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.y)(whereSql, tableAlias);\n            }\n            const fieldsSelection = [];\n            let selectedColumns = [];\n            // Figure out which columns to select\n            if (config.columns) {\n                let isIncludeMode = false;\n                for (const [field, value] of Object.entries(config.columns)){\n                    if (value === undefined) {\n                        continue;\n                    }\n                    if (field in tableConfig.columns) {\n                        if (!isIncludeMode && value === true) {\n                            isIncludeMode = true;\n                        }\n                        selectedColumns.push(field);\n                    }\n                }\n                if (selectedColumns.length > 0) {\n                    selectedColumns = isIncludeMode ? selectedColumns.filter((c)=>config.columns?.[c] === true) : Object.keys(tableConfig.columns).filter((key)=>!selectedColumns.includes(key));\n                }\n            } else {\n                // Select all columns if selection is not specified\n                selectedColumns = Object.keys(tableConfig.columns);\n            }\n            for (const field of selectedColumns){\n                const column = tableConfig.columns[field];\n                fieldsSelection.push({\n                    tsKey: field,\n                    value: column\n                });\n            }\n            let selectedRelations = [];\n            // Figure out which relations to select\n            if (config.with) {\n                selectedRelations = Object.entries(config.with).filter((entry)=>!!entry[1]).map(([tsKey, queryConfig])=>({\n                        tsKey,\n                        queryConfig,\n                        relation: tableConfig.relations[tsKey]\n                    }));\n            }\n            let extras;\n            // Figure out which extras to select\n            if (config.extras) {\n                extras = typeof config.extras === \"function\" ? config.extras(aliasedColumns, {\n                    sql: _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s\n                }) : config.extras;\n                for (const [tsKey, value] of Object.entries(extras)){\n                    fieldsSelection.push({\n                        tsKey,\n                        value: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(value, tableAlias)\n                    });\n                }\n            }\n            // Transform `fieldsSelection` into `selection`\n            // `fieldsSelection` shouldn't be used after this point\n            for (const { tsKey, value } of fieldsSelection){\n                selection.push({\n                    dbKey: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(value, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey].name,\n                    tsKey,\n                    field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(value, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p) ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(value, tableAlias) : value,\n                    relationTableTsKey: undefined,\n                    isJson: false,\n                    selection: []\n                });\n            }\n            let orderByOrig = typeof config.orderBy === \"function\" ? config.orderBy(aliasedColumns, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.A)()) : config.orderBy ?? [];\n            if (!Array.isArray(orderByOrig)) {\n                orderByOrig = [\n                    orderByOrig\n                ];\n            }\n            orderBy = orderByOrig.map((orderByValue)=>{\n                if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(orderByValue, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p)) {\n                    return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(orderByValue, tableAlias);\n                }\n                return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.y)(orderByValue, tableAlias);\n            });\n            limit = config.limit;\n            offset = config.offset;\n            // Process all relations\n            for (const { tsKey: selectedRelationTsKey, queryConfig: selectedRelationConfigValue, relation } of selectedRelations){\n                const normalizedRelation = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(schema, tableNamesMap, relation);\n                const relationTableName = relation.referencedTable[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Name];\n                const relationTableTsName = tableNamesMap[relationTableName];\n                const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n                const joinOn = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(...normalizedRelation.fields.map((field, i)=>(0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.F)((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(normalizedRelation.references[i], relationTableAlias), (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(field, tableAlias))));\n                const builtRelation = this.buildRelationalQuery({\n                    fullSchema,\n                    schema,\n                    tableNamesMap,\n                    table: fullSchema[relationTableTsName],\n                    tableConfig: schema[relationTableTsName],\n                    queryConfig: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(relation, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.O) ? selectedRelationConfigValue === true ? {\n                        limit: 1\n                    } : {\n                        ...selectedRelationConfigValue,\n                        limit: 1\n                    } : selectedRelationConfigValue,\n                    tableAlias: relationTableAlias,\n                    joinOn,\n                    nestedQueryRelation: relation\n                });\n                const field = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(relationTableAlias)}.${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(\"data\")}`.as(selectedRelationTsKey);\n                joins.push({\n                    on: _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`true`,\n                    table: new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r(builtRelation.sql, {}, relationTableAlias),\n                    alias: relationTableAlias,\n                    joinType: \"left\",\n                    lateral: true\n                });\n                selection.push({\n                    dbKey: selectedRelationTsKey,\n                    tsKey: selectedRelationTsKey,\n                    field,\n                    relationTableTsKey: relationTableTsName,\n                    isJson: true,\n                    selection: builtRelation.selection\n                });\n            }\n        }\n        if (selection.length === 0) {\n            throw new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.D(`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")`);\n        }\n        let result;\n        where = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(joinOn, where);\n        if (nestedQueryRelation) {\n            let field = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`json_array(${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(selection.map(({ field, tsKey, isJson })=>isJson ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(`${tableAlias}_${tsKey}`)}.${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(\"data\")}` : (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) ? field.sql : field), _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `)})`;\n            if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(nestedQueryRelation, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.M)) {\n                field = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`coalesce(json_arrayagg(${field}), json_array())`;\n            }\n            const nestedSelection = [\n                {\n                    dbKey: \"data\",\n                    tsKey: \"data\",\n                    field: field.as(\"data\"),\n                    isJson: true,\n                    relationTableTsKey: tableConfig.tsName,\n                    selection\n                }\n            ];\n            const needsSubquery = limit !== undefined || offset !== undefined || (orderBy?.length ?? 0) > 0;\n            if (needsSubquery) {\n                result = this.buildSelectQuery({\n                    table: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(table, tableAlias),\n                    fields: {},\n                    fieldsFlat: [\n                        {\n                            path: [],\n                            field: _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(\"*\")\n                        },\n                        ...(orderBy?.length ?? 0) > 0 ? [\n                            {\n                                path: [],\n                                field: _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`row_number() over (order by ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(orderBy, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `)})`\n                            }\n                        ] : []\n                    ],\n                    where,\n                    limit,\n                    offset\n                });\n                where = undefined;\n                limit = undefined;\n                offset = undefined;\n                orderBy = undefined;\n            } else {\n                result = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(table, tableAlias);\n            }\n            result = this.buildSelectQuery({\n                table: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(result, MySqlTable) ? result : new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r(result, {}, tableAlias),\n                fields: {},\n                fieldsFlat: nestedSelection.map(({ field })=>({\n                        path: [],\n                        field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p) ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(field, tableAlias) : field\n                    })),\n                joins,\n                where,\n                limit,\n                offset,\n                orderBy\n            });\n        } else {\n            result = this.buildSelectQuery({\n                table: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(table, tableAlias),\n                fields: {},\n                fieldsFlat: selection.map(({ field })=>({\n                        path: [],\n                        field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p) ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(field, tableAlias) : field\n                    })),\n                joins,\n                where,\n                limit,\n                offset,\n                orderBy\n            });\n        }\n        return {\n            tableTsKey: tableConfig.tsName,\n            sql: result,\n            selection\n        };\n    }\n    buildRelationalQueryWithoutLateralSubqueries({ fullSchema, schema, tableNamesMap, table, tableConfig, queryConfig: config, tableAlias, nestedQueryRelation, joinOn }) {\n        let selection = [];\n        let limit, offset, orderBy = [], where;\n        if (config === true) {\n            const selectionEntries = Object.entries(tableConfig.columns);\n            selection = selectionEntries.map(([key, value])=>({\n                    dbKey: value.name,\n                    tsKey: key,\n                    field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(value, tableAlias),\n                    relationTableTsKey: undefined,\n                    isJson: false,\n                    selection: []\n                }));\n        } else {\n            const aliasedColumns = Object.fromEntries(Object.entries(tableConfig.columns).map(([key, value])=>[\n                    key,\n                    (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(value, tableAlias)\n                ]));\n            if (config.where) {\n                const whereSql = typeof config.where === \"function\" ? config.where(aliasedColumns, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.x)()) : config.where;\n                where = whereSql && (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.y)(whereSql, tableAlias);\n            }\n            const fieldsSelection = [];\n            let selectedColumns = [];\n            // Figure out which columns to select\n            if (config.columns) {\n                let isIncludeMode = false;\n                for (const [field, value] of Object.entries(config.columns)){\n                    if (value === undefined) {\n                        continue;\n                    }\n                    if (field in tableConfig.columns) {\n                        if (!isIncludeMode && value === true) {\n                            isIncludeMode = true;\n                        }\n                        selectedColumns.push(field);\n                    }\n                }\n                if (selectedColumns.length > 0) {\n                    selectedColumns = isIncludeMode ? selectedColumns.filter((c)=>config.columns?.[c] === true) : Object.keys(tableConfig.columns).filter((key)=>!selectedColumns.includes(key));\n                }\n            } else {\n                // Select all columns if selection is not specified\n                selectedColumns = Object.keys(tableConfig.columns);\n            }\n            for (const field of selectedColumns){\n                const column = tableConfig.columns[field];\n                fieldsSelection.push({\n                    tsKey: field,\n                    value: column\n                });\n            }\n            let selectedRelations = [];\n            // Figure out which relations to select\n            if (config.with) {\n                selectedRelations = Object.entries(config.with).filter((entry)=>!!entry[1]).map(([tsKey, queryConfig])=>({\n                        tsKey,\n                        queryConfig,\n                        relation: tableConfig.relations[tsKey]\n                    }));\n            }\n            let extras;\n            // Figure out which extras to select\n            if (config.extras) {\n                extras = typeof config.extras === \"function\" ? config.extras(aliasedColumns, {\n                    sql: _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s\n                }) : config.extras;\n                for (const [tsKey, value] of Object.entries(extras)){\n                    fieldsSelection.push({\n                        tsKey,\n                        value: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(value, tableAlias)\n                    });\n                }\n            }\n            // Transform `fieldsSelection` into `selection`\n            // `fieldsSelection` shouldn't be used after this point\n            for (const { tsKey, value } of fieldsSelection){\n                selection.push({\n                    dbKey: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(value, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey].name,\n                    tsKey,\n                    field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(value, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p) ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(value, tableAlias) : value,\n                    relationTableTsKey: undefined,\n                    isJson: false,\n                    selection: []\n                });\n            }\n            let orderByOrig = typeof config.orderBy === \"function\" ? config.orderBy(aliasedColumns, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.A)()) : config.orderBy ?? [];\n            if (!Array.isArray(orderByOrig)) {\n                orderByOrig = [\n                    orderByOrig\n                ];\n            }\n            orderBy = orderByOrig.map((orderByValue)=>{\n                if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(orderByValue, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p)) {\n                    return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(orderByValue, tableAlias);\n                }\n                return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.y)(orderByValue, tableAlias);\n            });\n            limit = config.limit;\n            offset = config.offset;\n            // Process all relations\n            for (const { tsKey: selectedRelationTsKey, queryConfig: selectedRelationConfigValue, relation } of selectedRelations){\n                const normalizedRelation = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(schema, tableNamesMap, relation);\n                const relationTableName = relation.referencedTable[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Name];\n                const relationTableTsName = tableNamesMap[relationTableName];\n                const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n                const joinOn = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(...normalizedRelation.fields.map((field, i)=>(0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.F)((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(normalizedRelation.references[i], relationTableAlias), (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(field, tableAlias))));\n                const builtRelation = this.buildRelationalQueryWithoutLateralSubqueries({\n                    fullSchema,\n                    schema,\n                    tableNamesMap,\n                    table: fullSchema[relationTableTsName],\n                    tableConfig: schema[relationTableTsName],\n                    queryConfig: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(relation, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.O) ? selectedRelationConfigValue === true ? {\n                        limit: 1\n                    } : {\n                        ...selectedRelationConfigValue,\n                        limit: 1\n                    } : selectedRelationConfigValue,\n                    tableAlias: relationTableAlias,\n                    joinOn,\n                    nestedQueryRelation: relation\n                });\n                let fieldSql = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`(${builtRelation.sql})`;\n                if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(relation, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.M)) {\n                    fieldSql = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`coalesce(${fieldSql}, json_array())`;\n                }\n                const field = fieldSql.as(selectedRelationTsKey);\n                selection.push({\n                    dbKey: selectedRelationTsKey,\n                    tsKey: selectedRelationTsKey,\n                    field,\n                    relationTableTsKey: relationTableTsName,\n                    isJson: true,\n                    selection: builtRelation.selection\n                });\n            }\n        }\n        if (selection.length === 0) {\n            throw new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.D(`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\"). You need to have at least one item in \"columns\", \"with\" or \"extras\". If you need to select all columns, omit the \"columns\" key or set it to undefined.`);\n        }\n        let result;\n        where = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(joinOn, where);\n        if (nestedQueryRelation) {\n            let field = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`json_array(${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(selection.map(({ field })=>(0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, MySqlColumn) ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(field.name) : (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) ? field.sql : field), _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `)})`;\n            if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(nestedQueryRelation, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.M)) {\n                field = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`json_arrayagg(${field})`;\n            }\n            const nestedSelection = [\n                {\n                    dbKey: \"data\",\n                    tsKey: \"data\",\n                    field,\n                    isJson: true,\n                    relationTableTsKey: tableConfig.tsName,\n                    selection\n                }\n            ];\n            const needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n            if (needsSubquery) {\n                result = this.buildSelectQuery({\n                    table: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(table, tableAlias),\n                    fields: {},\n                    fieldsFlat: [\n                        {\n                            path: [],\n                            field: _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(\"*\")\n                        },\n                        ...orderBy.length > 0 ? [\n                            {\n                                path: [],\n                                field: _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`row_number() over (order by ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(orderBy, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `)})`\n                            }\n                        ] : []\n                    ],\n                    where,\n                    limit,\n                    offset\n                });\n                where = undefined;\n                limit = undefined;\n                offset = undefined;\n                orderBy = undefined;\n            } else {\n                result = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(table, tableAlias);\n            }\n            result = this.buildSelectQuery({\n                table: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(result, MySqlTable) ? result : new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r(result, {}, tableAlias),\n                fields: {},\n                fieldsFlat: nestedSelection.map(({ field })=>({\n                        path: [],\n                        field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p) ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(field, tableAlias) : field\n                    })),\n                where,\n                limit,\n                offset,\n                orderBy\n            });\n        } else {\n            result = this.buildSelectQuery({\n                table: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(table, tableAlias),\n                fields: {},\n                fieldsFlat: selection.map(({ field })=>({\n                        path: [],\n                        field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p) ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(field, tableAlias) : field\n                    })),\n                where,\n                limit,\n                offset,\n                orderBy\n            });\n        }\n        return {\n            tableTsKey: tableConfig.tsName,\n            sql: result,\n            selection\n        };\n    }\n}\nclass MySqlSelectBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlSelectBuilder\";\n    }\n    constructor(config){\n        this.withList = [];\n        this.fields = config.fields;\n        this.session = config.session;\n        this.dialect = config.dialect;\n        if (config.withList) {\n            this.withList = config.withList;\n        }\n        this.distinct = config.distinct;\n    }\n    from(source) {\n        const isPartialSelect = !!this.fields;\n        let fields;\n        if (this.fields) {\n            fields = this.fields;\n        } else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(source, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r)) {\n            // This is required to use the proxy handler to get the correct field values from the subquery\n            fields = Object.fromEntries(Object.keys(source[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.u].selection).map((key)=>[\n                    key,\n                    source[key]\n                ]));\n        } else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(source, MySqlViewBase)) {\n            fields = source[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.V].selectedFields;\n        } else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(source, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S)) {\n            fields = {};\n        } else {\n            fields = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.I)(source);\n        }\n        return new MySqlSelect({\n            table: source,\n            fields,\n            isPartialSelect,\n            session: this.session,\n            dialect: this.dialect,\n            withList: this.withList,\n            distinct: this.distinct\n        });\n    }\n}\nclass MySqlSelectQueryBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.J {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlSelectQueryBuilder\";\n    }\n    constructor({ table, fields, isPartialSelect, session, dialect, withList, distinct }){\n        super();\n        this.leftJoin = this.createJoin(\"left\");\n        this.rightJoin = this.createJoin(\"right\");\n        this.innerJoin = this.createJoin(\"inner\");\n        this.fullJoin = this.createJoin(\"full\");\n        this.config = {\n            withList,\n            table,\n            fields: {\n                ...fields\n            },\n            distinct\n        };\n        this.isPartialSelect = isPartialSelect;\n        this.session = session;\n        this.dialect = dialect;\n        this._ = {\n            selectedFields: fields\n        };\n        this.tableName = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(table);\n        this.joinsNotNullableMap = typeof this.tableName === \"string\" ? {\n            [this.tableName]: true\n        } : {};\n    }\n    createJoin(joinType) {\n        return (table, on)=>{\n            const baseTableName = this.tableName;\n            const tableName = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(table);\n            if (typeof tableName === \"string\" && this.config.joins?.some((join)=>join.alias === tableName)) {\n                throw new Error(`Alias \"${tableName}\" is already used in this query`);\n            }\n            if (!this.isPartialSelect) {\n                // If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n                if (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === \"string\") {\n                    this.config.fields = {\n                        [baseTableName]: this.config.fields\n                    };\n                }\n                if (typeof tableName === \"string\" && !(0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S)) {\n                    const selection = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r) ? table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.u].selection : (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.v) ? table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.V].selectedFields : table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns];\n                    this.config.fields[tableName] = selection;\n                }\n            }\n            if (typeof on === \"function\") {\n                on = on(new Proxy(this.config.fields, new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n                    sqlAliasedBehavior: \"sql\",\n                    sqlBehavior: \"sql\"\n                })));\n            }\n            if (!this.config.joins) {\n                this.config.joins = [];\n            }\n            this.config.joins.push({\n                on,\n                table,\n                joinType,\n                alias: tableName\n            });\n            if (typeof tableName === \"string\") {\n                switch(joinType){\n                    case \"left\":\n                        {\n                            this.joinsNotNullableMap[tableName] = false;\n                            break;\n                        }\n                    case \"right\":\n                        {\n                            this.joinsNotNullableMap = Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([key])=>[\n                                    key,\n                                    false\n                                ]));\n                            this.joinsNotNullableMap[tableName] = true;\n                            break;\n                        }\n                    case \"inner\":\n                        {\n                            this.joinsNotNullableMap[tableName] = true;\n                            break;\n                        }\n                    case \"full\":\n                        {\n                            this.joinsNotNullableMap = Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([key])=>[\n                                    key,\n                                    false\n                                ]));\n                            this.joinsNotNullableMap[tableName] = false;\n                            break;\n                        }\n                }\n            }\n            return this;\n        };\n    }\n    where(where) {\n        if (typeof where === \"function\") {\n            where = where(new Proxy(this.config.fields, new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n                sqlAliasedBehavior: \"sql\",\n                sqlBehavior: \"sql\"\n            })));\n        }\n        this.config.where = where;\n        return this;\n    }\n    having(having) {\n        if (typeof having === \"function\") {\n            having = having(new Proxy(this.config.fields, new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n                sqlAliasedBehavior: \"sql\",\n                sqlBehavior: \"sql\"\n            })));\n        }\n        this.config.having = having;\n        return this;\n    }\n    groupBy(...columns) {\n        if (typeof columns[0] === \"function\") {\n            const groupBy = columns[0](new Proxy(this.config.fields, new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n                sqlAliasedBehavior: \"alias\",\n                sqlBehavior: \"sql\"\n            })));\n            this.config.groupBy = Array.isArray(groupBy) ? groupBy : [\n                groupBy\n            ];\n        } else {\n            this.config.groupBy = columns;\n        }\n        return this;\n    }\n    orderBy(...columns) {\n        if (typeof columns[0] === \"function\") {\n            const orderBy = columns[0](new Proxy(this.config.fields, new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n                sqlAliasedBehavior: \"alias\",\n                sqlBehavior: \"sql\"\n            })));\n            this.config.orderBy = Array.isArray(orderBy) ? orderBy : [\n                orderBy\n            ];\n        } else {\n            this.config.orderBy = columns;\n        }\n        return this;\n    }\n    limit(limit) {\n        this.config.limit = limit;\n        return this;\n    }\n    offset(offset) {\n        this.config.offset = offset;\n        return this;\n    }\n    for(strength, config = {}) {\n        this.config.lockingClause = {\n            strength,\n            config\n        };\n        return this;\n    }\n    /** @internal */ getSQL() {\n        return this.dialect.buildSelectQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    as(alias) {\n        return new Proxy(new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r(this.getSQL(), this.config.fields, alias), new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n            alias,\n            sqlAliasedBehavior: \"alias\",\n            sqlBehavior: \"error\"\n        }));\n    }\n}\nclass MySqlSelect extends MySqlSelectQueryBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlSelect\";\n    }\n    prepare() {\n        if (!this.session) {\n            throw new Error(\"Cannot execute a query on a query builder. Please use a database instance instead.\");\n        }\n        const fieldsList = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this.config.fields);\n        const query = this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), fieldsList);\n        query.joinsNotNullableMap = this.joinsNotNullableMap;\n        return query;\n    }\n    constructor(...args){\n        super(...args);\n        this.execute = (placeholderValues)=>{\n            return this.prepare().execute(placeholderValues);\n        };\n        this.createIterator = ()=>{\n            const self = this;\n            return async function*(placeholderValues) {\n                yield* self.prepare().iterator(placeholderValues);\n            };\n        };\n        this.iterator = this.createIterator();\n    }\n}\n(0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.H)(MySqlSelect, [\n    _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q\n]);\nclass QueryBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlQueryBuilder\";\n    }\n    $with(alias) {\n        const queryBuilder = this;\n        return {\n            as (qb) {\n                if (typeof qb === \"function\") {\n                    qb = qb(queryBuilder);\n                }\n                return new Proxy(new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.W(qb.getSQL(), qb.getSelectedFields(), alias, true), new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n                    alias,\n                    sqlAliasedBehavior: \"alias\",\n                    sqlBehavior: \"error\"\n                }));\n            }\n        };\n    }\n    with(...queries) {\n        const self = this;\n        function select(fields) {\n            return new MySqlSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                withList: queries\n            });\n        }\n        function selectDistinct(fields) {\n            return new MySqlSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                withList: queries,\n                distinct: true\n            });\n        }\n        return {\n            select,\n            selectDistinct\n        };\n    }\n    select(fields) {\n        return new MySqlSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect()\n        });\n    }\n    selectDistinct(fields) {\n        return new MySqlSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect(),\n            distinct: true\n        });\n    }\n    // Lazy load dialect to avoid circular dependency\n    getDialect() {\n        if (!this.dialect) {\n            this.dialect = new MySqlDialect();\n        }\n        return this.dialect;\n    }\n}\nclass RelationalQueryBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlRelationalQueryBuilder\";\n    }\n    constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session, mode){\n        this.fullSchema = fullSchema;\n        this.schema = schema;\n        this.tableNamesMap = tableNamesMap;\n        this.table = table;\n        this.tableConfig = tableConfig;\n        this.dialect = dialect;\n        this.session = session;\n        this.mode = mode;\n    }\n    findMany(config) {\n        return new MySqlRelationalQuery(this.fullSchema, this.schema, this.tableNamesMap, this.table, this.tableConfig, this.dialect, this.session, config ? config : {}, \"many\", this.mode);\n    }\n    findFirst(config) {\n        return new MySqlRelationalQuery(this.fullSchema, this.schema, this.tableNamesMap, this.table, this.tableConfig, this.dialect, this.session, config ? {\n            ...config,\n            limit: 1\n        } : {\n            limit: 1\n        }, \"first\", this.mode);\n    }\n}\nclass MySqlRelationalQuery extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlRelationalQuery\";\n    }\n    constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session, config, queryMode, mode){\n        super();\n        this.fullSchema = fullSchema;\n        this.schema = schema;\n        this.tableNamesMap = tableNamesMap;\n        this.table = table;\n        this.tableConfig = tableConfig;\n        this.dialect = dialect;\n        this.session = session;\n        this.config = config;\n        this.queryMode = queryMode;\n        this.mode = mode;\n    }\n    prepare() {\n        const { query, builtQuery } = this._toSQL();\n        return this.session.prepareQuery(builtQuery, undefined, (rawRows)=>{\n            const rows = rawRows.map((row)=>(0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(this.schema, this.tableConfig, row, query.selection));\n            if (this.queryMode === \"first\") {\n                return rows[0];\n            }\n            return rows;\n        });\n    }\n    _toSQL() {\n        const query = this.mode === \"planetscale\" ? this.dialect.buildRelationalQueryWithoutLateralSubqueries({\n            fullSchema: this.fullSchema,\n            schema: this.schema,\n            tableNamesMap: this.tableNamesMap,\n            table: this.table,\n            tableConfig: this.tableConfig,\n            queryConfig: this.config,\n            tableAlias: this.tableConfig.tsName\n        }) : this.dialect.buildRelationalQuery({\n            fullSchema: this.fullSchema,\n            schema: this.schema,\n            tableNamesMap: this.tableNamesMap,\n            table: this.table,\n            tableConfig: this.tableConfig,\n            queryConfig: this.config,\n            tableAlias: this.tableConfig.tsName\n        });\n        const builtQuery = this.dialect.sqlToQuery(query.sql);\n        return {\n            builtQuery,\n            query\n        };\n    }\n    toSQL() {\n        return this._toSQL().builtQuery;\n    }\n    execute() {\n        return this.prepare().execute();\n    }\n}\nclass MySqlDatabase {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlDatabase\";\n    }\n    constructor(/** @internal */ dialect, /** @internal */ session, schema, mode){\n        this.dialect = dialect;\n        this.session = session;\n        this.mode = mode;\n        this._ = schema ? {\n            schema: schema.schema,\n            tableNamesMap: schema.tableNamesMap\n        } : {\n            schema: undefined,\n            tableNamesMap: {}\n        };\n        this.query = {};\n        if (this._.schema) {\n            for (const [tableName, columns] of Object.entries(this._.schema)){\n                this.query[tableName] = new RelationalQueryBuilder(schema.fullSchema, this._.schema, this._.tableNamesMap, schema.fullSchema[tableName], columns, dialect, session, this.mode);\n            }\n        }\n    }\n    $with(alias) {\n        return {\n            as (qb) {\n                if (typeof qb === \"function\") {\n                    qb = qb(new QueryBuilder());\n                }\n                return new Proxy(new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.W(qb.getSQL(), qb.getSelectedFields(), alias, true), new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n                    alias,\n                    sqlAliasedBehavior: \"alias\",\n                    sqlBehavior: \"error\"\n                }));\n            }\n        };\n    }\n    with(...queries) {\n        const self = this;\n        function select(fields) {\n            return new MySqlSelectBuilder({\n                fields: fields ?? undefined,\n                session: self.session,\n                dialect: self.dialect,\n                withList: queries\n            });\n        }\n        function selectDistinct(fields) {\n            return new MySqlSelectBuilder({\n                fields: fields ?? undefined,\n                session: self.session,\n                dialect: self.dialect,\n                withList: queries,\n                distinct: true\n            });\n        }\n        return {\n            select,\n            selectDistinct\n        };\n    }\n    select(fields) {\n        return new MySqlSelectBuilder({\n            fields: fields ?? undefined,\n            session: this.session,\n            dialect: this.dialect\n        });\n    }\n    selectDistinct(fields) {\n        return new MySqlSelectBuilder({\n            fields: fields ?? undefined,\n            session: this.session,\n            dialect: this.dialect,\n            distinct: true\n        });\n    }\n    update(table) {\n        return new MySqlUpdateBuilder(table, this.session, this.dialect);\n    }\n    insert(table) {\n        return new MySqlInsertBuilder(table, this.session, this.dialect);\n    }\n    delete(table) {\n        return new MySqlDelete(table, this.session, this.dialect);\n    }\n    execute(query) {\n        return this.session.execute(query.getSQL());\n    }\n    transaction(transaction, config) {\n        return this.session.transaction(transaction, config);\n    }\n}\nclass PreparedQuery {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlPreparedQuery\";\n    }\n}\nclass MySqlSession {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlSession\";\n    }\n    constructor(dialect){\n        this.dialect = dialect;\n    }\n    execute(query) {\n        return this.prepareQuery(this.dialect.sqlToQuery(query), undefined).execute();\n    }\n    getSetTransactionSQL(config) {\n        const parts = [];\n        if (config.isolationLevel) {\n            parts.push(`isolation level ${config.isolationLevel}`);\n        }\n        return parts.length ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join([\n            \"set transaction \",\n            parts.join(\" \")\n        ]) : undefined;\n    }\n    getStartTransactionSQL(config) {\n        const parts = [];\n        if (config.withConsistentSnapshot) {\n            parts.push(\"with consistent snapshot\");\n        }\n        if (config.accessMode) {\n            parts.push(config.accessMode);\n        }\n        return parts.length ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join([\n            \"start transaction \",\n            parts.join(\" \")\n        ]) : undefined;\n    }\n}\nclass MySqlTransaction extends MySqlDatabase {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlTransaction\";\n    }\n    constructor(dialect, session, schema, nestedIndex, mode){\n        super(dialect, session, schema, mode);\n        this.schema = schema;\n        this.nestedIndex = nestedIndex;\n    }\n    rollback() {\n        throw new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.l();\n    }\n}\nclass MySqlUpdateBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlUpdateBuilder\";\n    }\n    constructor(table, session, dialect){\n        this.table = table;\n        this.session = session;\n        this.dialect = dialect;\n    }\n    set(values) {\n        return new MySqlUpdate(this.table, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(this.table, values), this.session, this.dialect);\n    }\n}\nclass MySqlUpdate extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlUpdate\";\n    }\n    constructor(table, set, session, dialect){\n        super();\n        this.execute = (placeholderValues)=>{\n            return this.prepare().execute(placeholderValues);\n        };\n        this.createIterator = ()=>{\n            const self = this;\n            return async function*(placeholderValues) {\n                yield* self.prepare().iterator(placeholderValues);\n            };\n        };\n        this.iterator = this.createIterator();\n        this.session = session;\n        this.dialect = dialect;\n        this.config = {\n            set,\n            table\n        };\n    }\n    where(where) {\n        this.config.where = where;\n        return this;\n    }\n    /** @internal */ getSQL() {\n        return this.dialect.buildUpdateQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    prepare() {\n        return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), this.config.returning);\n    }\n}\nclass ViewBuilderCore {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlViewBuilder\";\n    }\n    constructor(name, schema){\n        this.config = {};\n        this.name = name;\n        this.schema = schema;\n    }\n    algorithm(algorithm) {\n        this.config.algorithm = algorithm;\n        return this;\n    }\n    definer(definer) {\n        this.config.definer = definer;\n        return this;\n    }\n    sqlSecurity(sqlSecurity) {\n        this.config.sqlSecurity = sqlSecurity;\n        return this;\n    }\n    withCheckOption(withCheckOption) {\n        this.config.withCheckOption = withCheckOption ?? \"cascaded\";\n        return this;\n    }\n}\nclass ViewBuilder extends ViewBuilderCore {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlViewBuilder\";\n    }\n    as(qb) {\n        if (typeof qb === \"function\") {\n            qb = qb(new QueryBuilder());\n        }\n        const selectionProxy = new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        });\n        const aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);\n        return new Proxy(new MySqlView({\n            mysqlConfig: this.config,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: aliasedSelection,\n                query: qb.getSQL().inlineParams()\n            }\n        }), selectionProxy);\n    }\n}\nclass ManualViewBuilder extends ViewBuilderCore {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlManualViewBuilder\";\n    }\n    constructor(name, columns, schema){\n        super(name, schema);\n        this.columns = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.I)(mysqlTable(name, columns));\n    }\n    existing() {\n        return new Proxy(new MySqlView({\n            mysqlConfig: undefined,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: undefined\n            }\n        }), new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n    as(query) {\n        return new Proxy(new MySqlView({\n            mysqlConfig: this.config,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: query.inlineParams()\n            }\n        }), new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n}\nclass MySqlViewBase extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.v {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlViewBase\";\n    }\n}\nconst MySqlViewConfig = Symbol.for(\"drizzle:MySqlViewConfig\");\nclass MySqlView extends MySqlViewBase {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"MySqlView\";\n    }\n    constructor({ mysqlConfig, config }){\n        super(config);\n        this[MySqlViewConfig] = mysqlConfig;\n    }\n}\n/** @internal */ function mysqlViewWithSchema(name, selection, schema) {\n    if (selection) {\n        return new ManualViewBuilder(name, selection, schema);\n    }\n    return new ViewBuilder(name, schema);\n}\nfunction mysqlView(name, selection) {\n    return mysqlViewWithSchema(name, selection, undefined);\n}\n //# sourceMappingURL=view-23898f21.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/drizzle-orm/view-23898f21.mjs\n");

/***/ })

};
;